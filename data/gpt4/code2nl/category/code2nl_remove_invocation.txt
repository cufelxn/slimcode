public final ExampleData getSelectedExampleData ( ) { Set < String > allSelectedItems =    ; if ( allSelectedItems == null ||      ) { return null ; } for ( String selectedItem : allSelectedItems ) { List < Integer > rowIndex =       ; return         ; } return null ; }<CODESPLIT>Get the example which is selected in the tree .
public void dimAt ( float alpha ) { if ( ! mDimEnabled ) { return ; } if ( mDimView == null ) { mDimView =    ; } if ( !      ) {       ;       ; }       ; }<CODESPLIT>Set the dim - behind layer a specific opacity .
public Path extract ( ) { if (    ) throw new IllegalStateException ( "Extract can only be called once" ) ;      ; SPTEntry currEdge = sptEntry ;       ; boolean nextEdgeValid =           ; int nextEdge ; while ( nextEdgeValid ) { nextEdgeValid =             ; nextEdge = nextEdgeValid ? currEdge . parent . edge : EdgeIterator . NO_EDGE ;             ; currEdge = currEdge . parent ; }       ;    ;      ; return     ; }<CODESPLIT>Extracts the Path from the shortest - path - tree determined by sptEntry .
public static int writeInt ( byte [ ] target , int offset , int value ) { target [ offset ] = ( byte ) ( value >>> 24 ) ; target [ offset + 1 ] = ( byte ) ( value >>> 16 ) ; target [ offset + 2 ] = ( byte ) ( value >>> 8 ) ; target [ offset + 3 ] = ( byte ) value ; return Integer . BYTES ; }<CODESPLIT>Writes the given 32 - bit Integer to the given byte array at the given offset .
private void visitGetElem ( Node n ) {                         ;     ; }<CODESPLIT>Visits a GETELEM node .
private static Class < ? > getTypedClass ( java . lang . reflect . Type type ) { if ( type instanceof Class ) { return ( ( Class ) type ) ; } else if ( type instanceof ParameterizedType ) { java . lang . reflect . Type rawParamterizedType =           ; return     ; } else if ( type instanceof TypeVariable ) { java . lang . reflect . Type upperBound =           [ 0 ] ; return     ; } throw new IllegalArgumentException ( "Error while finding generic class for :" + type ) ; }<CODESPLIT>Gets the typed class .
public URI toUri ( JimfsPath path ) {          ; return             ; }<CODESPLIT>Gets the URI of the given path in this file system .
public ActivityInterface getActivityInterface ( ) { if ( activityInterface == null ) { activityInterface = new ActivityInterface ( apiKey , sharedSecret , transport ) ; } return activityInterface ; }<CODESPLIT>Get the ActivityInterface .
private void initBeforeList ( ) { final List < ProcessAdvice > beforeRequestProcessAdvices = new ArrayList < > ( ) ; final Method invokeHolder =    ; final Class < ? > processorClass =      ; if ( null != processorClass &&         ) { final Class < ? extends ProcessAdvice > [ ] bcs =             ; for ( int i = 0 ; i < bcs . length ; i ++ ) { final Class < ? extends ProcessAdvice > bc = bcs [ i ] ; final ProcessAdvice beforeRequestProcessAdvice =           ;       ; } } if (         ) { final Class < ? extends ProcessAdvice > [ ] bcs =             ; for ( int i = 0 ; i < bcs . length ; i ++ ) { final Class < ? extends ProcessAdvice > bc = bcs [ i ] ; final ProcessAdvice beforeRequestProcessAdvice =           ;       ; } } this . beforeRequestProcessAdvices = beforeRequestProcessAdvices ; }<CODESPLIT>Initializes before process advices .
private void init ( ) { jsFactory = new JsonFactory ( ) ;             ;             ;             ; }<CODESPLIT>Creates the JsonFactory .
static void flushStackLocalLeaks ( Looper looper ) { Handler handler = new Handler ( looper ) { public void handleMessage ( Message msg ) {         ; } } ;             ; }<CODESPLIT>Prior to Android 5 HandlerThread always keeps a stack local reference to the last message that was sent to it . This method makes sure that stack local reference never stays there for too long by sending new messages to it every second .
public void addReset ( String label ) { if ( buttons == null )    ; Element e = new Input ( Input . Reset , "Reset" , label ) ; if ( extendRow )       ; else       ; }<CODESPLIT>Add a reset button .
public static int getMaximumVolume ( Context context ) { return                     ; }<CODESPLIT>Returns maximum volume the media volume can have
@ SuppressWarnings ( "checkstyle:npathcomplexity" ) public void removeSREs ( ISREInstall ... sres ) { final ISREInstall defaultSRE =    ; final String defaultId = defaultSRE == null ? null :      ; int defaultIndex = - 1 ; if ( defaultId != null ) { for ( int i = 0 ; defaultIndex == - 1 && i <        ; ++ i ) { if (                           ) { defaultIndex = i ; } } } final String normedDefaultId =       ; boolean defaultIsRemoved = false ; for ( final ISREInstall sre : sres ) { if (         &&           ) { defaultIsRemoved = true ; } }    ; if ( defaultIsRemoved ) { if (        == 0 ) {     ; } else { if ( defaultIndex < 0 ) { defaultIndex = 0 ; } else if ( defaultIndex >=        ) { defaultIndex =        - 1 ; }                    ; } }         ; if ( defaultIsRemoved ) {    ; }    ; }<CODESPLIT>Removes the given SREs from the table .
public static WikiUser getUser ( String wikiId , String siteurl ) { WikiUser result = null ; try { Properties props =     ; result = new WikiUser ( ) ;            ;            ; Crypt pcf = new Crypt (       ,       ) ;                 ; } catch ( FileNotFoundException e ) { String msg =       ;           ; } catch ( IOException e ) {               ; } catch ( GeneralSecurityException e ) {               ; } return result ; }<CODESPLIT>get the Wiki user for the given wikiid
public T next ( ) { int retryCount = 0 ; do { T next =      ; if ( !       ) {       ; return next ; } retryCount ++ ; } while ( retryCount <= numberOfRetries ) ; throw new IllegalStateException (                    ) ; }<CODESPLIT>Returns unique &lt ; T&gt ; generated by delegate Generator&lt ; T&gt ;
private boolean isAllowedInsideList ( Node node ) { return (      != Node . ELEMENT_NODE ||           ) && (      != Node . TEXT_NODE ||              == 0 ) ; }<CODESPLIT>Checks if a given node is allowed or not as a child of a &lt ; ul&gt ; or &lt ; ol&gt ; element .
public static ResidueNumber [ ] matchSequenceToStructure ( ProteinSequence seq , Structure struct ) { Map < Integer , Group > atomIndexPosition = new HashMap < Integer , Group > ( ) ; ProteinSequence structSeq =       ; SubstitutionMatrix < AminoAcidCompound > matrix = new SimpleSubstitutionMatrix < AminoAcidCompound > (      , ( short ) 1 , ( short ) - 1 ) ; matrix = new SimpleSubstitutionMatrix < AminoAcidCompound > (      , new InputStreamReader (         ) , "blosum100" ) ; SequencePair < ProteinSequence , AminoAcidCompound > pair =                    ; AlignedSequence < ProteinSequence , AminoAcidCompound > alignedSeq =      ; AlignedSequence < ProteinSequence , AminoAcidCompound > alignedStruct =      ; assert (      ==      ) ; ResidueNumber [ ] ca = new ResidueNumber [      ] ; for ( int pos =          ; pos <=          ; pos ++ ) { if (       ) { int structIndex =       - 1 ; assert ( structIndex > 0 ) ; Group g =       ;                                                    ; continue ; } if ( !       ) { int seqIndex =       - 1 ; int structIndex =       - 1 ; Group g =       ; assert ( 0 <= seqIndex && seqIndex < ca . length ) ; ca [ seqIndex ] =      ; } } return ca ; }<CODESPLIT>Given a sequence and the corresponding Structure get the ResidueNumber for each residue in the sequence .
@ SuppressWarnings ( { "unchecked" } ) public static IMeta mergeMeta ( IMetaData < ? , ? > metaData1 , IMetaData < ? , ? > metaData2 ) { Map < String , Object > map1 = ( ( Map < String , Object > ) metaData1 ) ; Set < Entry < String , Object > > set1 =      ; Map < String , Object > map2 = ( ( Map < String , Object > ) metaData2 ) ; Set < Entry < String , Object > > set2 =      ; Map < String , Object > rep = new HashMap < String , Object > ( ) ; for ( Entry < String , Object > entry1 : set1 ) { String key1 =      ; if (       ) { Object value1 =       ; Object value2 =       ; if ( value1 instanceof Double ) { if (               <               ) {         ; } } else if ( value1 instanceof Integer ) { if (               <               ) {         ; } } else if ( value1 instanceof Long ) { if (               <               ) {         ; } } if ( value1 instanceof Boolean ) { if ( !           &&           ) {         ; } } } }           ;           ;       ; return metaData1 ; }<CODESPLIT>Merges the two Meta objects
public List < T > subList ( int arg0 , int arg1 ) { while (      < arg1 &&    ) {    ; } return              ; }<CODESPLIT>Returns a sub - list in the range specified loading more results as necessary .
private Message prepare ( String channel , Message message , Recipient [ ] recipients ) {         ;         ;                 ;             ;         ; return message ; }<CODESPLIT>Adds publication - specific metadata to the message .
private < T > GraphRequest < T > graph ( String object , JavaType type , Param ... params ) {      ; GraphRequest < T > req = new GraphRequest < T > ( object , params , this . mapper ,          ) ;         ; return req ; }<CODESPLIT>The actual implementation of this after we ve converted to proper Jackson JavaType
public void writeLength ( long length ) { if ( length < 251 ) { buf [ position ++ ] = ( byte ) length ; } else if ( length < 65536 ) { buf [ position ++ ] = ( byte ) 0xfc ; buf [ position ++ ] = ( byte ) length ; buf [ position ++ ] = ( byte ) ( length >>> 8 ) ; } else if ( length < 16777216 ) { buf [ position ++ ] = ( byte ) 0xfd ; buf [ position ++ ] = ( byte ) length ; buf [ position ++ ] = ( byte ) ( length >>> 8 ) ; buf [ position ++ ] = ( byte ) ( length >>> 16 ) ; } else { buf [ position ++ ] = ( byte ) 0xfe ; buf [ position ++ ] = ( byte ) length ; buf [ position ++ ] = ( byte ) ( length >>> 8 ) ; buf [ position ++ ] = ( byte ) ( length >>> 16 ) ; buf [ position ++ ] = ( byte ) ( length >>> 24 ) ; buf [ position ++ ] = ( byte ) ( length >>> 32 ) ; buf [ position ++ ] = ( byte ) ( length >>> 40 ) ; buf [ position ++ ] = ( byte ) ( length >>> 48 ) ; buf [ position ++ ] = ( byte ) ( length >>> 54 ) ; } }<CODESPLIT>Write length .
public static < TSource , TResult > List < TResult > map ( Collection < TSource > items , Mapper < TSource , TResult > mapper ) { if (     ) { return new ArrayList < > ( ) ; } List < TResult > result = new ArrayList < > (      ) ; for ( TSource item : items ) { TResult mappedItem =       ;       ; } return result ; }<CODESPLIT>Projects each element of a collection into a new collection .
private static void serializeReal ( final Number real , final ContentHandler handler ) throws SAXException {                  ; }<CODESPLIT>Serialize a Number as a real element .
public JMenuBar setupStandardMenu ( ActionListener targetAction , boolean bAddHelpMenu ) { Application application =          ; ResourceBundle oldResources =      ;         ;       ; JMenuBar menuBar = new JMenuBar ( ) { private static final long serialVersionUID = 1L ; public Dimension getMaximumSize ( ) { return new Dimension (      . width ,      . height ) ; } } ;       ; JMenu menu ; char [ ] rgchItemShortcuts = new char [ 20 ] ; menu =           ;             ;      ;             ;             ;             ;      ;             ; rgchItemShortcuts = new char [ 20 ] ; menu =           ;             ;             ;             ;      ;             ; if ( oldResources != null )       ; if ( bAddHelpMenu ) menu =       ; return menuBar ; }<CODESPLIT>Setup the standard menu items .
public static String getPreferredAttributeNameForLaneCount ( ) { final Preferences prefs =         ; if ( prefs != null ) { return         ; } return DEFAULT_ATTR_LANE_COUNT ; }<CODESPLIT>Replies the preferred name for the number of lanes of the roads .
public static nsrollbackcmd [ ] get ( nitro_service service , nsrollbackcmd_args args ) throws Exception { nsrollbackcmd obj = new nsrollbackcmd ( ) ; options option = new options ( ) ;            ; nsrollbackcmd [ ] response = ( nsrollbackcmd [ ] )         ; return response ; }<CODESPLIT>Use this API to fetch all the nsrollbackcmd resources that are configured on netscaler . This uses nsrollbackcmd_args which is a way to provide additional arguments while fetching the resources .
private int translateElementNo ( int i ) { if ( ! useList || i < 0 ) { return i ; } int j = 0 ; PatternRule rule = ( PatternRule ) this . rule ; for ( int k = 0 ; k < i ; k ++ ) { j +=           ; } return j ; }<CODESPLIT>Gets the index of the element indexed by i adding any offsets because of the phrases in the rule .
public String [ ] getProxyHostsWhiteList ( ) { if ( _proxyHostsWhiteList == null ||      == 0 ) return new String [ 0 ] ; String [ ] hosts = new String [      ] ; hosts = ( String [ ] )       ; return hosts ; }<CODESPLIT>Get proxy host white list .
public boolean addMetatypeAd ( MetatypeAd metatypeAd ) { if ( this . metatypeAds == null ) this . metatypeAds = new LinkedList < MetatypeAd > ( ) ; for ( MetatypeAd ad : metatypeAds ) if (               ) return false ;         ; return true ; }<CODESPLIT>Adds a metatype AD .
public long skip ( long n ) throws IOException { if (      >= n ) { return       ; }      ; mPos += n ; try { mObject =                     ; mInputStream = new BufferedInputStream (      ) ; } catch ( ServiceException e ) { throw new IOException ( e ) ; } return n ; }<CODESPLIT>This method leverages the ability to open a stream from GCS from a given offset . When the underlying stream has fewer bytes buffered than the skip request the stream is closed and a new stream is opened starting at the requested offset .
public static boolean isSuperCall ( JCTree tree ) { Name name =     ; if ( name != null ) { Names names = name . table . names ; return name == names . _super ; } else { return false ; } }<CODESPLIT>Is this a call to super?
public static String getShortRequestDump ( String fromMethod , boolean includeHeaders , HttpServletRequest request ) { StringBuilder dump = new StringBuilder ( ) ;                       ;                   ;                       ;                       ;                       ;                       ;                       ;                       ;                       ;                       ;                      ; if ( includeHeaders ) {        ; Enumeration < String > headers =      ; while (      ) { String header =      ;                                 ; } } return (      ) ; }<CODESPLIT>Build a String containing a short multi - line dump of an HTTP request .
public static void validateNotEmpty ( String stringToCheck , boolean trim , String argumentName ) throws NullArgumentException {       ; if (      == 0 || ( trim &&          == 0 ) ) { throw new NullArgumentException ( argumentName + IS_EMPTY ) ; } }<CODESPLIT>Validates that the string is not null and not an empty string .
public static JPanel createPanelWithVerticalLayout ( ) { JPanel _panel = new JPanel ( ) ;               ; return _panel ; }<CODESPLIT>Create a panel that lays out components vertically .
protected boolean shouldAnalyze ( ) { if ( analyzer instanceof FileTypeAnalyzer ) { final FileTypeAnalyzer fileTypeAnalyzer = ( FileTypeAnalyzer ) analyzer ; return           ; } return true ; }<CODESPLIT>Determines if the analyzer can analyze the given dependency .
public void registerServiceClass ( Class serviceClass ) {             ;             ; }<CODESPLIT>Registers a service enabling the service layer to automatically start autorun servies .
public String getSectionText ( String pageTitle , int sectionNumber ) throws Exception { String result =             ; return result ; }<CODESPLIT>get the text for the given section
public static double pearson ( int [ ] x , int [ ] y ) { if ( x . length != y . length ) throw new IllegalArgumentException (                    ) ; return 1 -         ; }<CODESPLIT>Pearson correlation distance between the two arrays of type int .
public static TileGrid getTileGridFromWGS84 ( Point point , int zoom ) { Projection projection =         ; return         ; }<CODESPLIT>Get the tile grid for the location specified as WGS84
public List < VectorLayer > getVectorLayers ( ) { ArrayList < VectorLayer > list = new ArrayList < VectorLayer > ( ) ; for ( Layer < ? > layer : layers ) { if ( layer instanceof VectorLayer ) {          ; } } return list ; }<CODESPLIT>Return a list containing all vector layers within this model .
private void calcRmsd ( Point3d [ ] x , Point3d [ ] y ) { if ( centered ) {       ; } else { xref =       ; xtrans =       ;           ;      ;             ; yref =       ; ytrans =       ;           ;      ;             ;       ; }     ; }<CODESPLIT>Calculates the RMSD value for superposition of y onto x . This requires the coordinates to be precentered .
public void setSectionHeading ( Title v ) { if ( Section_Type . featOkTst && ( ( Section_Type ) jcasType ) . casFeat_sectionHeading == null )           ;                           ; }<CODESPLIT>setter for sectionHeading - sets the title of the section
public Response process ( InputStream is ) throws IOException , SAXException , ParserConfigurationException { SxmpParser parser = new SxmpParser ( version ) ; Operation operation = null ; try { operation =       ; } catch ( SxmpParsingException e ) { if (      != null &&          != null ) {                                  ; return new ErrorResponse (          ,          ,      ) ; } else { throw new SAXException (      , e ) ; } } try { if ( ! ( operation instanceof Request ) ) { throw new SxmpErrorException ( SxmpErrorCode . UNSUPPORTED_OPERATION , "A session can only process requests" ) ; } Request req = ( Request ) operation ; if (      == null ) { throw new SxmpErrorException ( SxmpErrorCode . MISSING_REQUIRED_ELEMENT , "A request must include account credentials" ) ; } if ( !           ) { throw new SxmpErrorException ( SxmpErrorCode . AUTHENTICATION_FAILURE , "Authentication failure" ) ; } if ( operation instanceof SubmitRequest ) { return                ; } else if ( operation instanceof DeliverRequest ) { return                ; } else if ( operation instanceof DeliveryReportRequest ) { return                ; } else { throw new SxmpErrorException ( SxmpErrorCode . UNSUPPORTED_OPERATION , "Unsupported operation request type" ) ; } } catch ( SxmpErrorException e ) {           ; return new ErrorResponse (      ,          ,      ) ; } catch ( Throwable t ) {                 ; return new ErrorResponse (      ,        , "Generic error while processing request" ) ; } }<CODESPLIT>Processes an InputStream that contains a request . Does its best to only produce a Response that can be written to an OutputStream . Any exception this method throws should be treated as fatal and no attempt should be made to print out valid XML as a response .
private void submitPayload ( String url , HttpRequestUtil . ConnectionSettings connectionSettings , String jsonPayloadObject , String pushApplicationId , String masterSecret , MessageResponseCallback callback , List < String > redirectUrls ) { if (       ) { throw new PushSenderException ( "The site contains an infinite redirect loop! Duplicate url: " + url ) ; } else {       ; } HttpURLConnection httpURLConnection = null ; try { final String credentials = pushApplicationId + ':' + masterSecret ; final String encoded =            ; httpURLConnection = ( HttpURLConnection )                   ; final int statusCode =      ;                        ; if (     ) { String redirectURL =       ;                     ;                     ; } else if ( statusCode >= 400 ) {                    ; throw new PushSenderHttpException ( statusCode ) ; } else { if ( callback != null ) {      ; } } } catch ( PushSenderHttpException pshe ) { throw pshe ; } catch ( Exception e ) {                      ; throw new PushSenderException (      , e ) ; } finally { if ( httpURLConnection != null ) {      ; } } }<CODESPLIT>The actual method that does the real send and connection handling
public String [ ] getChildNames ( ) { if ( children == null ||      == 0 ) return EMPTY_NAMES ; String [ ] arr = new String [      ] ; for ( int i = 0 ; i < arr . length ; i ++ ) { arr [ i ] =                ; } return arr ; }<CODESPLIT>Gibt den Feldnamen children zurueck .
public static Object getIndex ( Object array , int index ) throws UtilTargetError {               ; try { if ( array instanceof List ) return               ; Object val =         ; return                  ; } catch ( IndexOutOfBoundsException e1 ) { int len = array instanceof List ?              :       ; throw new UtilTargetError ( "Index " + index + " out-of-bounds for length " + len , e1 ) ; } }<CODESPLIT>Get object from array or list at index .
public static base_response add ( nitro_service client , aaakcdaccount resource ) throws Exception { aaakcdaccount addresource = new aaakcdaccount ( ) ; addresource . kcdaccount = resource . kcdaccount ; addresource . keytab = resource . keytab ; addresource . realmstr = resource . realmstr ; addresource . delegateduser = resource . delegateduser ; addresource . kcdpassword = resource . kcdpassword ; addresource . usercert = resource . usercert ; addresource . cacert = resource . cacert ; return       ; }<CODESPLIT>Use this API to add aaakcdaccount .
public synchronized void lockExclusive ( ) { if (      &&      )             ; boolean interrupted = false ; while ( !    ) { try { if (      &&      )               ;     ; } catch ( InterruptedException e ) { interrupted = true ; } } while ( iLockCount > 0 ) { try { if (      &&      )                    ;     ; } catch ( InterruptedException e ) { interrupted = true ; } } if ( interrupted ) {          ; } if (      &&      )           ; }<CODESPLIT>This method locks the mutex so no other lockers can get the lock .
public void setCPOptionValueLocalService ( com . liferay . commerce . product . service . CPOptionValueLocalService cpOptionValueLocalService ) { this . cpOptionValueLocalService = cpOptionValueLocalService ; }<CODESPLIT>Sets the cp option value local service .
public static String inferModulePathFromType ( TypeDeclaration type ) { PackageDeclaration pkg =      ; return pkg != null ? '/' +             : "/" ; }<CODESPLIT>Infers the Struts module path from the given controller class .
final int getLeapMonth ( int cycle , int yearOfCycle ) { int [ ] leapMonths =      ; int elapsedYears = ( cycle - 1 ) * 60 + yearOfCycle - 1 ; int index = 2 * ( ( elapsedYears - leapMonths [ 0 ] ) / 3 ) ; int lm = 0 ; while ( ( index < leapMonths . length ) ) { int test = leapMonths [ index ] ; if ( test < elapsedYears ) { index +=                   ; } else if ( test > elapsedYears ) { break ; } else { lm = leapMonths [ index + 1 ] ; break ; } } return lm ; }<CODESPLIT>number of leap month or zero if no leap year
public Snippet getSnippet ( Integer snippetId , boolean downloadContent ) throws GitLabApiException { if ( snippetId == null ) { throw new RuntimeException ( "snippetId can't be null" ) ; } Response response =               ; Snippet snippet =         ; if ( downloadContent ) {              ; } return snippet ; }<CODESPLIT>Get a specific Snippet .
public final int get ( int codePoint ) { int value ; int ix ; if ( codePoint >= 0 ) { if ( codePoint < 0x0d800 || ( codePoint > 0x0dbff && codePoint <= 0x0ffff ) ) { ix = index [ codePoint >> UTRIE2_SHIFT_2 ] ; ix = ( ix << UTRIE2_INDEX_SHIFT ) + ( codePoint & UTRIE2_DATA_MASK ) ; value = data32 [ ix ] ; return value ; } if ( codePoint <= 0xffff ) { ix = index [ UTRIE2_LSCP_INDEX_2_OFFSET + ( ( codePoint - 0xd800 ) >> UTRIE2_SHIFT_2 ) ] ; ix = ( ix << UTRIE2_INDEX_SHIFT ) + ( codePoint & UTRIE2_DATA_MASK ) ; value = data32 [ ix ] ; return value ; } if ( codePoint < highStart ) { ix = ( UTRIE2_INDEX_1_OFFSET - UTRIE2_OMITTED_BMP_INDEX_1_LENGTH ) + ( codePoint >> UTRIE2_SHIFT_1 ) ; ix = index [ ix ] ; ix += ( codePoint >> UTRIE2_SHIFT_2 ) & UTRIE2_INDEX_2_MASK ; ix = index [ ix ] ; ix = ( ix << UTRIE2_INDEX_SHIFT ) + ( codePoint & UTRIE2_DATA_MASK ) ; value = data32 [ ix ] ; return value ; } if ( codePoint <= 0x10ffff ) { value = data32 [ highValueIndex ] ; return value ; } } return errorValue ; }<CODESPLIT>Get the value for a code point as stored in the Trie2 .
public static Object getMBeanAttributeObject ( String name , String attrName ) throws JMException { MBeanServer server =    ; ObjectName objName = new ObjectName ( name ) ; return         ; }<CODESPLIT>Get MBean attribute object
public synchronized void setSelectedIndex ( final int selectedIndex ) { if (      <= selectedIndex || selectedIndex < - 1 ) { throw new IndexOutOfBoundsException ( "Illegal argument to ComboBox.setSelectedIndex: " + selectedIndex ) ; } final int oldSelection = this . selectedIndex ; this . selectedIndex = selectedIndex ; if ( selectedIndex == - 1 ) {     ; } else {              ; }                                   ;    ; }<CODESPLIT>Programmatically selects one item in the combo box which causes the displayed text to change to match the label of the selected index .
public Stats getPhotoStats ( String photoId , Date date ) throws FlickrException { return           ; }<CODESPLIT>Get the number of views comments and favorites on a photo for a given date .
public ServiceCall < DocumentStatus > getDocumentStatus ( GetDocumentStatusOptions getDocumentStatusOptions ) {            ; String [ ] pathSegments = { "v1/environments" , "collections" , "documents" } ; String [ ] pathParameters = {      ,      ,      } ; RequestBuilder builder =                  ;         ; Map < String , String > sdkHeaders =           ; for ( Entry < String , String > header :      ) {                 ; }         ; return                  ; }<CODESPLIT>Get document details .
public Pager < Issue > getClosesIssues ( Object projectIdOrPath , Integer mergeRequestIid , int itemsPerPage ) throws GitLabApiException { return new Pager < Issue > ( this , Issue . class , itemsPerPage , null , "projects" ,     , "merge_requests" , mergeRequestIid , "closes_issues" ) ; }<CODESPLIT>Get a Pager containing all the issues that would be closed by merging the provided merge request .
public static final void loge ( Class < ? > clazz , String msg , Exception ... e ) { if ( DEBUG ) { String exceptionStr = "" ; if ( e != null && e . length == 1 ) { StringWriter sw = new StringWriter ( ) ; PrintWriter pw = new PrintWriter ( sw ) ;          ;      ; exceptionStr = "exception = " +      ; }                                         ; } }<CODESPLIT>To output the error log message to the error out
public static HtmlTree TH ( HtmlStyle styleClass , String scope , Content body ) { HtmlTree htmltree = new HtmlTree ( HtmlTag . TH ,     ) ; if ( styleClass != null )       ;              ; return htmltree ; }<CODESPLIT>Generates a TH tag with style class and scope attributes and some content .
private void obtainDividerMargin ( final int themeResourceId ) { TypedArray typedArray =                         ;            ; }<CODESPLIT>Obtains the left and right margin of dividers from a specific theme .
public void setDefaultButton ( SBaseButton button ) {                     ; }<CODESPLIT>Set the default button for this basepanel .
public Key select ( int k ) { if ( k < 0 || k >=     ) throw new IllegalArgumentException ( ) ; RedBlackTreeNode < Key , Value > x =       ; return      ; }<CODESPLIT>Return the kth smallest key in the symbol table .
public void add ( RequestHandler request ) {          ; try {       ; } finally {          ; } }<CODESPLIT>Adds a request handler to this queue .
public static < T > T withPrintWriter ( OutputStream stream , @ ClosureParams ( value = SimpleType . class , options = "java.io.PrintWriter" ) Closure < T > closure ) throws IOException { return          ; }<CODESPLIT>Create a new PrintWriter for this OutputStream . The writer is passed to the closure and will be closed before this method returns .
public void addRegexRoute ( String urlPattern , Class < ? extends Actor > actorClass ) throws RouteAlreadyMappedException {             ; }<CODESPLIT>Add a URL pattern to the routing table .
public synchronized void sendQueuedEvents ( KeenProject project , KeenCallback callback ) { if ( ! isActive ) {     ; return ; } if ( project == null && defaultProject == null ) {                  ; return ; } if ( !    ) {                          ;             ; return ; } KeenProject useProject = ( project == null ? defaultProject : project ) ; try { String projectId =      ; Map < String , List < Object > > eventHandles =       ; Map < String , List < Map < String , Object > > > events =       ; String response =       ; if ( response != null ) { try {       ; } catch ( Exception e ) {                   ; } }     ; } catch ( Exception e ) {       ; } }<CODESPLIT>Synchronously sends all queued events for the given project . This method will immediately publish the events to the Keen server in the current thread .
public int getMaxQueuedConnections ( ) { return    == null ? - 1 : ( (        instanceof ArrayBlockingQueue ) ?                 +                 : - 1 ) ; }<CODESPLIT>this should only be used as an estimate
final public AuxiliaryTree TreeRoot ( boolean requiresFoot ) throws ParseException { SimpleNode jjtn000 = new SimpleNode ( JJTTREEROOT ) ; boolean jjtc000 = true ;       ; Tree t ; try { t =    ;         ; jjtc000 = false ; { if ( true ) return new AuxiliaryTree ( t , requiresFoot ) ; } } catch ( Throwable jjte000 ) { if ( jjtc000 ) {       ; jjtc000 = false ; } else {      ; } if ( jjte000 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte000 ; } } if ( jjte000 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte000 ; } } { if ( true ) throw ( Error ) jjte000 ; } } finally { if ( jjtc000 ) {         ; } } throw new Error ( "Missing return statement in function" ) ; }<CODESPLIT>the argument says whether there must be a foot node on the aux tree .
INodeDirectory addToParent ( byte [ ] src , INodeDirectory parentINode , INode newNode , boolean propagateModTime , int childIndex ) { INodeDirectory newParent = null ;    ; try { try { newParent =                 ;     ; } catch ( FileNotFoundException e ) { return null ; } if ( newParent == null ) return null ; if ( !      ) { INodeFile newF = ( INodeFile ) newNode ; BlockInfo [ ] blocks =      ; for ( int i = 0 ; i < blocks . length ; i ++ ) {                       ; } } } finally {    ; } return newParent ; }<CODESPLIT>Add node to parent node when loading the image .
public void setModel ( final MindMap model , final boolean notifyModelChangeListeners ) {      ; try { if ( this . elementUnderEdit != null ) {                        ; } final List < int [ ] > selectedPaths = new ArrayList < int [ ] > ( ) ; for ( final Topic t : this . selectedTopics ) {           ; }        ; final MindMap oldModel = this . model ; this . model =           ; for ( final PanelAwarePlugin p :             ) {             ; }    ;    ; boolean selectionChanged = false ; for ( final int [ ] posPath : selectedPaths ) { final Topic topic =         ; if ( topic == null ) { selectionChanged = true ; } else if ( !       ) {         ; } } if ( selectionChanged ) {    ; }    ; } finally {      ; if ( notifyModelChangeListeners ) {     ; } } }<CODESPLIT>Set model for the panel allows to notify listeners optionally .
public OperationFuture < LoadBalancer > delete ( LoadBalancer loadBalancer ) { LoadBalancerMetadata loadBalancerMetadata =     ;                 ; return new OperationFuture < > ( loadBalancer , new NoWaitingJobFuture ( ) ) ; }<CODESPLIT>Delete load balancer
public GetSnapshotResponse getSnapshot ( GetSnapshotRequest request ) {           ;                ; InternalRequest internalRequest =                   ; return         ; }<CODESPLIT>Getting the detail information of specified snapshot .
@ SuppressWarnings ( "checkstyle:emptycatchblock" ) void excludeLoggers ( ) { try {         ;       ;       ; } catch ( NoClassDefFoundError ignored ) { } }<CODESPLIT>If using Logback stop any configured appender from creating Bugsnag reports for Spring log messages as they effectively duplicate error reports for unhandled exceptions .
public void subtract ( R1 relationships ) { if ( null == base ) { throw new AssertionError ( "" ) ; } for ( int i = 0 ; i < base . length ; i ++ ) { if ( null == base [ i ] ) { continue ; } final IConceptSet set = data [ i ] = new SparseConceptHashSet ( ) ;          ; if ( null != relationships . data [ i ] ) {            ; } } }<CODESPLIT>This should only ever be called when the relationships wrap an initial state and no other methods have been called .
private static < E > E getEndpoint ( Class < E > type , String name , Reflections reflections ) { E result = null ; Set < Class < ? extends E > > foundClasses =       ; Set < Class < ? extends E > > endpointClasses = new HashSet < > ( ) ; for ( Class < ? extends E > clazz : foundClasses ) { if ( !           ) {       ; } } Iterator < Class < ? extends E > > iterator =      ; while (      ) { Class < ? extends E > next =      ; if (             ) {      ; } } if (      != 0 ) { if (      > 1 ) {                  ; } try { result =              ; } catch ( Exception e ) {                         ;      ; } } return result ; }<CODESPLIT>Locates a single endpoint class .
public final void writtenStartedFlush ( AOStream stream , Item startedFlushItem ) { if (      &&      )         ; String key =                 ; StreamInfo sinfo =       ; if ( ( sinfo != null ) &&           ) { synchronized ( sinfo ) { sinfo . item = ( AOStartedFlushItem ) startedFlushItem ; } } else { SIErrorException e = new SIErrorException (                   ) ;             ;         ;                   ; if (      &&      )           ; throw e ; } if (      &&      )         ; }<CODESPLIT>Callback when the Item that records that flush has been started has been committed to persistent storage
public static List < Report > getDetailSubreports ( ReportLayout reportLayout ) { List < Report > subreports = new ArrayList < Report > ( ) ; Band band =      ; for ( int i = 0 , rows =      ; i < rows ; i ++ ) { List < BandElement > list =       ; for ( int j = 0 , size =      ; j < size ; j ++ ) { BandElement be =       ; if ( be instanceof ReportBandElement ) {                ; } } } return subreports ; }<CODESPLIT>Get detail band subreports for a report layout
public ApiAppList getApiApps ( ) throws HelloSignException { return new ApiAppList (                  ) ; }<CODESPLIT>Retrieves a paged list of API apps for the authenticated account .
public void detachAgent ( Object pVm ) { try { if ( pVm != null ) { Class clazz =      ; Method method =       ;       ;       ; } } catch ( InvocationTargetException e ) { throw new ProcessingException ( "Error while detaching" , e , options ) ; } catch ( NoSuchMethodException e ) { throw new ProcessingException ( "Error while detaching" , e , options ) ; } catch ( IllegalAccessException e ) { throw new ProcessingException ( "Error while detaching" , e , options ) ; } }<CODESPLIT>Detach from the virtual machine
public ObjectGraph excludeClasses ( Class < ? > ... classes ) { for ( Class < ? > c : classes ) { if ( c == null ) { throw new NullPointerException ( "Null class not allowed" ) ; }       ; } return this ; }<CODESPLIT>Exclude any object that extends from these classes .
public void setSampling ( double min , double max , int total ) { this . sampleMin = min ; this . sampleMax = max ; this . numSamples = total ; this . scores = new double [ numSamples ] ; }<CODESPLIT>Specifies how focal lengths are sampled on a log scale . Remember 1 . 0 = nominal length
private void calcProductAtVar ( int v , VarTensor prod , int excl1 , int excl2 ) { for ( int nb = 0 ; nb <       ; nb ++ ) { if ( nb == excl1 || nb == excl2 ) { continue ; } VarTensor nbMsg = msgs [         ] ;       ; } }<CODESPLIT>Computes the product of all messages being sent to a node optionally excluding messages sent from another node or two .
protected ItemState findLastItemState ( QPath itemPath ) { for ( int i =      - 1 ; i >= 0 ; i -- ) { ItemState istate =       ; if (               ) return istate ; } return null ; }<CODESPLIT>Find last ItemState .
public void addDispatcher ( String dispatcherId , AbsActorDispatcher dispatcher ) { synchronized ( dispatchers ) { if (       ) { return ; }         ; } }<CODESPLIT>Registering custom dispatcher
private void sgdTrain ( ClassificationDataSet D , MatrixOfVecs W , Vec b , int sign_mul , boolean parallel ) { IntList order = new IntList (      ) ;                 ; final double lambda_adj = lambda / (      * epochs ) ; int [ ] owned = new int [ K ] ; int assigned_positive_instances = 0 ; int [ ] assignments = new int [      ] ;          ; Vec dots = new DenseVector (      ) ; long t = 0 ; for ( int epoch = 0 ; epoch < epochs ; epoch ++ ) {       ; for ( int i : order ) { t ++ ; double eta = 1 / ( lambda_adj * t ) ; Vec x_i =           ; int y_i = (       * 2 - 1 ) * sign_mul ;       ;           ; if ( y_i == - 1 ) { for ( int k = 0 ; k < K ; k ++ ) if (       > - 1 ) {              ;          ; } } else { int k_true_max = 0 ; for ( int k = 1 ; k <      ; k ++ ) if (       >       ) k_true_max = k ; if (       < 1 ) { int z =               ;              ;         ; if ( assignments [ i ] < 0 ) assigned_positive_instances ++ ; else owned [ assignments [ i ] ] -- ; owned [ z ] ++ ; assignments [ i ] = z ; } }           ;           ; } } }<CODESPLIT>Training procedure that can be applied to each version of the CPM sub - problem .
public static appfwfieldtype [ ] get ( nitro_service service ) throws Exception { appfwfieldtype obj = new appfwfieldtype ( ) ; appfwfieldtype [ ] response = ( appfwfieldtype [ ] )       ; return response ; }<CODESPLIT>Use this API to fetch all the appfwfieldtype resources that are configured on netscaler .
public Future < Channel > create ( final Promise < Channel > channelReadyPromise ) { final long delay =        ;                                                                          ;                                                                                                                                                                                           ; return channelReadyPromise ; }<CODESPLIT>Creates and connects a new channel . The initial connection attempt may be delayed to accommodate exponential back - off requirements .
public static List < String > loadOptions ( String optionFileName ) { List < String > args = new ArrayList < String > ( ) ; File optionFile = new File ( optionFileName ) ; StringWriter stringWriter = new StringWriter ( ) ; try { InputStream inputStream = new FileInputStream ( optionFile ) ;         ; } catch ( FileNotFoundException e ) {                   ;       ; } catch ( IOException e ) {                   ;       ; } String string =      ; StringTokenizer stringTokenizer = new StringTokenizer ( string ) ; while (      ) {           ; } return args ; }<CODESPLIT>Load options from a file
public void runJob ( ) { try { this . currentJob =        ; ExecutionContext context = new ExecutionContext ( ) ; try {         ; } catch ( ExecutionContextException e ) { throw new RuntimeException ( "Failed to initialize Job " + this . currentJob + " execution context" , e ) ; }        ; } catch ( InterruptedException e ) { } finally {        ; } }<CODESPLIT>Execute one job .
public Response bind ( String name , Object model ) {           ; return this ; }<CODESPLIT>Binds an object to the response .
public byte [ ] getByteArray ( Integer offset ) { byte [ ] result = null ; if ( offset != null ) { result =       ; } return ( result ) ; }<CODESPLIT>This method retrieves a byte array containing the data at the given offset in the block . If no data is found at the given offset this method returns null .
public Object [ ] getMetaMethods ( ) { MetaClass metaClass =       ; List metaMethods =      ; Object [ ] result = new Object [      ] ; int i = 0 ; for ( Iterator iter =      ;      ; i ++ ) { MetaMethod metaMethod = ( MetaMethod )      ; result [ i ] =     ; } return result ; }<CODESPLIT>Get info about instance and class Methods that are dynamically added through Groovy .
static long [ ] parse ( String pollers ) { String [ ] periods =       ; long [ ] result = new long [ periods . length ] ; boolean errors = false ; Logger logger =         ; for ( int i = 0 ; i < periods . length ; ++ i ) { String period = periods [ i ] ; try { result [ i ] =       ; if ( result [ i ] <= 0 ) {               ; errors = true ; } } catch ( NumberFormatException e ) {                     ; errors = true ; } } if ( errors || periods . length == 0 ) {                   ; return DEFAULT_PERIODS ; } else { return result ; } }<CODESPLIT>Parse the content of the system property that describes the polling intervals and in case of errors use the default of one poller running every minute .
public void setFooter ( String key , String value ) {       ; int i = 0 ; boolean hasFooter = false ; for ( i =      - 1 ; i >= 0 ; i -- ) { String oldKey =       ; if (       ) { if ( hasFooter ) {       ;       ; } else { hasFooter = true ;         ; } } } if ( ! hasFooter ) {       ;       ; } }<CODESPLIT>Sets a footer replacing an already - existing footer
public void addAttribute ( String name , final String value ) { if ( m_elemContext . m_startTagOpen ) { final String patchedName =     ; final String localName =     ; final String uri =       ;               ; } }<CODESPLIT>Adds the given attribute to the set of collected attributes but only if there is a currently open element .
public MimeMessage createMimeMessage ( Session session ) throws MessagingException { if (     &&     ) { throw new IllegalArgumentException ( "Missing email content" ) ; } final MimeMessage msg = new MimeMessage ( session ) ;       ;           ;         ;                    ; return msg ; }<CODESPLIT>Creates a MimeMessage containing given Multipart . Subject sender and content and session will be set .
public static ForwardCurveInterpolation createForwardCurveFromMonteCarloLiborModel ( String name , LIBORModelMonteCarloSimulationModel model , double startTime ) throws CalculationException { int timeIndex =       ; ArrayList < RandomVariable > liborsAtTimeIndex = new ArrayList < > ( ) ; int firstLiborIndex =           ; double firstLiborTime =           ; if ( firstLiborTime > startTime ) {                ; } double [ ] times = new double [ firstLiborTime == startTime ? (      - firstLiborIndex ) : (      - firstLiborIndex + 1 ) ] ; times [ 0 ] = 0 ; int indexOffset = firstLiborTime == startTime ? 0 : 1 ; for ( int i = firstLiborIndex ; i <      ; i ++ ) {              ; times [ i - firstLiborIndex + indexOffset ] =           - startTime ; } RandomVariable [ ] libors =               ; return                      ; }<CODESPLIT>Create a forward curve from forwards given by a LIBORMonteCarloModel .
public ServiceCall < Void > deleteWord ( DeleteWordOptions deleteWordOptions ) {            ; String [ ] pathSegments = { "v1/customizations" , "words" } ; String [ ] pathParameters = {      ,      } ; RequestBuilder builder =                  ; Map < String , String > sdkHeaders =           ; for ( Entry < String , String > header :      ) {                 ; } return               ; }<CODESPLIT>Delete a custom word .
private boolean tryMove ( float x , float y ) { float newx = playerX + x ; float newy = playerY + y ; if (       ) { if (       ) { if (       ) { return false ; } else { playerY = newy ; return true ; } } else { playerX = newx ; return true ; } } else { playerX = newx ; playerY = newy ; return true ; } }<CODESPLIT>Try to move in the direction specified . If it s blocked try sliding . If that doesn t work just don t bother
public void recover ( ) { try {        ;        ;         ; } catch ( Exception e ) { throw new DelegatedRuntimeException ( e ) ; } }<CODESPLIT>recovers the dataRecorder all messages are removed and all the messsages of the logger are recoverd
public void clearSources ( ) { synchronized ( mAudioSources ) { for ( GVRAudioSource source : mAudioSources ) {       ; }      ; } }<CODESPLIT>Remove all of the audio sources from the audio manager . This will stop all sound from playing .
@ SuppressWarnings ( "unchecked" ) public static < V extends NumberVector > NumberVector . Factory < V > guessFactory ( SimpleTypeInformation < V > in ) { NumberVector . Factory < V > factory = null ; if ( in instanceof VectorTypeInformation ) { factory = ( NumberVector . Factory < V > )              ; } if ( factory == null ) { try { Field f =           ; factory = ( NumberVector . Factory < V > )       ; } catch ( Exception e ) {                    ; } } return factory ; }<CODESPLIT>Try to guess the appropriate factory .
public void balance ( ) { if ( !      )      ; if ( !      )      ; if ( paths == null ) paths =      ; if ( labelRootDirs == null ) labelRootDirs =      ; for ( int i = 0 ; i < numLabels ; i ++ ) {               ;                  ; } while (      ) { DataSet next =      ; if ( miniBatchSize < 0 ) miniBatchSize =      ; for ( int i = 0 ; i <      ; i ++ ) { DataSet currExample =       ; if ( !               )               ; File example = new File (           ,                    ) ;       ;                ; } } int numsSaved = 0 ; while ( !      ) { List < DataSet > miniBatch = new ArrayList < > ( ) ; while (      < miniBatchSize && !      ) { for ( int i = 0 ; i < numLabels ; i ++ ) { if (       != null && !           ) { DataSet d = new DataSet ( ) ;                 ;       ; } else       ; } } if ( !      )      ; if ( !      ) { DataSet merge =       ; if ( dataNormalization != null )       ;                     ; } } }<CODESPLIT>Generate a balanced dataset minibatch fileset .
private static boolean isunixtimeleap ( double unixTime ) { double gpsTime = unixTime - 315964800 ; gpsTime +=       - 1 ; return     ; }<CODESPLIT>Test to see if a unixtime second is a leap second
public static void setSunXMLHeaders ( final Marshaller aMarshaller , final String sXMLHeaders ) { final String sPropertyName = SUN_XML_HEADERS ;         ; }<CODESPLIT>Set the Sun specific XML header string .
private void sendKeepAliveBridgeMessage ( int appId , String bridgeId , String token , final CallStatsHttp2Client httpClient ) { long apiTS =      ; BridgeKeepAliveMessage message = new BridgeKeepAliveMessage ( bridgeId , apiTS ) ; String requestMessageString =       ;                                                                                                                                                                                                                            ; }<CODESPLIT>Send keep alive bridge message .
public StreamingOutput getResource ( final String resourceName , final long nodeId , final Map < QueryParameter , String > queryParams ) throws JaxRxException { final StreamingOutput sOutput = new StreamingOutput ( ) { public void write ( final OutputStream output ) throws IOException , JaxRxException { final String revision =         ; final String wrap =         ; final String doNodeId =         ; final boolean wrapResult = ( wrap == null ) ? false :       ; final boolean nodeid = ( doNodeId == null ) ? false :       ; final Long rev = revision == null ? null :       ;               ; } } ; return sOutput ; }<CODESPLIT>This method is responsible to deliver the whole XML resource addressed by a unique node id .
public static ManagedEntity [ ] createManagedEntities ( ServerConnection sc , ManagedObjectReference [ ] mors ) { if ( mors == null ) { return new ManagedEntity [ 0 ] ; } ManagedEntity [ ] mes = new ManagedEntity [ mors . length ] ; for ( int i = 0 ; i < mors . length ; i ++ ) { mes [ i ] =          ; } return mes ; }<CODESPLIT>Given a ServerConnection and an array of MORs return an array of MEs
public static Function < String , String > createStringTemplateSource ( I_CmsFormatterBean formatter , Supplier < CmsXmlContent > contentSupplier ) { return key -> { String result = null ; if ( formatter != null ) { result =           ; } if ( result == null ) { CmsXmlContent content =      ; if ( content != null ) { result =           ; } } return result ; } ; }<CODESPLIT>Helper method to create a string template source for a given formatter and content .
private static final ByteBuffer createReadWriteMessage ( final byte opCode , final int logicalBlockAddress , final short transferLength ) { ByteBuffer cdb =       ;       ;       ;       ;       ;       ;      ; return cdb ; }<CODESPLIT>Creates the Command Descriptor Block for a given Operation Message .
public long read ( ByteBuffer [ ] dsts , int offset , int length ) throws IOException { long rc =    ; if ( rc <= 0 ) { return rc ; } return             ; }<CODESPLIT>Reads ByteBuffer from peer . Starts handshaking if needed .
public static void setInt ( MemorySegment [ ] segments , int offset , int value ) { if (         ) {            ; } else {         ; } }<CODESPLIT>set int from segments .
public Optional < User > getOptionalUser ( String username ) { try { return (          ) ; } catch ( GitLabApiException glae ) { return (       ) ; } }<CODESPLIT>Lookup a user by username and return an Optional instance .
protected void registerRateLimiterComponent ( ) { String componentPropName = GatewayConfigProperties . COMPONENT_PREFIX +        ;             ;         ;         ;         ;         ;         ;         ; }<CODESPLIT>The rate limiter component .
public Point3d getCoordinatesFromGridPoint ( int gridPoint ) { int dimCounter = 0 ; Point3d point = new Point3d ( 0 , 0 , 0 ) ; for ( int z = 0 ; z < grid [ 0 ] [ 0 ] . length ; z ++ ) { for ( int y = 0 ; y < grid [ 0 ] . length ; y ++ ) { for ( int x = 0 ; x < grid . length ; x ++ ) { if ( dimCounter == gridPoint ) { point . x = minx + latticeConstant * x ; point . y = miny + latticeConstant * y ; point . z = minz + latticeConstant * z ; return point ; } dimCounter ++ ; } } } return point ; }<CODESPLIT>Method calculates coordinates from a given grid array position .
public void setColor ( final Color COLOR ) { if ( null == color ) { _color = COLOR ; } else {       ; } }<CODESPLIT>Defines the color that will be used to colorize the section in a clock .
public void releaseEvent ( EventId eventId ) throws Exception { Lockable < V > eventWrapper =       ; if ( eventWrapper != null ) { if (      ) {       ; } else {         ; } } }<CODESPLIT>Decreases the reference counter for the given event so that it can be removed once the reference counter reaches 0 .
public String toSql ( boolean showParameters ) { String sql ; if ( forPaginator ) { sql =                     ; } else { sql = fullQuery != null ? fullQuery :                         ; } if ( showParameters ) { StringBuilder sb =              ;          ; sql =      ; } return sql ; }<CODESPLIT>Use to see what SQL will be sent to the database .
private Source getSourceFromUriResolver ( StylesheetHandler handler ) throws TransformerException { Source s = null ; TransformerFactoryImpl processor =      ; URIResolver uriresolver =      ; if ( uriresolver != null ) { String href =    ; String base =      ; s =         ; } return s ; }<CODESPLIT>Get the Source object for the included or imported stylesheet module obtained from the user s URIResolver if there is no user provided URIResolver null is returned .
public String getTitle ( ) { if ( Journal_Type . featOkTst && ( ( Journal_Type ) jcasType ) . casFeat_title == null )           ; return                  ; }<CODESPLIT>getter for title - gets Full journal title C
public static Val of ( Object o ) { if ( o != null && o instanceof Val ) { return       ; } return new Val ( o ) ; }<CODESPLIT>Convenience method for creating a Convertible Object
protected void addContextTerms ( SparseDoubleVector meaning , Queue < String > words , int distance ) { for ( String term : words ) { if ( !         ) { int dimension =       ; if ( dimension == - 1 ) continue ;                ; ++ distance ; } } }<CODESPLIT>Adds a feature for each word in the context that has a valid dimension . Feature are scored based on the context word s distance from the focus word .
public ArrayList < View > getViews ( ) { try { if ( config . commandLogging ) {           ; } return         ; } catch ( Exception e ) {      ; return null ; } }<CODESPLIT>Returns an ArrayList of all the View objects located in the focused Activity or Dialog .
private < E extends WeightedEdge > SparseDoubleVector getVertexWeightVector ( WeightedGraph < E > g , int vertex ) { if ( keepWeightVectors ) { SparseDoubleVector weightVec =       ; if ( weightVec == null ) { synchronized ( this ) { weightVec =       ; if ( weightVec == null ) { weightVec =       ;         ; } } } return weightVec ; } else return       ; }<CODESPLIT>Returns the normalized weight vector for the specified row to be used in edge comparisons . The weight vector is normalized by the number of edges from the row with positive weights and includes a weight for the row to itself which reflects the similarity of the keystone nod .
static int fillRows ( Row [ ] rows , TypeDescription schema , VectorizedRowBatch batch , int [ ] selectedFields ) { int rowsToRead =                  ; List < TypeDescription > fieldTypes =      ; for ( int fieldIdx = 0 ; fieldIdx < selectedFields . length ; fieldIdx ++ ) { int orcIdx = selectedFields [ fieldIdx ] ;                       ; } return rowsToRead ; }<CODESPLIT>Fills an ORC batch into an array of Row .
public List < ICalProperty > getProperties ( T component ) { return new ArrayList < ICalProperty > (          ) ; }<CODESPLIT>Gets the properties to marshal . Child classes can override this for better control over which properties are marshalled .
public static double computeTauAndDivide ( final int j , final int numRows , final double [ ] u , final double max ) { double tau = 0 ; for ( int i = j ; i < numRows ; i ++ ) { double d = u [ i ] /= max ; tau += d * d ; } tau =       ; if ( u [ j ] < 0 ) tau = - tau ; return tau ; }<CODESPLIT>Normalizes elements in u by dividing by max and computes the norm2 of the normalized array u . Adjust the sign of the returned value depending on the size of the first element in u . Normalization is done to avoid overflow .
public Epic getEpic ( String epicKey , Map < String , Epic > epicMap ) { try { String url =      + (           ? "" : "/" ) +         ; ResponseEntity < String > responseEntity =     ; String responseBody =      ; JSONObject issue = ( JSONObject )       ; if ( issue == null ) { return null ; } return         ; } catch ( ParseException pe ) {             ; } catch ( HygieiaException e ) {             ; } return null ; }<CODESPLIT>Get Epic using Jira API
public Serializable getLayoutConstraints ( final WComponent child ) { PanelModel model =    ; if ( model . layoutConstraints != null ) { return         ; } return null ; }<CODESPLIT>Retrieves the layout constraints for the given component if they have been set .
public Map < String , Set < String > > getReverseMap ( ) { Set < Map . Entry < String , Set < String > > > entries =      ; Map < String , Set < String > > rMap = new HashMap < String , Set < String > > (      ) ; for ( Map . Entry < String , Set < String > > me : entries ) { String k =      ; Set < String > transList =      ; for ( String trans : transList ) { Set < String > entry =       ; if ( entry == null ) { Set < String > toAdd = new LinkedHashSet < String > ( 6 ) ;       ;         ; } else {       ; } } } return rMap ; }<CODESPLIT>Returns a reversed map of the current map .
public Credential setRefreshToken ( String refreshToken ) {      ; try { if ( refreshToken != null ) {                                   ; } this . refreshToken = refreshToken ; } finally {      ; } return this ; }<CODESPLIT>Sets the refresh token .
public void makeCurrent ( EGLSurface eglSurface ) { if ( mEGLDisplay == EGL14 . EGL_NO_DISPLAY ) {            ; } if ( !             ) { throw new RuntimeException ( "eglMakeCurrent failed" ) ; } }<CODESPLIT>Makes our EGL context current using the supplied surface for both draw and read .
public static < T > T navigateSafe ( final T defaultValue , final Object source , final Object ... paths ) { return         ; }<CODESPLIT>Use navigateOrDefault which is a much better name .
public void clearCache ( CommerceWarehouseItem commerceWarehouseItem ) {                   ;       ;       ;          ; }<CODESPLIT>Clears the cache for the commerce warehouse item .
private void process ( String input , String output ) throws MPXJException , IOException { MPPReader reader = new MPPReader ( ) ; m_project =       ; String varDataFileName ; String projectDirName ; int mppFileType =               ; switch ( mppFileType ) { case 8 : { projectDirName = " 1" ; varDataFileName = "FixDeferFix 0" ; break ; } case 9 : { projectDirName = " 19" ; varDataFileName = "Var2Data" ; break ; } case 12 : { projectDirName = " 112" ; varDataFileName = "Var2Data" ; break ; } case 14 : { projectDirName = " 114" ; varDataFileName = "Var2Data" ; break ; } default : { throw new IllegalArgumentException ( "Unsupported file type " + mppFileType ) ; } } FileInputStream is = new FileInputStream ( input ) ; POIFSFileSystem fs = new POIFSFileSystem ( is ) ;      ; DirectoryEntry root =      ; m_projectDir = ( DirectoryEntry )       ; Map < String , String > replacements = new HashMap < String , String > ( ) ; for ( Task task :      ) {           ; }                     ;      ; for ( Resource resource :      ) {           ;           ; }                   ;      ; ProjectProperties properties =      ;           ;           ;      ;           ;           ;           ;           ;           ;           ;      ;           ;           ;           ;           ; FileOutputStream os = new FileOutputStream ( output ) ;       ;      ;      ;      ; }<CODESPLIT>Process an MPP file to make it anonymous .
public void setRollbackOnly ( ) { final boolean isTraceOn =      ; if ( isTraceOn &&      ) {           ; } LocalTransactionCoordinator lCoord =    ; if ( lCoord != null ) {      ; } else { try {      ; } catch ( Exception e ) {               ; throw new IllegalStateException ( "No active transaction" ) ; } } if ( isTraceOn &&      ) {         ; } }<CODESPLIT>Marks the current local or global transaction to be rolled back
private static boolean analyse404Response ( final String content ) { if (       ) { return true ; }               ; return false ; }<CODESPLIT>Analyses the content of a 404 response to see if it is legible for retry .
private ListenableFuture < ? > writeBlocksToTargets ( Collection < DBBPool . BBContainer > outputBuffers , int [ ] serialized ) {               ;               ; final List < ListenableFuture < ? > > writeFutures = new ArrayList < ListenableFuture < ? > > (      ) ; Iterator < DBBPool . BBContainer > containerIter =      ; int serializedIndex = 0 ; for ( SnapshotTableTask task : m_tableTasks ) { final DBBPool . BBContainer container =      ; final ByteBuffer buf =      ;                   ;       ; Callable < DBBPool . BBContainer > valueForTarget =       ; if ( task . m_filters != null ) { for ( SnapshotDataFilter filter : task . m_filters ) { valueForTarget =       ; } } ListenableFuture < ? > writeFuture =           ; if ( writeFuture != null ) {       ; } } return       ; }<CODESPLIT>Finalize the output buffers and write them to the corresponding data targets
private boolean isTerminal ( IAtom atom , Map < IAtom , Integer > atomToIndex ) { return graph [       ] . length == 1 ; }<CODESPLIT>Is the atom terminal having only one connection .
private Handler < AsyncResult < Void > > createUndeployHandler ( final Message < JsonObject > message ) { return new Handler < AsyncResult < Void > > ( ) { public void handle ( AsyncResult < Void > result ) { if (      ) {                                ; } else {                 ; } } } ; }<CODESPLIT>Creates a platform undeploy handler .
public PhotoAllContext getAllContexts ( String photoId ) throws FlickrException { PhotoSetList < PhotoSet > setList = new PhotoSetList < PhotoSet > ( ) ; PoolList < Pool > poolList = new PoolList < Pool > ( ) ; PhotoAllContext allContext = new PhotoAllContext ( ) ; Map < String , Object > parameters = new HashMap < String , Object > ( ) ;         ;         ; Response response =                 ; if (      ) { throw new FlickrException (      ,      ) ; } Collection < Element > photosElement =      ; for ( Element setElement : photosElement ) { if (           ) { PhotoSet pset = new PhotoSet ( ) ;            ;            ;            ;            ;            ;            ;                 ;                 ;                 ;                 ;       ;       ; } else if (           ) { Pool pool = new Pool ( ) ;            ;            ;            ;            ;            ;                 ;                 ;       ;       ; } } return allContext ; }<CODESPLIT>Returns all visble sets and pools the photo belongs to .
public Map < String , Object > getFieldData ( Map < String , Object > properties ) { Map < String , Object > propReturn = null ; if ( properties != null ) { propReturn = new Hashtable < String , Object > ( ) ; for ( int i = 1 ; ; i ++ ) { String strFieldNumber = DBParams . FIELD +       ; String strFieldName = ( String )       ; if ( strFieldName == null ) break ; Record record =      ; if (       != - 1 ) { record =                   ; strFieldName =              ; } BaseField field = null ; if ( record != null ) field =       ; if ( field != null )             ; } } return propReturn ; }<CODESPLIT>GetFieldData Method .
protected void connect ( InetAddress address , int port ) throws SocketException {          ;       ; connectedAddress = address ; connectedPort = port ; connected = true ; }<CODESPLIT>Connects a datagram socket to a remote destination . This associates the remote address with the local socket so that datagrams may only be sent to this destination and received from this destination .
private char getEscaped ( ) { pos ++ ; if ( pos == length ) { throw new IllegalStateException ( "Unexpected end of DN: " + dn ) ; } switch ( chars [ pos ] ) { case '"' : case '\\' : case ',' : case '=' : case '+' : case '<' : case '>' : case '#' : case ';' : case ' ' : case '*' : case '%' : case '_' : return chars [ pos ] ; default : return    ; } }<CODESPLIT>returns escaped char
private static String cutOffValidationMatchersPrefix ( String expression ) { if (         &&         ) { return                           ; } return expression ; }<CODESPLIT>Cut off validation matchers prefix and suffix .
public SortedSet < TypeElement > implementingClasses ( TypeElement typeElement ) { SortedSet < TypeElement > result =       ; SortedSet < TypeElement > intfcs =       ; Iterator < TypeElement > subInterfacesIter =      ; while (      ) { Iterator < TypeElement > implementingClassesIter =             ; while (      ) { TypeElement c =      ; if ( !       ) {       ; } } } return result ; }<CODESPLIT>Return the set of classes which implement the interface passed .
public void add ( ValidationResult validation ) { correct &= validation . correct ; if ( ! validate ) return ;         ;         ; }<CODESPLIT>Adds a validation result to this .
public static String toMetaFieldInfoString ( Object obj ) { StringBuffer buf = new StringBuffer ( 100 ) ; MetaFieldInfo [ ] fields =         ; for ( int i = 0 ; i < fields . length ; i ++ ) { MetaFieldInfo field = fields [ i ] ;         ;       ; if ( field . actualValue != null &&               ) {       ;         ;       ; } else {         ; } if ( i + 1 < fields . length )       ; } return      ; }<CODESPLIT>Creates a string for an object based on the MetaField annotations .
public String getArrayClassName ( Class < ? > clazz ) { if (      ) { return         + "[]" ; } return      ; }<CODESPLIT>Formats the class name with trailing square brackets .
synchronized void addBlock ( Block block ) { if ( !    ) { return ; } BlockScanInfo info =       ; if ( info != null ) {              ;     ; } info = new BlockScanInfo ( block ) ; info . lastScanTime =    ;     ;    ; }<CODESPLIT>Adds block to list of blocks
public String getTile ( int x , int y ) { if ( ( x >    ) || ( y >    ) || ( x < 0 ) || ( y < 0 ) ) { throw new IllegalArgumentException ( ) ; } return image [ x ] [ y ] ; }<CODESPLIT>Gets a tile of the XPM Image .
public JBBPDslBuilder BitArray ( final String name , final String bitLenExpression , final String sizeExpression ) { final Item item = new Item ( BinType . BIT_ARRAY , name , this . byteOrder ) ; item . bitLenExpression =     ; item . sizeExpression =     ;       ; return this ; }<CODESPLIT>Add named bit array where each bit length is calculated through expression .
public static Object indexOf ( String strPattern , String strInput , int offset , boolean caseSensitive , boolean matchAll ) throws MalformedPatternException { PatternMatcherInput input = new PatternMatcherInput ( strInput ) ; Perl5Matcher matcher = new Perl5Matcher ( ) ; int compileOptions = caseSensitive ? 0 : Perl5Compiler . CASE_INSENSITIVE_MASK ; compileOptions += Perl5Compiler . SINGLELINE_MASK ; if ( offset < 1 ) offset = 1 ; Pattern pattern =       ; if ( offset <=      )         ; if ( offset <=      ) { Array matches = new ArrayImpl ( ) ; while (         ) { int match =           + 1 ; if ( ! matchAll ) { return new Double ( match ) ; }       ; } if (      != 0 ) { return matches ; } } return 0 ; }<CODESPLIT>return index of the first occurence of the pattern in input text
private Object checkRegisteredServicesByLdapFilter ( String filter ) throws InvalidSyntaxException { ServiceReference < ? > [ ] references =              ; if (     ) { return null ; } if ( references . length == 1 ) { return            ; } throw new RuntimeException ( "Too many services registered for filter: " + filter ) ; }<CODESPLIT>Checks the OSGi ServiceRegistry if a service matching the given filter is present .
public void postEvent ( DEvent event ) { if ( _tevent != null ) {       ; } else if ( _omgr != null ) {       ; } else {                                   ; } }<CODESPLIT>Posts the specified event either to our dobject manager or to the compound event for which we are currently transacting .
public static Identity createOverlayManagerGroup ( String name ) { return                 ; }<CODESPLIT>Create a overlay - manager - group identifier that is an extended identity identifier .
public static DoubleMatrix cholesky ( DoubleMatrix A ) { DoubleMatrix result =      ; int info =                     ; if ( info < 0 ) { throw new LapackArgumentException ( "DPOTRF" , - info ) ; } else if ( info > 0 ) { throw new LapackPositivityException ( "DPOTRF" , "Minor " + info + " was negative. Matrix must be positive definite." ) ; }     ; return result ; }<CODESPLIT>Compute Cholesky decomposition of A
public static boolean isCaller ( final String className , final String methodName ) { final Throwable throwable = new Throwable ( ) ; final StackTraceElement [ ] stackElements =      ; if ( null == stackElements ) {             ; return false ; } final boolean matchAllMethod =       ; for ( int i = 1 ; i < stackElements . length ; i ++ ) { if (              ) { return matchAllMethod ? true :              ; } } return false ; }<CODESPLIT>Checks the current method is whether invoked by a caller specified by the given class name and method name .
public InputStream setFlag ( String name , String value ) throws IOException { return         ; }<CODESPLIT>set JVM command line flag
public Q addFlag ( Position position , String prefix , Expression < ? > expr ) { Expression < ? > flag =                 ; return             ; }<CODESPLIT>Add the given prefix and expression as a general query flag
static ConnectionInfo newConnectionInfo ( Channel c ) { SocketChannel channel = ( SocketChannel ) c ; InetSocketAddress hostAddress =      ; InetSocketAddress remoteAddress =     ; String scheme =             != null ? "https" : "http" ; return new ConnectionInfo ( hostAddress , remoteAddress , scheme ) ; }<CODESPLIT>Retrieve the connection information from the current connection directly
public PDPDomain getPDPDomain ( String pdpDomainName ) throws IOException { SortedSet < String > domainRanges = null ; if ( serializedCache != null ) { if (       ) { domainRanges =       ; } } boolean shouldRequestDomainRanges =     ; try { if ( shouldRequestDomainRanges ) { URL u = new URL ( server + "getPDPDomain?pdpId=" + pdpDomainName ) ;          ; InputStream response =       ; String xml =       ; domainRanges =       ; if ( domainRanges != null )       ; } } catch ( MalformedURLException e ) {                 ; throw new IllegalArgumentException ( "Invalid PDP name: " + pdpDomainName , e ) ; } String pdbId = null ; List < ResidueRange > ranges = new ArrayList < ResidueRange > ( ) ; for ( String domainRange : domainRanges ) { SubstructureIdentifier strucId = new SubstructureIdentifier ( domainRange ) ; if ( pdbId == null ) { pdbId =      ; } else if ( !           ) { throw new RuntimeException ( "Don't know how to take the union of domains from multiple PDB IDs." ) ; }           ; } return new PDPDomain ( pdpDomainName , ranges ) ; }<CODESPLIT>Get a StructureIdentifier representing the specified PDP domain .
public Context getContext ( ) { if ( searchView != null ) { return      ; } else if ( supportView != null ) { return      ; } throw new IllegalStateException ( ERROR_NO_SEARCHVIEW ) ; }<CODESPLIT>Returns the context the view is running in through which it can access the current theme resources etc .
private boolean isMacroCycle ( IRing ring , IRingSet rs ) { if (      < 8 ) return false ; for ( IBond bond :      ) { boolean found = false ; for ( IAtomContainer other :      ) { if ( ring == other ) continue ; if (       ) { found = true ; break ; } } if ( ! found ) return true ; } return false ; }<CODESPLIT>Check if a ring in a ring set is a macro cycle . We define this as a ring with > = 10 atom and has at least one bond that isn t contained in any other rings .
public < T > T datastoreToJava ( Entity entity ) { try { if ( entity == null ) { return null ; } T result = ( T )      ;       ; return result ; } catch ( InstantiationException e ) { throw new RuntimeException ( e ) ; } catch ( IllegalAccessException e ) { throw new RuntimeException ( e ) ; } }<CODESPLIT>Convert a value from Google representation to a Java value
private void updateCacheState ( Map < String , Object > props ) {     ; if ( cacheEnabled ) {       ; } else {       ; } }<CODESPLIT>Based on the configuration properties the auth cache should either be active or not .
public static QuerySnapshot withChanges ( final Query query , Timestamp readTime , final DocumentSet documentSet , final List < DocumentChange > documentChanges ) { return new QuerySnapshot ( query , readTime ) { volatile List < QueryDocumentSnapshot > documents ; public List < QueryDocumentSnapshot > getDocuments ( ) { if ( documents == null ) { synchronized ( documentSet ) { if ( documents == null ) { documents =      ; } } } return       ; } public List < DocumentChange > getDocumentChanges ( ) { return       ; } public int size ( ) { return      ; } public boolean equals ( Object o ) { if ( this == o ) { return true ; } if ( o == null ||    !=      ) { return false ; } QuerySnapshot that = ( QuerySnapshot ) o ; return           &&                 &&                 &&                 ; } public int hashCode ( ) { return                   ; } } ; }<CODESPLIT>Creates a new QuerySnapshot representing a snapshot of a Query with changed documents .
private boolean readSend ( InH3 hIn , OutboxAmp outbox , HeadersAmp headers ) throws IOException { MethodRefHamp methodHamp = null ; try { methodHamp =     ; } catch ( Throwable e ) {                 ;     ; return true ; } MethodRefAmp method =      ; ClassLoader loader =      ; Thread thread =      ;       ; Object [ ] args =       ; if (       ) {                                    ; } SendMessage_N sendMessage = new SendMessage_N ( outbox , headers ,      ,      , args ) ; long timeout = 1000L ; try {       ; } catch ( Throwable e ) {           ; if (         ) {                 ; } } return true ; }<CODESPLIT>The send message is a on - way call to a service .
private String getRemoteFileName ( UploadFile file ) { if (            ) { return       ; } if (            ) { String [ ] tmp =            ; return tmp [ tmp . length - 1 ] ; } return       ; }<CODESPLIT>Checks if the remote file path contains also the remote file name . If it s not specified the name of the local file will be used .
public void initializeBufferMetrics ( Task task ) { final MetricGroup buffers =     ;             ;             ;             ;             ; }<CODESPLIT>Initialize Buffer Metrics for a task .
public void doubleClick ( String fileName ) throws QTasteException { try {             ; } catch ( Exception ex ) { throw new QTasteException (      , ex ) ; } }<CODESPLIT>Simulates a double click on the specified image of the area .
public void setDestinationSSECustomerKey ( SSECustomerKey sseKey ) { if ( sseKey != null && this . sseAwsKeyManagementParams != null ) { throw new IllegalArgumentException ( "Either SSECustomerKey or SSEAwsKeyManagementParams must not be set at the same time." ) ; } this . destinationSSECustomerKey = sseKey ; }<CODESPLIT>Sets the optional customer - provided server - side encryption key to use to encrypt the destination object being copied .
public void onFailure ( Throwable t ) {                   ; }<CODESPLIT>show any error messages posted to the bus .
private void paintDropLines ( SeaGlassContext context , Graphics g ) { JTable . DropLocation loc =      ; if ( loc == null ) { return ; } Color color = ( Color )         ; Color shortColor = ( Color )         ; if ( color == null && shortColor == null ) { return ; } Rectangle rect ; rect =     ; if ( rect != null ) { int x = rect . x ; int w = rect . width ; if ( color != null ) {       ;       ;                     ; } if ( !      && shortColor != null ) {       ;                 ; } } rect =     ; if ( rect != null ) { int y = rect . y ; int h = rect . height ; if ( color != null ) {       ;       ;                     ; } if ( !      && shortColor != null ) {       ;                 ; } } }<CODESPLIT>Paint the drop lines if any .
public DatalogProgram createDatalog ( SWRLRule rule ) {       ; if ( notSupported ) {             ;      ; } DatalogProgram dp =      ;       ; return dp ; }<CODESPLIT>Translate the swrl_rule Return a datalog program containing the supported datalog facts
protected String inflateAuthnRequest ( final byte [ ] decodedBytes ) { val inflated =       ; if ( !       ) { return inflated ; } return       ; }<CODESPLIT>Inflate authn request string .
public static FrameworkProjectConfig create ( final String name , final File propertyFile , final Properties properties , final IFilesystemFramework filesystemFramework ) { if ( !      ) {             ; } return         ; }<CODESPLIT>Create and generate file with the given properties if not null
static synchronized void clearLogContext ( ) { final LogContext embeddedLogContext = Holder . LOG_CONTEXT ; final Configurator configurator =              ; if ( configurator instanceof PropertyConfigurator ) { final LogContextConfiguration logContextConfiguration =           ;     ; } else if ( configurator instanceof LogContextConfiguration ) {        ; } else { final List < String > loggerNames =           ; for ( String name : loggerNames ) { final Logger logger =       ; if ( logger != null ) { final Handler [ ] handlers =      ; if ( handlers != null ) { for ( Handler handler : handlers ) {      ; } }       ;       ;       ;         ; } } } }<CODESPLIT>Attempts to clear the global log context used for embedded servers .
public RestApiResponse execute ( long timeout , TimeUnit timeUnit ) { return               ; }<CODESPLIT>Executes the API request in a synchronous fashion using the given timeout .
public InputStream getInputStream ( HttpServletRequest request , MutableObject < byte [ ] > sourceMapResult ) throws IOException { byte [ ] bytes = this . bytes ; byte [ ] sourceMap = this . sourceMap ; String filename = this . filename ; InputStream result = null ; if ( bytes != null ) { result = new ByteArrayInputStream ( bytes ) ; if ( sourceMapResult != null && sourceMapSize > 0 ) {       ; } } else if ( filename != null ) { ICacheManager cmgr =                  ; File file = new File (      , filename ) ; if ( sourceMapSize == 0 ) { result = new FileInputStream ( file ) ; } else { CacheData data ; ObjectInputStream is = new ObjectInputStream ( new FileInputStream ( file ) ) ; try { data = ( CacheData )      ; } catch ( ClassNotFoundException e ) { throw new IOException (      , e ) ; } finally {       ; } bytes = data . bytes ; sourceMap = data . sourceMap ; if ( sourceMapResult != null ) {       ; } result = new ByteArrayInputStream ( bytes ) ; } } else { throw new IOException ( ) ; } return result ; }<CODESPLIT>Return an input stream to the layer . Has side effect of setting the appropriate Content - Type Content - Length and Content - Encoding headers in the response .
public void cacheIncludeAndIgnore ( WebElement table ) { if (    == null ) {           ; for ( By by :    ) {              ; } } if (    == null ) {           ; for ( By by :    ) {              ; } } }<CODESPLIT>Does the table comparison
public < E > List < InlineDiffChunk < E > > inline ( List < E > previous , List < E > next ) {     ; try { return                    ; } catch ( DiffException e ) {     ; return null ; } }<CODESPLIT>Builds an in - line diff between two versions of a list of elements .
public static CompletableFuture < MessageSet > getMessagesAroundUntil ( TextChannel channel , Predicate < Message > condition , long around ) { CompletableFuture < MessageSet > future = new CompletableFuture < > ( ) ;                                                                                                             ; return future ; }<CODESPLIT>Gets messages in the given channel around a given message in any channel until one that meets the given condition is found . If no message matches the condition an empty set is returned . The given message will be part of the result in addition to the messages around if it was sent in the given channel and is matched against the condition and will abort retrieval . Half of the messages will be older than the given message and half of the messages will be newer . If there aren t enough older or newer messages the halves will not be same - sized . It s also not guaranteed to be perfectly balanced .
public static boolean findSipApplicationAnnotation ( InputStream stream ) { try { byte [ ] rawClassBytes ; rawClassBytes = new byte [      ] ;       ; boolean one =       ; boolean two =       ; if ( one && two ) return true ; } catch ( Exception e ) { } return false ; }<CODESPLIT>Determine if this stream contains SipApplication annotations
protected Map < String , Object > buildJobDataMap ( final JmxCommand jmxCommand , final Object [ ] params ) throws MBeanException { final Map < String , Object > jobDataMap = new HashMap < String , Object > ( ) ; try { int ind = 0 ; for ( JmxOption option :      ) {                  ; } for ( Argument arg :        ) {                ; } } catch ( Exception e ) { throw new MBeanException ( e ) ; } return jobDataMap ; }<CODESPLIT>Initialize the JobDataMap with the Program arguments
private void V ( StringBuilder buf ) { Token t =    ; if ( t . tokenType != TokenType . VALUE ) { throw new IllegalStateException ( "Unexpected token " + t ) ; }           ; t =    ; if ( t . tokenType == TokenType . EOL ) { return ; } else if ( t . tokenType == TokenType . TRAILING_BACKSLASH ) {     ; } }<CODESPLIT>Vopt = EOL V
public void addHeader ( final String sName , final String sValue ) { if ( sValue != null )       ; }<CODESPLIT>Add the passed header as is .
public static < N extends Number > Number max ( List < N > numberList ) { return         ; }<CODESPLIT>Max number .
public int getChaincodeActionResponseStatus ( ) throws InvalidArgumentException { if ( statusReturnCode != - 1 ) { return statusReturnCode ; } try { final ProposalResponsePayloadDeserializer proposalResponsePayloadDeserializer =    ; statusReturnCode =          ; return statusReturnCode ; } catch ( InvalidArgumentException e ) { throw e ; } catch ( Exception e ) { throw new InvalidArgumentException ( e ) ; } }<CODESPLIT>getChaincodeActionResponseStatus returns the what chaincode executions set as the return status .
public void generate ( Queue < Pair < Env < AttrContext > , JCClassDecl > > queue ) {       ; }<CODESPLIT>Generates the source or class file for a list of classes . The decision to generate a source file or a class file is based upon the compiler s options . Generation stops if an error occurs while writing files .
public static EnhancedMimeType create ( final String primary , final String sub , final Charset encoding , final String version , final Map < String , String > parameters ) { try { return new EnhancedMimeType ( primary , sub , encoding , version , parameters ) ; } catch ( final MimeTypeParseException ex ) { throw new RuntimeException ( "Failed to create versioned mime type: " + primary + "/" + sub , ex ) ; } }<CODESPLIT>Creates an instance with all data and exceptions wrapped to runtime exceptions .
public static long toLongWithDefault ( Object value , long defaultValue ) { Long result =     ; return result != null ? ( long ) result : defaultValue ; }<CODESPLIT>Converts value into integer or returns default when conversion is not possible .
public void setIsolation ( String iso ) throws JspTagException { if (       ) { isolation = Connection . TRANSACTION_READ_COMMITTED ; } else if (       ) { isolation = Connection . TRANSACTION_READ_UNCOMMITTED ; } else if (       ) { isolation = Connection . TRANSACTION_REPEATABLE_READ ; } else if (       ) { isolation = Connection . TRANSACTION_SERIALIZABLE ; } else { throw new JspTagException (       ) ; } }<CODESPLIT>Setter method for the transaction isolation level .
public void traverse ( Node root ) { try {     ; curNode = root ;     ;       ;    ; } catch ( Error | Exception unexpectedException ) {     ; } }<CODESPLIT>Traverses a parse tree recursively .
public CollectionRequest < Tag > findByWorkspace ( String workspace ) { String path =         ; return new CollectionRequest < Tag > ( this , Tag . class , path , "GET" ) ; }<CODESPLIT>Returns the compact tag records for all tags in the workspace .
public Rule CriteriaOnlyFindQuery ( ) { return                                         ; }<CODESPLIT>A find query only given as criterion . Leave it to MongoDB s own parser to handle it .
private E unlinkLast ( Node < E > l ) { final E element = l . item ; final Node < E > prev = l . prev ; l . item = null ; l . prev = null ; last = prev ; if ( prev == null ) first = null ; else prev . next = null ; size -- ; modCount ++ ; return element ; }<CODESPLIT>Unlinks non - null last node l .
private static void setupSimpleSecurityProperties ( Hashtable < String , Object > env , String userDn , char [ ] pwd ) {           ;           ;               ; }<CODESPLIT>Sets the environment properties needed for a simple username + password authenticated jndi connection .
public Team createTeam ( String name , String tag ) { return             ; }<CODESPLIT>Create a new ranked team with the specified name and tag
private static void checkFilePattern ( String s ) throws ProblemException { Pattern p = null ; if ( File . separatorChar == '\\' ) { p =       ; } else if ( File . separatorChar == '/' ) { p =       ; } else { throw new ProblemException ( "This platform uses the unsupported " + File . separatorChar + " as file separator character. Please add support for it!" ) ; } Matcher m =       ; if ( !      ) { throw new ProblemException ( "The string \"" + s + "\" is not a proper file name." ) ; } }<CODESPLIT>Verify that a source file name is valid .
public void close ( ) throws Exception { for ( Entry < TransactionType , ShardingTransactionManager > entry :      ) {          ; } }<CODESPLIT>Close sharding transaction managers .
protected static String getBar ( long percentage ) { StringBuilder sb = new StringBuilder ( ) ;       ;        ; for ( int i = 0 ; i < 100 ; i ++ ) { if ( percentage == 100 || i < percentage - 1 ) {       ; } else if ( i == percentage - 1 ) {       ; } else {        ; } }        ; return      ; }<CODESPLIT>Generates the progress bar for the given percentage
private void resolve ( T element , List < T > result ) { Set < T > dependencies =       ; if ( dependencies != null ) { for ( T dependency : dependencies ) {       ; }       ;       ; } }<CODESPLIT>Resolves an element .
public B camundaOut ( String source , String target ) { CamundaOut param =         ;       ;       ;     ; return myself ; }<CODESPLIT>Sets a camunda out parameter to pass a variable from a sub process instance to the super process instance
Node createArgumentsReference ( ) { Node result =       ; if (    ) {           ; } return result ; }<CODESPLIT>Creates a reference to arguments with the type specified in externs or unknown if the externs for it weren t included .
public Date toDate ( String dateString ) { Date date = null ; DateFormat df = new SimpleDateFormat ( "yyyy-MM-dd" ) ; try { date =       ; } catch ( ParseException ex ) {             ; } return date ; }<CODESPLIT>Takes a String and converts it to a Date
public static int cusolverRfSetNumericProperties ( cusolverRfHandle handle , double zero , double boost ) { return            ; }<CODESPLIT>CUSOLVERRF set and get numeric properties
public static Object quoteIfString ( Object obj ) { return obj instanceof String ?        : obj ; }<CODESPLIT>Turn the given Object into a String with single quotes if it is a String ; keeping the Object as - is else .
public Deferred < Object > deleteUidAsync ( final String type , final String name ) { final UniqueIdType uid_type =       ; switch ( uid_type ) { case METRIC : return       ; case TAGK : return       ; case TAGV : return       ; default : throw new IllegalArgumentException ( "Unrecognized UID type: " + uid_type ) ; } }<CODESPLIT>Attempts to delete the given UID name mapping from the storage table as well as the local cache .
public boolean scrollDownList ( int index ) { if ( config . commandLogging ) {               ; } return                      ; }<CODESPLIT>Scrolls down a ListView matching the specified index .
protected void makeAnnotationTypeElementDoc ( MethodSymbol meth , TreePath treePath ) { AnnotationTypeElementDocImpl result = ( AnnotationTypeElementDocImpl )       ; if ( result != null ) { if ( treePath != null )       ; } else { result = new AnnotationTypeElementDocImpl ( this , meth , treePath ) ;         ; } }<CODESPLIT>Create the AnnotationTypeElementDoc for a MethodSymbol . Should be called only on symbols representing annotation type elements .
public Object call ( String method , Object ... arguments ) throws PickleException , PyroException , IOException { return             ; }<CODESPLIT>Call a method on the remote Pyro object this proxy is for .
public static String formatAsPercentage ( int value , int total ) { float average = total == 0 ? 0 : 1F * value / total ; return       ; }<CODESPLIT>Returns value converted to percentage format .
public static < T extends Geometry > JTSGeometryExpression < T > translate ( Expression < T > expr , float deltax , float deltay ) { return                             ; }<CODESPLIT>Translates the geometry to a new location using the numeric parameters as offsets .
private static byte [ ] requestWebContent ( String url ) throws TVRageException { try { HttpGet httpGet = new HttpGet ( url ) ;         ; final DigestedResponse response =           ; if (      >= 500 ) { throw new TVRageException ( ApiExceptionType . HTTP_503_ERROR , url ) ; } else if (      >= 300 ) { throw new TVRageException ( ApiExceptionType . HTTP_404_ERROR , url ) ; } return           ; } catch ( IOException ex ) { throw new TVRageException ( ApiExceptionType . MAPPING_FAILED , UNABLE_TO_PARSE , url , ex ) ; } }<CODESPLIT>Get content from URL in byte array
private static boolean isNumeric ( String value ) { for ( char c :      ) { if ( !       ) { return false ; } } return true ; }<CODESPLIT>Returns a boolean indicating whether the given string value is numeric .
@ RequestMapping ( method = GET , value = "/foo" ) public Map < String , String > getFoo ( ) { final Map < String , String > fooObj = new HashMap < > ( ) ;         ; return fooObj ; }<CODESPLIT>Controller to just support pinging .
protected static void fireArrayStartEvent ( JsonConfig jsonConfig ) { if (      ) { for ( Iterator listeners =          ;      ; ) { JsonEventListener listener = ( JsonEventListener )      ; try {      ; } catch ( RuntimeException e ) {       ; } } } }<CODESPLIT>Fires a start of array event .
public static < E extends Exception > Runnable sneaked ( SneakyRunnable < E > runnable ) { return ( ) -> { @ SuppressWarnings ( "unchecked" ) SneakyRunnable < RuntimeException > castedRunnable = ( SneakyRunnable < RuntimeException > ) runnable ;      ; } ; }<CODESPLIT>Sneaky throws a Runnable lambda .
public static Domain update ( final BandwidthClient client , final String id , final Map < String , Object > params ) throws AppPlatformException , ParseException , IOException , Exception { assert ( client != null && id != null ) ; final String domainsUri =           ; final RestResponse response =         ; final JSONObject jsonObject =            ; return new Domain ( client , jsonObject ) ; }<CODESPLIT>Convenience method to return a Domain .
public static Stream < String > getResourceTypes ( final Event event ) { if ( event instanceof org . modeshape . jcr . api . observation . Event ) { try { final org . modeshape . jcr . api . observation . Event modeEvent = ( org . modeshape . jcr . api . observation . Event ) event ; final Stream . Builder < NodeType > types =      ; for ( final NodeType type :      ) {       ; }           ; return             ; } catch ( final RepositoryException e ) { throw new RepositoryRuntimeException ( e ) ; } } return    ; }<CODESPLIT>Get the RDF Types of the resource corresponding to this JCR Event
private void processDefaultHeader ( ParserContext context ) { for ( String line :      ) { if (     ) { break ; }           ; } }<CODESPLIT>Process the header of the file .
public Connection getConnection ( String url , String username , String password ) throws SQLException { boolean alive =    ; if ( ! alive ) {         ; } return connection ; }<CODESPLIT>Retrieves the connection object . If the connection doesnt exist or is dead it will attempt to create a new connection .
protected static final StringBuilder renderPad ( final StringBuilder builder , final int pad , final boolean newLine ) {       ; for ( int i = 0 ; i < pad ; i ++ ) {        ; } return builder ; }<CODESPLIT>Render some leading spaces onto a line of html .
public OvhAsyncTaskArray < OvhLine > eligibility_lines_active_POST ( OvhCity city , String contactName , OvhStreet street , String streetNumber ) throws IOException { String qPath = "/xdsl/eligibility/lines/active" ; StringBuilder sb =     ; HashMap < String , Object > o = new HashMap < String , Object > ( ) ;         ;         ;         ;         ; String resp =               ; return       ; }<CODESPLIT>Get the active lines at given address
private static String evaluateExpressionStack ( final Deque < String > operators , final Deque < String > values ) { while ( !      ) {                          ; } return         ; }<CODESPLIT>This method takes stacks of operators and values and evaluates possible expressions This is done by popping one operator and two values applying the operator to the values and pushing the result back onto the value stack
public int write ( byte [ ] buffer , int offset , int length , boolean isEnd ) throws IOException { int result ; long requestExpireTime = _requestExpireTime ; if ( requestExpireTime > 0 && requestExpireTime <      ) {    ; throw new ClientDisconnectException (                      ) ; } synchronized ( _writeLock ) { long now =      ; long expires = _socketTimeout + now ; do { result =           ; } while ( result == JniStream . TIMEOUT_EXN &&      < expires ) ; } if ( isEnd ) {    ; } return result ; }<CODESPLIT>Writes to the socket .
public void setAmbientLight ( float r , float g , float b ) { float ambient [ ] = { r , g , b , 255 } ;     ;         ;         ;                 ; }<CODESPLIT>Sets the RGB value of the ambientLight
BigInteger setMultiChoiceCount ( ) { if ( fields != null ) for ( int i = 0 ; i < fields . length ; i ++ ) multiChoiceCount =              ; return multiChoiceCount ; }<CODESPLIT>Set the multiChoiceCount for this tuple
public void delete ( boolean forceDelete ) throws APIException { HttpResponse response =             ;       ; }<CODESPLIT>Creates this directory vi the Algorithmia Data API
protected void addNameToApplicationMap ( String name ) { String appName =    ; if ( appName == null ) return ; ConcurrentLinkedQueue < String > list =       ; if ( list == null ) { ConcurrentLinkedQueue < String > newList = new ConcurrentLinkedQueue < String > ( ) ; list =         ; if ( list == null ) list = newList ; }       ; }<CODESPLIT>Adds the metric name to an application map . This map is not a complete list of metrics owned by an application produced metrics are managed in the MetricsExtension
public static Envelope getTableEnvelope ( Connection connection , TableLocation location , String geometryField ) throws SQLException { if ( geometryField == null ||      ) { List < String > geometryFields =       ; if (      ) { throw new SQLException ( "The table " + location + " does not contain a Geometry field, then the extent " + "cannot be computed" ) ; } geometryField =       ; } ResultSet rs =                          ; if (      ) { return                ; } throw new SQLException ( "Unable to get the table extent it may be empty" ) ; }<CODESPLIT>Merge the bounding box of all geometries inside the provided table .
private void doListGet ( final Message < JsonObject > message ) { final String name =           ; if ( name == null ) {                          ; return ; } final Integer index =           ; if ( index == null ) {                          ; return ; }                                                                                                                                        ; }<CODESPLIT>Handles a list get .
public static PlotCanvas plot ( String id , double [ ] data ) { Histogram histogram = new Histogram ( data ) ;       ; double [ ] lowerBound = {       , 0 } ; double [ ] upperBound = {       , 0 } ; double [ ] [ ] freq =      ; for ( int i = 0 ; i < freq . length ; i ++ ) { if ( freq [ i ] [ 1 ] > upperBound [ 1 ] ) { upperBound [ 1 ] = freq [ i ] [ 1 ] ; } } PlotCanvas canvas = new PlotCanvas ( lowerBound , upperBound ) ;            ;       ; return canvas ; }<CODESPLIT>Create a plot canvas with the histogram plot .
public static Pair < List < Tuple > , List < Tuple > > splitData ( final List < Tuple > trainingData , double proportion ) { if ( proportion < 0 || proportion > 1 ) { throw new RuntimeException ( "Proportion should between 0.0 - 1.0" ) ; } if ( proportion > 0.5 ) { proportion = 1 - proportion ; } List < Tuple > smallList = new ArrayList < > ( ) ; List < Tuple > largeList = new ArrayList < > ( ) ; int smallListSize = ( int )             ; int ct = 0 ; Set < Integer > indices = new HashSet < > ( ) ; while ( ct < smallListSize &&      >      ) { int index = ( int ) (      * (      - 1 ) ) ; while (       ) { index = ( int ) (      * (      - 1 ) ) ; }       ; ct ++ ; }                           ;                                           ; return new ImmutablePair < > ( smallList , largeList ) ; }<CODESPLIT>Shuffle the data and split by proportion
public static void getScreenShotABGR ( ByteBuffer bgraBuf , BufferedImage out ) { WritableRaster wr =      ; DataBufferByte db = ( DataBufferByte )      ; byte [ ] cpuArray =      ;      ;       ;      ; int width =      ; int height =      ; for ( int y = 0 ; y < height / 2 ; y ++ ) { for ( int x = 0 ; x < width ; x ++ ) { int inPtr = ( y * width + x ) * 4 ; int outPtr = ( ( height - y - 1 ) * width + x ) * 4 ; byte b1 = cpuArray [ inPtr + 0 ] ; byte g1 = cpuArray [ inPtr + 1 ] ; byte r1 = cpuArray [ inPtr + 2 ] ; byte a1 = cpuArray [ inPtr + 3 ] ; byte b2 = cpuArray [ outPtr + 0 ] ; byte g2 = cpuArray [ outPtr + 1 ] ; byte r2 = cpuArray [ outPtr + 2 ] ; byte a2 = cpuArray [ outPtr + 3 ] ; cpuArray [ outPtr + 0 ] = a1 ; cpuArray [ outPtr + 1 ] = b1 ; cpuArray [ outPtr + 2 ] = g1 ; cpuArray [ outPtr + 3 ] = r1 ; cpuArray [ inPtr + 0 ] = a2 ; cpuArray [ inPtr + 1 ] = b2 ; cpuArray [ inPtr + 2 ] = g2 ; cpuArray [ inPtr + 3 ] = r2 ; } } }<CODESPLIT>Good format for java swing .
public Pair < int [ ] [ ] [ ] , int [ ] > documentToDataAndLabels ( List < IN > document ) { int docSize =      ; int [ ] [ ] [ ] data = new int [ docSize ] [ windowSize ] [ ] ; int [ ] labels = new int [ docSize ] ; if ( flags . useReverse ) {       ; } for ( int j = 0 ; j < docSize ; j ++ ) { CRFDatum < List < String > , CRFLabel > d =         ; List < List < String > > features =      ; for ( int k = 0 , fSize =      ; k < fSize ; k ++ ) { Collection < String > cliqueFeatures =       ; data [ j ] [ k ] = new int [      ] ; int m = 0 ; for ( String feature : cliqueFeatures ) { int index =       ; if ( index >= 0 ) { data [ j ] [ k ] [ m ] = index ; m ++ ; } else { } } if ( m < data [ j ] [ k ] . length ) { int [ ] f = new int [ m ] ;                     ; data [ j ] [ k ] = f ; } } IN wi =       ; labels [ j ] =              ; } if ( flags . useReverse ) {       ; } return new Pair < int [ ] [ ] [ ] , int [ ] > ( data , labels ) ; }<CODESPLIT>Convert a document List into arrays storing the data features and labels .
public static synchronized List < Class < ? > > locateAll ( final String serviceName ) { if ( serviceName == null ) { throw new IllegalArgumentException ( "serviceName cannot be null" ) ; } List < Class < ? > > classes = new ArrayList < Class < ? > > ( ) ; if ( factories != null ) { List < Callable < Class < ? > > > l =       ; if ( l != null ) { for ( Callable < Class < ? > > c : l ) { try {           ; } catch ( Exception e ) { } } } } return classes ; }<CODESPLIT>Finds all providers for the given service .
String decodeCString ( ByteBuf buffer ) throws IOException { int length =         ; if ( length < 0 ) throw new IOException ( "string termination not found" ) ; String result =                 ;         ; return result ; }<CODESPLIT>default visibility for unit test
public void addCase ( JMFType theCase ) { if ( theCase == null ) throw new NullPointerException ( "Variant case cannot be null" ) ; JSType newCase = ( JSType ) theCase ; if ( cases == null ) cases = new JSType [ 1 ] ; else { JSType [ ] oldCases = cases ; cases = new JSType [ oldCases . length + 1 ] ;                 ; } newCase . parent = this ; newCase . siblingPosition = cases . length - 1 ; cases [ newCase . siblingPosition ] = newCase ; }<CODESPLIT>Add a case to the variant . Note that every variant must have at least one case .
public String summarizeState ( ) { StringBuilder buf = new StringBuilder ( ) ;            ;        ; int ii = 0 ; for ( SoundType soundType : _disabledTypes ) { if ( ii ++ > 0 ) {        ; }       ; } return           ; }<CODESPLIT>Returns a string summarizing our volume settings and disabled sound types .
private Map < String , String > getCustomMap ( Pattern keyPattern ) { Map < String , String > map = new HashMap < > ( ) ; for ( Iterator < Object > it =          ;      ; ) { String key = ( String )      ; Matcher matcher =       ; if (      ) { String id =       ; String propertyValue =       ;         ; } } return map ; }<CODESPLIT>Returns the map where the key is the 2 group of the pattern and the value is the property value
public static long rawUncompress ( long inputAddr , long inputSize , long destAddr ) throws IOException { return           ; }<CODESPLIT>Zero - copy decompress using memory addresses .
public void write ( byte [ ] b , int off , int len ) {       ;                   ; this . pos += len ; }<CODESPLIT>Writes a byte array content into the stream
public final Operation patchHealthCheck ( ProjectGlobalHealthCheckName healthCheck , HealthCheck healthCheckResource , List < String > fieldMask ) { PatchHealthCheckHttpRequest request =                                   ; return     ; }<CODESPLIT>Updates a HealthCheck resource in the specified project using the data included in the request . This method supports PATCH semantics and uses the JSON merge patch format and processing rules .
private void initializeNoxItemMargin ( TypedArray attributes ) { float noxItemMarginDefaultValue =             ; float noxItemMargin =             ;       ; }<CODESPLIT>Configures the nox item default margin used in NoxConfig Shape and NoxItemCatalog to draw nox item instances during the onDraw execution .
public static OperationResult failed ( long index , long eventIndex , Throwable error ) { return new OperationResult ( index , eventIndex , error , null ) ; }<CODESPLIT>Returns a failed operation result .
public static InsnList ifIntegersEqual ( InsnList lhs , InsnList rhs , InsnList action ) {       ;       ;       ; InsnList ret = new InsnList ( ) ; LabelNode notEqualLabelNode = new LabelNode ( ) ;       ;       ;               ;       ;       ; return ret ; }<CODESPLIT>Compares two integers and performs some action if the integers are equal .
public static FormatOptions of ( int flags , int width , int precision ) { if ( !         ) { throw new IllegalArgumentException ( "invalid flags: 0x" +       ) ; } if ( ( width < 1 || width > MAX_ALLOWED_WIDTH ) && width != UNSET ) { throw new IllegalArgumentException ( "invalid width: " + width ) ; } if ( ( precision < 0 || precision > MAX_ALLOWED_PRECISION ) && precision != UNSET ) { throw new IllegalArgumentException ( "invalid precision: " + precision ) ; } return new FormatOptions ( flags , width , precision ) ; }<CODESPLIT>Creates a options instance with the given values .
public void tripleClick ( Coordinates where ) { Point p =        ;                   ; }<CODESPLIT>Triple click is an Opera specific way of selecting a sentence .
private void initializeNoxItemPlaceholder ( TypedArray attributes ) { Drawable placeholder =           ; if ( placeholder == null ) { placeholder =                 ; }       ; }<CODESPLIT>Configures the placeholder used if there is no another placeholder configured in the NoxItem instances during the onDraw execution .
public void pruneInvalidOptional ( DependencyExplorerOutput output , InvalidKeys invalidKeys ) { DependencyGraph . GraphPruner prunedGraph = new DependencyGraph . GraphPruner (      ) ; for ( Key < ? > key :      ) {       ;       ; }           ; }<CODESPLIT>Prune all of the invalid optional keys from the graph . After this method all of the keys remaining in the graph are resolvable .
private PersistentResourceXMLDescription getSimpleMapperParser ( ) { if (         ) { return simpleMapperParser_1_0 ; } else if (         ) { return simpleMapperParser_1_1 ; } return simpleMapperParser ; }<CODESPLIT>1 . 0 version of parser is different at simple mapperParser
public String getAbsoluteTemplateURI ( String templateName , boolean includeExtension ) { FastStringWriter buf = new FastStringWriter ( ) ; String tmp =             ; if (       > - 1 ) {       ; int i =       ;              ;       ;                    ; } else {       ;                  ; } if ( includeExtension ) {       ; } String uri =      ;      ; return uri ; }<CODESPLIT>Used to resolve template names that are not relative to a controller .
protected void scanResourcePaths ( String startPath ) throws IOException , SAXException { Set < String > dirList =       ; if ( dirList != null ) { for ( String path : dirList ) { if (       ) { } else if (       ) { } else if (       ) {     ; } else if (       ) { if (       ) {     ; } } else if (       ) {     ; } } } }<CODESPLIT>Scan web application resources for TLDs recursively .
protected boolean duringDrag ( SVGPoint startPoint , SVGPoint dragPoint , Event evt , boolean inside ) { if ( listener != null ) { return             ; } return true ; }<CODESPLIT>Method called during drags .
private PGPKeyRingGenerator createKeyRingGenerator ( String userId , String password , int keySize ) {         ;                           ; PGPKeyRingGenerator generator = null ; try {           ; RSAKeyPairGenerator generator1 = new RSAKeyPairGenerator ( ) ;                        ;          ; BcPGPKeyPair signingKeyPair = new BcPGPKeyPair ( PGPPublicKey . RSA_SIGN ,      , new Date ( ) ) ;          ; BcPGPKeyPair encryptionKeyPair = new BcPGPKeyPair ( PGPPublicKey . RSA_ENCRYPT ,      , new Date ( ) ) ;          ; PGPSignatureSubpacketGenerator signatureSubpacketGenerator = new PGPSignatureSubpacketGenerator ( ) ;               ;           ;           ;           ;          ; PGPSignatureSubpacketGenerator encryptionSubpacketGenerator = new PGPSignatureSubpacketGenerator ( ) ;               ;           ; generator = new PGPKeyRingGenerator ( PGPPublicKey . RSA_SIGN , signingKeyPair , userId ,            ,      , null , new BcPGPContentSignerBuilder ( PGPPublicKey . RSA_SIGN , HashAlgorithmTags . SHA256 ) ,                 ) ;               ; } catch ( PGPException e ) {             ; generator = null ; } return generator ; }<CODESPLIT>creates and initializes a PGP Key Ring Generator
public static Date getDateFromString ( final String dateString , final String pattern ) { try { SimpleDateFormat df =     ; return       ; } catch ( ParseException e ) { throw new DateException (                 , e ) ; } }<CODESPLIT>Get data from data string using the given pattern and the default date format symbols for the default locale .
public Object remove ( Object key ) { synchronized ( _cacheL2 ) { if ( !       && !       ) { return null ; } Object retval ; Map newMap ; synchronized ( _cacheL1 ) { newMap =         ; retval =       ; } _cacheL1 = newMap ;      ; _missCount = 0 ; return retval ; } }<CODESPLIT>This operation is very expensive . A full copy of the Map is created
private String getItemType ( Cmdb cmdb ) { String itemType = null ; String subType =      ; String type =      ; String hpsmSettingsSubType =      ; String hpsmSettingsType =      ; boolean typeCheck = false ; boolean subTypeCheck = false ; if ( !       ) { typeCheck = true ; } if ( !       ) { subTypeCheck = true ; } if ( ! typeCheck && subTypeCheck ) { if ( subType != null &&           ) { itemType = APP_TYPE ; } else if ( subType != null &&           ) { itemType = COMPONENT_TYPE ; } else if ( subType != null &&           ) { itemType = ENVIRONMENT_TYPE ; } } else if ( typeCheck && ! subTypeCheck ) { if ( type != null &&           ) { itemType = APP_TYPE ; } else if ( type != null &&           ) { itemType = COMPONENT_TYPE ; } else if ( type != null &&           ) { itemType = ENVIRONMENT_TYPE ; } } else { if ( subType != null &&           && type != null &&           ) { itemType = APP_TYPE ; } else if ( subType != null &&           && type != null &&           ) { itemType = COMPONENT_TYPE ; } else if ( subType != null &&           && type != null &&           ) { itemType = ENVIRONMENT_TYPE ; } } return itemType ; }<CODESPLIT>Returns the type of the configuration item .
public void readXML ( final List < String > _tags , final Map < String , String > _attributes , final String _text ) throws SAXException , EFapsException { if (      == 1 ) { final String value =       ; if (       ) { this . uuid = _text ; } else if (       ) { this . fileApplication = _text ; } else if (       ) {           ; } } else if (            ) { final AbstractDefinition curDef =                 ;                      ; } else { throw new SAXException ( "Unknown XML Tag: " + _tags + " for: " + this . installFile ) ; } }<CODESPLIT>Read event for given tags path with attributes and text .
public String getSQLUpdate ( boolean bUseCurrentValues ) { String strRecordset =           ; KeyArea keyArea =           ; boolean bUseCurrentKeyValues = bUseCurrentValues ? true :           ; boolean bIsQueryRecord =          ; String sFilter =                       ; if (      > 0 ) sFilter = " WHERE " + sFilter ; String strSetValues =               ; if (      == 0 ) return null ; strRecordset = "UPDATE " + strRecordset + " SET " + strSetValues + sFilter ; return strRecordset ; }<CODESPLIT>Get the SQL Update string . UPDATE table SET field1 = value1 field2 = value2 WHERE key = value
public static synchronized void verify ( Object ... objects ) { for ( Object mock : objects ) { if ( mock instanceof Class < ? > ) {           ; } else { EasyMockMethodInvocationControl invocationControl = ( EasyMockMethodInvocationControl )       ; if ( invocationControl != null ) {      ; } else { if (    && !     ) { } else { try {           ; } catch ( RuntimeException e ) { throw new RuntimeException ( mock + " is not a mock object" , e ) ; } } } } } }<CODESPLIT>Switches the mocks or classes to verify mode . Note that you must use this method when using PowerMock!
public void mapTileRequestFailed ( final MapTileRequestState pState ) { if ( mTileNotFoundImage != null ) {               ; for ( final Handler handler : mTileRequestCompleteHandlers ) { if ( handler != null ) {       ; } } } else { for ( final Handler handler : mTileRequestCompleteHandlers ) { if ( handler != null ) {       ; } } } if (          ) {                       ; } }<CODESPLIT>Called by implementation class methods indicating that they have failed to retrieve the requested map tile . a MAPTILE_FAIL_ID message is sent .
static void validateFactoryAndClass ( FieldDefinition fd , int factoryId , int classId , String fullPath ) { if ( factoryId !=      ) { throw new IllegalArgumentException ( "Invalid factoryId! Expected: " +      + ", Current: " + factoryId + " in path " + fullPath ) ; } if ( classId !=      ) { throw new IllegalArgumentException ( "Invalid classId! Expected: " +      + ", Current: " + classId + " in path " + fullPath ) ; } }<CODESPLIT>Validates if the given factoryId and classId match the ones from the fieldDefinition
public static String getLabelFor ( InputComponent < ? , ? > input , boolean addColon ) { String label =      ; if ( label == null ) { label =      ; } if ( addColon && !       ) { label += COLON ; } return label ; }<CODESPLIT>Returns the label for this component
protected final View inflatePlaceholderView ( final View convertView , final int height ) { View view = convertView ; if ( ! ( view instanceof PlaceholderView ) ) { view = new PlaceholderView (    ) ; }       ; return view ; }<CODESPLIT>Inflates an invisible placeholder view with a specific height .
public void stopService ( ) throws Exception {            ;        ;            ;      ;            ; }<CODESPLIT>Stop the LdapServer and the Directory service . Use for JUnit teardown . If the service is not stopped then future instances with the same name cannot clean up the file directory .
public void setCacheMinutes ( int iMinutes ) { if ( iMinutes == - 1 ) iMinutes = DEFAULT_CACHED_MINUTES ; cacheMinutes = iMinutes ; if ( iMinutes == 0 ) { if ( timerCache != null ) {      ; timerCache = null ;      ; } } else { if ( timerCache != null ) {      ; }      ; timerTask = new DBTimerTask ( ) ; timerCache = new java . util . Timer ( ) ;             ; } }<CODESPLIT>This will set this database to start caching records until they haven t been used for iMinutes minutes .
protected void propagateOnEnter ( GVRPickedObject hit ) { GVRSceneObject hitObject =      ; GVREventManager eventManager =        ; if (         ) { if (         ) {                 ; } if (         ) {                 ; } if (         && ( mScene != null ) ) {                 ; } } if (         ) { if (         ) {                 ; } if (         ) {                 ; } if (         && ( mScene != null ) ) {                 ; } } }<CODESPLIT>Propagate onEnter events to listeners
public java . util . concurrent . Future < GetSendQuotaResult > getSendQuotaAsync ( com . amazonaws . handlers . AsyncHandler < GetSendQuotaRequest , GetSendQuotaResult > asyncHandler ) { return          ; }<CODESPLIT>Simplified method form for invoking the GetSendQuota operation with an AsyncHandler .
public short shortValue ( ) throws OtpErlangRangeException { final long l =    ; final short i = ( short ) l ; if ( i != l ) { throw new OtpErlangRangeException ( "Value too large for short: " + val ) ; } return i ; }<CODESPLIT>Get this number as a short .
private MjdbcSQLException translateSQLStatePrefix ( String reason , String SQLState , int vendorCode , SQLException cause ) { MjdbcSQLException result = null ; String sqlState =     ; String sqlStatePrefix = null ; if ( sqlState != null &&      >= 2 ) { sqlStatePrefix =         ; if (         == true ) { result = new BadSqlGrammarException ( reason , SQLState , vendorCode ) ; } else if (         == true ) { result = new DataIntegrityViolationException ( reason , SQLState , vendorCode ) ; } else if (         == true ) { result = new DataAccessResourceFailureException ( reason , SQLState , vendorCode ) ; } else if (         == true ) { result = new TransientDataAccessResourceException ( reason , SQLState , vendorCode ) ; } else if (         == true ) { result = new ConcurrencyFailureException ( reason , SQLState , vendorCode ) ; } } return result ; }<CODESPLIT>Checks SQL state and tries to convert it into Spring SQL Exception . This implementation is vendor free .
public boolean matches ( String name ) { if ( name == null ) { return       ; } if ( all != null ) { return       ; } if ( middle != null ) { return       ; } if ( start != null && !       ) { return false ; } return end == null ||       ; }<CODESPLIT>Checks if Simon name matches this pattern .
public static nslimitselector get ( nitro_service service , String selectorname ) throws Exception { nslimitselector obj = new nslimitselector ( ) ;       ; nslimitselector response = ( nslimitselector )       ; return response ; }<CODESPLIT>Use this API to fetch nslimitselector resource of given name .
public static int solveQuad ( double [ ] eqn , double [ ] res ) { double a = eqn [ 2 ] ; double b = eqn [ 1 ] ; double c = eqn [ 0 ] ; int rc = 0 ; if ( a == 0f ) { if ( b == 0f ) { return - 1 ; } res [ rc ++ ] = - c / b ; } else { double d = b * b - 4f * a * c ; if ( d < 0f ) { return 0 ; } d =       ; res [ rc ++ ] = ( - b + d ) / ( a * 2f ) ; if ( d != 0f ) { res [ rc ++ ] = ( - b - d ) / ( a * 2f ) ; } } return       ; }<CODESPLIT>Solves quadratic equation
public Set < Term > getAllTerms ( ) { final Set < Term > ret = new HashSet < Term > ( ) ; for ( final StatementGroup sg : statementGroups ) { for ( final Statement stmt :      ) {           ; } } return ret ; }<CODESPLIT>Returns the set of all terms contained within the document .
public void cancelCopy ( CopyOperationImpl op ) throws SQLException { if ( !     ) { throw new PSQLException (             , PSQLState . OBJECT_NOT_IN_STATE ) ; } SQLException error = null ; int errors = 0 ; try { if ( op instanceof CopyIn ) { synchronized ( this ) {             ; final byte [ ] msg =         ;       ;           ;       ;       ;      ; do { try {       ; } catch ( SQLException se ) { errors ++ ; if ( error != null ) { SQLException e = se ; SQLException next ; while ( ( next =      ) != null ) { e = next ; }       ; } error = se ; } } while (     ) ; } } else if ( op instanceof CopyOut ) {    ; } } catch ( IOException ioe ) { throw new PSQLException (             , PSQLState . CONNECTION_FAILURE , ioe ) ; } finally { synchronized ( this ) { if (     ) {     ; } } } if ( op instanceof CopyIn ) { if ( errors < 1 ) { throw new PSQLException (              , PSQLState . COMMUNICATION_ERROR ) ; } else if ( errors > 1 ) { throw new PSQLException (                      , PSQLState . COMMUNICATION_ERROR , error ) ; } } }<CODESPLIT>Finishes a copy operation and unlocks connection discarding any exchanged data .
public com . google . api . ads . adwords . axis . v201809 . o . AttributeType [ ] getRequestedAttributeTypes ( ) { return requestedAttributeTypes ; }<CODESPLIT>Gets the requestedAttributeTypes value for this TargetingIdeaSelector .
public void setRange ( Annotation v ) { if ( OntRelationMention_Type . featOkTst && ( ( OntRelationMention_Type ) jcasType ) . casFeat_range == null )           ;                           ; }<CODESPLIT>setter for range - sets
public List < com . ibm . wsspi . security . wim . model . RolePlayer > getRelatedRolePlayer ( ) { if ( relatedRolePlayer == null ) { relatedRolePlayer = new ArrayList < com . ibm . wsspi . security . wim . model . RolePlayer > ( ) ; } return this . relatedRolePlayer ; }<CODESPLIT>Gets the value of the relatedRolePlayer property .
public JCExpression getUnderlyingBinding ( Unifier unifier ) { return ( unifier == null ) ? null :               ; }<CODESPLIT>Gets the binding of the underlying identifier in the unifier .
public void clearCache ( ) {         ;       ;       ;       ; }<CODESPLIT>Clears the cache for all commerce price entries .
private int computeCapacity ( int initial ) { if ( initial < MINIMUM_CAPACITY ) { return MINIMUM_CAPACITY ; } if ( initial > MAXIMUM_CAPACITY ) { return MAXIMUM_CAPACITY ; } int capacity = 1 ; while ( capacity < initial ) { capacity <<= 1 ; } return capacity ; }<CODESPLIT>Compute capacity given initial capacity .
public V get ( K k , long timeout , TimeUnit unit ) throws InterruptedException , TimeoutException {         ; return       ; }<CODESPLIT>Retrieve the value associated with the given key blocking as long as necessary up to the specified maximum .
public static void setupClasspath ( final Path distributedClassPath , final Path intermediateClassPath , final Job job ) throws IOException { String classpathProperty =       ; if ( classpathProperty == null ) { classpathProperty =       ; } String [ ] jarFiles =         ; final Configuration conf =      ; final FileSystem fs =       ; if ( fs instanceof LocalFileSystem ) { return ; } for ( String jarFilePath : jarFiles ) { final File jarFile = new File ( jarFilePath ) ; if (           ) { try {                                                        ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } } }<CODESPLIT>Uploads jar files to hdfs and configures the classpath . Snapshot jar files are uploaded to intermediateClasspath and not shared across multiple jobs . Non - Snapshot jar files are uploaded to a distributedClasspath and shared across multiple jobs .
public void eval ( String javascript ) throws WidgetException { WebElement element =     ; WebDriver wd =        ; try {              ; } catch ( Exception e ) { long time =      + 2000 ; boolean success = false ; while ( ! success &&      < time ) { try {              ; success = true ; } catch ( Exception e2 ) { try {       ; } catch ( InterruptedException e1 ) { } e = e2 ; } } if ( ! success ) { throw new RuntimeException ( e ) ; } } }<CODESPLIT>Executes JavaScript code on the current element in the current frame or window .
public long addWrapField ( long instant , int amount ) { return                       ; }<CODESPLIT>Add the specified amount to the specified time instant wrapping around within the remainder range if necessary . The amount added may be negative .
protected synchronized SendRequest makeUnsignedChannelContract ( Coin valueToMe ) { Transaction tx = new Transaction (      ) ; if ( !                ) {                             ; }            ; return       ; }<CODESPLIT>Create a payment transaction with valueToMe going back to us
public static String getUserNameFromToken ( String authToken ) { if ( null == authToken ) { return null ; } return       [ 0 ] ; }<CODESPLIT>Extracts the user name from token .
protected Class < ? > resolveProxyClass ( String [ ] interfaceNames ) throws ClassNotFoundException { ClassLoader proxyClassLoader = classLoader ; Class < ? > [ ] interfaces = new Class [ interfaceNames . length ] ; Class < ? > nonPublicInterface = null ; for ( int i = 0 ; i < interfaceNames . length ; i ++ ) { Class < ? > intf =        ; if ( !           ) { ClassLoader classLoader =     ; if ( nonPublicInterface != null ) { if ( classLoader != proxyClassLoader ) { throw new IllegalAccessError ( nonPublicInterface + " and " + intf + " both declared non-public in different class loaders" ) ; } } else { nonPublicInterface = intf ; proxyClassLoader = classLoader ; } } interfaces [ i ] = intf ; } try { return         ; } catch ( IllegalArgumentException ex ) { throw new ClassNotFoundException ( null , ex ) ; } }<CODESPLIT>Delegates class loading to the specified class loader .
public static double [ ] rowSums ( double [ ] [ ] data ) { double [ ] x = new double [ data . length ] ; for ( int i = 0 ; i < x . length ; i ++ ) { x [ i ] =        ; } return x ; }<CODESPLIT>Returns the row sums for a matrix .
protected void rehash ( int newCapacity ) { int oldCapacity = table . length ; long oldTable [ ] = table ; int oldValues [ ] = values ; byte oldState [ ] = state ; long newTable [ ] = new long [ newCapacity ] ; int newValues [ ] = new int [ newCapacity ] ; byte newState [ ] = new byte [ newCapacity ] ; this . lowWaterMark =         ; this . highWaterMark =         ; this . table = newTable ; this . values = newValues ; this . state = newState ; this . freeEntries = newCapacity - this . distinct ; for ( int i = oldCapacity ; i -- > 0 ; ) { if ( oldState [ i ] == FULL ) { long element = oldTable [ i ] ; int index =     ; newTable [ index ] = element ; newValues [ index ] = oldValues [ i ] ; newState [ index ] = FULL ; } } }<CODESPLIT>Rehashes the contents of the receiver into a new table with a smaller or larger capacity . This method is called automatically when the number of keys in the receiver exceeds the high water mark or falls below the low water mark .
public void add ( HpackHeaderField header ) { int headerSize =      ; if ( headerSize > capacity ) {    ; return ; } while ( capacity - size < headerSize ) {    ; } hpackHeaderFields [ head ++ ] = header ; size +=      ; if ( head == hpackHeaderFields . length ) { head = 0 ; } }<CODESPLIT>Add the header field to the dynamic table . Entries are evicted from the dynamic table until the size of the table and the new header field is less than or equal to the table s capacity . If the size of the new entry is larger than the table s capacity the dynamic table will be cleared .
private void fired ( Direction initial ) { for ( final LauncherListener listener : listenersLauncher ) {      ; } for ( final LaunchableConfig launchableConfig : launchables ) { final Media media =           ; final Featurable featurable =       ; try { final Launchable launchable =         ; if (      > 0 ) {                 ; } else {           ; } } catch ( final LionEngineException exception ) {             ; throw exception ; } } }<CODESPLIT>Called when fire is performed .
public static void init ( InvocationManager invmgr , RootDObjectManager omgr ) { _invmgr = invmgr ; _omgr = omgr ;                ; }<CODESPLIT>Registers the time provider with the appropriate managers . Called by the presents server at startup .
static UfsJournalFile createLogFile ( URI location , long start , long end ) { return new UfsJournalFile ( location , start , end , false ) ; }<CODESPLIT>Creates a journal log file .
protected Object writeReplace ( ) throws java . io . ObjectStreamException { try { return new CertificateRep ( type ,    ) ; } catch ( CertificateException e ) { throw new java . io . NotSerializableException ( "java.security.cert.Certificate: " + type + ": " +      ) ; } }<CODESPLIT>Replace the Certificate to be serialized .
private static Throwable extractThrowable ( final Object [ ] arguments ) { return arguments . length == 0 ? null :            ; }<CODESPLIT>Returns a throwable if the last argument is one .
public static List < Map < IBond , IBond > > makeBondMapsOfAtomMaps ( IAtomContainer ac1 , IAtomContainer ac2 , List < Map < IAtom , IAtom > > mappings ) { List < Map < IBond , IBond > > bondMaps = new ArrayList < Map < IBond , IBond > > ( ) ; for ( Map < IAtom , IAtom > mapping : mappings ) {              ; } return bondMaps ; }<CODESPLIT>Returns bond maps between source and target molecules based on the atoms
public LongConstant addLong ( long value ) { LongConstant entry =     ; if ( entry != null ) return entry ; entry = new LongConstant ( this ,      , value ) ;     ;     ; return entry ; }<CODESPLIT>Adds a long constant .
public GeoPackage getOrOpen ( String name , File file ) { return         ; }<CODESPLIT>Get the cached GeoPackage or open and cache the GeoPackage file
public static int extractVersionFromSchemaName ( String clz_name ) { int idx =       ; if ( idx == - 1 ) return - 1 ; try { return              ; } catch ( NumberFormatException ex ) { return - 1 ; } }<CODESPLIT>Extract the version number from the schema class name . Returns - 1 if there s no version number at the end of the classname .
private void drawShape ( Canvas canvas , Paint paint , Path path , ShapeAppearanceModel shapeAppearanceModel , RectF bounds ) { if (      ) { float cornerSize =          ;             ; } else {         ; } }<CODESPLIT>Draw the path or try to draw a round rect if possible .
public AnalyzerJob getAnalyzerJob ( final String descriptorName , final String analyzerName , final String analyzerInputName ) { List < AnalyzerJob > candidates = new ArrayList < > ( _jobs ) ; candidates =                                  ; if ( analyzerName != null ) { candidates =                              ; } if ( analyzerInputName != null ) { candidates =                                               ; } if (      ) {             ; return null ; } else if (      > 1 ) {               ; } return          ; }<CODESPLIT>Gets the best candidate analyzer job based on search criteria offered in parameters .
public boolean removeExecutedTradeCallback ( final BitfinexExecutedTradeSymbol tradeSymbol , final BiConsumer < BitfinexExecutedTradeSymbol , BitfinexExecutedTrade > callback ) throws BitfinexClientException { return         ; }<CODESPLIT>Remove a executed trade callback
public HealthDto doPrimaryHealthCheck ( ) { List < HealthDependency > primaryHealthDependencies =                          ; return     ; }<CODESPLIT>Performs the Primary Health Check .
public static appfwxmlerrorpage get ( nitro_service service ) throws Exception { appfwxmlerrorpage obj = new appfwxmlerrorpage ( ) ; appfwxmlerrorpage [ ] response = ( appfwxmlerrorpage [ ] )       ; return response [ 0 ] ; }<CODESPLIT>Use this API to fetch all the appfwxmlerrorpage resources that are configured on netscaler .
private void setupClient ( final AbstractHttpClient client ) {                                                             ; }<CODESPLIT>This method is used to capture Location headers after HttpClient redirect handling .
private void quickSelect ( List < P > points , int splitAxis , int medianNum ) { int numPoints =      ; if ( tmp . length < numPoints ) { tmp = new double [ numPoints ] ; indexes = new int [ numPoints ] ; } for ( int i = 0 ; i < numPoints ; i ++ ) { tmp [ i ] =              ; }             ; }<CODESPLIT>Uses quick - select to find the median value
public void writeHtml ( JspWriter pOut , String pHtml ) throws IOException { StringTokenizer parser = new StringTokenizer ( pHtml , "<>&" , true ) ; while (      ) { String token =      ; if (       ) {       ; } else if (       ) {       ; } else if (       ) {       ; } else {       ; } } }<CODESPLIT>writeHtml ensures that the text being outputted appears as it was entered . This prevents users from hacking the system by entering html or jsp code into an entry form where that value will be displayed later in the site .
protected String getNodeName ( Node node ) { String result =      ; return result == null ?      : result ; }<CODESPLIT>Returns the node name . First tries local name . If this is null returns instead the full node name .
public void setExpiryDate ( @ IntRange ( from = 1 , to = 12 ) int month , @ IntRange ( from = 0 , to = 9999 ) int year ) {              ; }<CODESPLIT>Set the expiration date . Method invokes completion listener and changes focus to the CVC field if a valid date is entered .
protected void writeApplyDdl ( DdlWrite write ) {                                                                 ; }<CODESPLIT>Write the Apply DDL buffers to the writer .
protected static final boolean classEquals ( Class clz1 , Class clz2 ) { if ( clz1 == null || clz2 == null ) { throw new NullPointerException ( ) ; } return clz1 == clz2 ||               ; }<CODESPLIT>Compares if two classes are equal or their class names are equal .
public void addSharedFunction ( ISource source ) { String fileName = source instanceof FileSource ?           : null ;       ; }<CODESPLIT>Add shared function by ISource
public void setCommercePriceListService ( com . liferay . commerce . price . list . service . CommercePriceListService commercePriceListService ) { this . commercePriceListService = commercePriceListService ; }<CODESPLIT>Sets the commerce price list remote service .
public static HtmlTree MAIN ( ) { HtmlTree htmltree = new HtmlTree ( HtmlTag . MAIN ) ;         ; return htmltree ; }<CODESPLIT>Generates a MAIN tag with role attribute .
public static cachepolicylabel_stats get ( nitro_service service , String labelname ) throws Exception { cachepolicylabel_stats obj = new cachepolicylabel_stats ( ) ;       ; cachepolicylabel_stats response = ( cachepolicylabel_stats )       ; return response ; }<CODESPLIT>Use this API to fetch statistics of cachepolicylabel_stats resource of given name .
protected void saveBroker ( File mapfile , HashMapIDBroker broker ) throws RuntimeException { if ( !      ) { return ; } try { BufferedWriter bout = new BufferedWriter ( new FileWriter ( mapfile ) ) ;       ;      ; } catch ( IOException ioe ) { throw new RuntimeException ( "Unable to store component ID map [mapfile=" + mapfile + "]" , ioe ) ; } }<CODESPLIT>Stores a persistent representation of the supplied hashmap ID broker in the specified file .
public void update ( final Collection < T > values ) throws DataAccessException {                                        ; }<CODESPLIT>update the objects .
public static MutableInt fromExternal ( final IntSupplier s , final IntConsumer c ) { return new MutableInt ( ) { public int getAsInt ( ) { return      ; } public Integer get ( ) { return    ; } public MutableInt set ( final int value ) {       ; return this ; } } ; }<CODESPLIT>Construct a MutableInt that gets and sets an external value using the provided Supplier and Consumer
public void configure ( Config config ) {        ;        ; try { this . config = config ;     ; } finally {        ; } }<CODESPLIT>Replace the configuration of this instance directly .
protected void addPropertiesStart ( String type ) {                 ;             ;                   ; }<CODESPLIT>Add properties to properties map on transaction start
public List < SequenceListType . Sequence > getSequence ( ) { if ( sequence == null ) { sequence = new ArrayList < SequenceListType . Sequence > ( ) ; } return this . sequence ; }<CODESPLIT>Gets the value of the sequence property .
public MapBuilder addNumber ( String fieldName , boolean include , Supplier < Number > supplier ) { if ( include ) { Number value =      ; if ( value != null ) {            ; } } return this ; }<CODESPLIT>Adds the number value to the provided map under the provided field name if it should be included . The supplier is only invoked if the field is to be included .
public void disconnectCardOneConsumer ( ) { if (      &&      )         ; Object [ ] clonedConsumerPoints = null ; synchronized ( consumerPoints ) { clonedConsumerPoints =      ; } SILimitExceededException e = new SILimitExceededException (                           ) ;             ;         ; for ( int i = 0 ; i < clonedConsumerPoints . length ; i ++ ) { DispatchableKey ck = ( DispatchableKey ) clonedConsumerPoints [ i ] ;       ; } if (      &&      )         ; }<CODESPLIT>The disconnectCardOneConsumer method is invoked by the Anycast Input Handler to notify it that the current cardinality - one consumer must be disconnected . This can happen when this RME becomes unreachable and the DME allows a consumer in a separate RME to connect . As soon as this RME becomes reachable again the DME sends ControlCardinalityInfo to trigger this consumer s disconnection .
public boolean isAdministrator ( AuthContext ctx ) { return      != null &&           &&      != null &&           ; }<CODESPLIT>Check if the given credentials allow administrative access
protected void init ( ) { if (      ) { runner =      ;                   ; } else {         ; }    ; if ( runner != null ) {      ; }      ; debugger =      ;       ; windowManager =      ; exec =      ; core =      ; cookieManager =      ; mouse = new OperaMouse ( this ) ; keyboard = new OperaKeyboard ( this ) ;               ;             ; if ( !             ) { preferences = new OperaScopePreferences (      ) ;                ; if (             ) {                 ; } } proxy = new OperaProxy ( this ) ;           ; }<CODESPLIT>Initialize required Scope services .
public static String calculateMD5 ( String string ) { byte [ ] hash ; try { hash =                 ; } catch ( NoSuchAlgorithmException e ) { throw new RuntimeException ( "Huh, MD5 should be supported?" , e ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( "Huh, UTF-8 should be supported?" , e ) ; } StringBuilder hex = new StringBuilder ( hash . length * 2 ) ; for ( byte b : hash ) { int i = ( b & 0xFF ) ; if ( i < 0x10 )       ;            ; } return      ; }<CODESPLIT>Calculate the MD5 of a given String
protected static File findRawDir ( File dir ) { for ( int i = 0 ; dir != null && i < 20 ; i ++ ) { File rawDir =     ; if ( rawDir != null ) { return rawDir ; } dir =      ; } return null ; }<CODESPLIT>Look for the resource - directory in the current directory or the directories above . Then look for the raw - directory underneath the resource - directory .
public Object resolveVariable ( String pName ) throws ELException { ELContext ctx =      ; return               ; }<CODESPLIT>LIDB4147 - 9 Begin - modified for JSP 2 . 1
protected DependantValue createPrimaryKeyValue ( InFlightMetadataCollector mappings , PersistentProperty property , Collection collection , Map < ? , ? > persistentClasses ) { KeyValue keyValue ; DependantValue key ; String propertyRef =      ; if ( propertyRef == null ) { keyValue =          ; } else { keyValue = ( KeyValue )               ; } if (      )                          ; key = new DependantValue ( metadataBuildingContext ,      , keyValue ) ;       ;       ;       ; return key ; }<CODESPLIT>Creates the DependentValue object that forms a primary key reference for the collection .
protected AVariableExp getVarExp ( ILexNameToken name , PDefinition vardef , PType type ) { AVariableExp var =       ;       ; return var ; }<CODESPLIT>Generate Var Exp with everything!
public static boolean isNullOrWhiteSpace ( String arg ) { if (       ||          ) { return true ; } return false ; }<CODESPLIT>Determines whether the parameter string is null empty or whitespace .
public BlockInfo queryBlockByNumber ( long blockNumber ) throws InvalidArgumentException , ProposalException { return                 ; }<CODESPLIT>query this channel for a Block by the blockNumber . The request is retried on all peers till successful
@ SuppressWarnings ( "unchecked" ) public static Getter getGetter ( Class type , String name ) { return          ; }<CODESPLIT>Search getter for given class and property name .
public static String decodeLZToString ( byte [ ] data , String dictionary ) { try { return new String (     , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }<CODESPLIT>Decode lz to string string .
public static AirlineFlightUpdateTemplateBuilder addAirlineFlightUpdateTemplate ( String introMessage , String locale , String pnrNumber , UpdateType updateType ) { return new AirlineFlightUpdateTemplateBuilder ( introMessage , locale , pnrNumber , updateType ) ; }<CODESPLIT>Adds an Airline Flight Update Template to the response .
private void addModulesArgument ( final String argument , final List < String > arguments , final Module [ ] modules , final String aditionalpath , final String role ) throws MojoExecutionException { StringBuilder buf = new StringBuilder ( ) ; if ( null != aditionalpath ) {       ;       ; } if ( modules != null && modules . length > 0 ) { if ( !       ) {       ; } for ( int i = 0 ; i < modules . length ; ++ i ) { Module module = modules [ i ] ; Artifact artifact = null ; @ SuppressWarnings ( "unchecked" ) Set < Artifact > allArtifacts =      ; for ( Artifact art : allArtifacts ) { if (               &&               &&                         &&                           ) { artifact = art ; break ; } } if ( artifact == null ) { throw new MojoExecutionException ( "The artifact " +      + " referenced in aspectj plugin as " + role + ", is not found the project dependencies" ) ; } if (      != 0 ) {         ; }               ; } } if (      > 0 ) { String pathString =      ;       ;                 ; } }<CODESPLIT>Finds all artifacts in the weavemodule property and adds them to the ajc options .
public static String extractAeroGearSenderInformation ( final HttpServletRequest request ) { String client =       ; if (     ) { return client ; } return       ; }<CODESPLIT>Reads the aerogear - sender header to check if an AeroGear Sender client was used . If the header value is NULL the value of the standard user - agent header is returned
public Flux < ServiceMessage > requestMany ( ServiceMessage request , Class < ? > responseType , Address address ) { return                                                                           ; }<CODESPLIT>Given an address issues request to remote service which returns stream of service messages back .
public void incrementalRestore ( File incrementalBackupFile ) throws FileNotFoundException , IOException , ClassNotFoundException , RepositoryException { ObjectInputStream ois = null ; try { ois = new ObjectInputStream (       ) ; while ( true ) { TransactionChangesLog changesLog =     ;         ; ChangesLogIterator cli =      ; while (      ) { if (          == ExtendedEvent . LOCK ) {      ; } }     ; } } catch ( EOFException ioe ) { if (      ) {                ; } } }<CODESPLIT>Perform incremental restore operation .
public Key < Integer > start ( ) { final Key < Integer > object = new Key < Integer > ( ) ;                                                ; return object ; }<CODESPLIT>Initializes a byte counter on this channel .
public static boolean isElementPresent ( String locator ) {       ; boolean flag = false ; try { flag =       != null ; } catch ( NoSuchElementException e ) { }       ; return flag ; }<CODESPLIT>Checks if the provided element is present on the page based on the locator provided
public static void main ( String args [ ] ) throws Exception { final StringBuffer buffer = new StringBuffer ( "The lazy fox" ) ; Thread t1 = new Thread ( ) { public void run ( ) { synchronized ( buffer ) {         ;          ;         ; try {       ; } catch ( Exception e ) { }         ;         ; } } } ; Thread t2 = new Thread ( ) { public void run ( ) { try {       ; } catch ( Exception e ) { }           ;         ; } } ;      ;      ;      ;      ;         ; }<CODESPLIT>We have more input since wait started
protected double interpolate ( double boundA , double boundB ) { double alphaNew ; if (       ) { alphaNew =               ; } else { alphaNew =                 ; if (       ) alphaNew =               ; } double l , u ; if ( boundA < boundB ) { l = boundA ; u = boundB ; } else { l = boundB ; u = boundA ; } if ( alphaNew < l ) alphaNew = l ; else if ( alphaNew > u ) alphaNew = u ; return alphaNew ; }<CODESPLIT>Use either quadratic of cubic interpolation to guess the minimum .
private List < SemanticError > check ( DataType dataType ) {                ; final List < SemanticError > errors = new ArrayList < SemanticError > ( ) ; final Set < String > constructorNames = new HashSet < String > ( ) ; for ( Constructor constructor : dataType . constructors ) {                         ; if (        > 1 &&           ) {                     ;            ; } if (         ) {                            ;                ; } else {         ; }            ; } return errors ; }<CODESPLIT>Checks a data type for duplicate constructor names or constructors having the same name as the data type
@ SuppressWarnings ( { "unchecked" , "rawtypes" } ) protected void registerDependency ( List additionalList , GrailsPlugin plugin ) { if ( !           ) {           ;       ;       ; } }<CODESPLIT>Adds a plugin to the additional if this hasn t happened already
private JsonNode executeRequest ( HttpPost request ) throws IOException , GroovesharkException { HttpResponse response =       ; if ( debugLogging ) {       ; } String responsePayload =                       ; try { return           ; } catch ( JsonProcessingException e ) { throw new GroovesharkException . ServerErrorException ( "Failed to parse response - received data was not valid JSON: " + responsePayload ) ; } }<CODESPLIT>Boilerplate to send the request and parse the response payload as JSON .
public Map < String , T > parseMap ( JsonParser jsonParser ) throws IOException { HashMap < String , T > map = new HashMap < String , T > ( ) ; while (      != JsonToken . END_OBJECT ) { String key =      ;      ; if (      == JsonToken . VALUE_NULL ) {         ; } else {            ; } } return map ; }<CODESPLIT>Parse a map of objects from a JsonParser .
public DateFuncSup subtract ( DateSeperator d ) {                 ; return this ; }<CODESPLIT>subtract date on supported date
private double radicalInverse ( long i ) { double digit = 1.0 / ( double ) base ; double radical = digit ; double inverse = 0.0 ; while ( i > 0 ) { inverse += digit * ( double ) ( i % base ) ; digit *= radical ; i /= base ; } return inverse ; }<CODESPLIT>Compute the radical inverse of i .
public static String getTempDir ( ) { synchronized ( FileUtil . class ) { if ( TEMP_DIR == null ) { String tmpDir =       ; if (       ) { if (          ) { tmpDir = "/temp" ; } else { tmpDir = "/tmp" ; } } TEMP_DIR = tmpDir ; } } return TEMP_DIR ; }<CODESPLIT>Gets the default temp directory for the system .
public static < Accumulator , Value > Accumulator reduce ( List < Value > list , Accumulator init , ReduceClosure < Accumulator , Value > f ) { Accumulator accumulator = init ; for ( Value value : list ) { accumulator =         ; } return accumulator ; }<CODESPLIT>Applies a binary function between each element of the given list .
protected ProcessOutput executeProcess ( FaxJob faxJob , String command , FaxActionType faxActionType ) { if ( command == null ) {      ; } String updatedCommand = command ; if ( this . useWindowsCommandPrefix ) { StringBuilder buffer = new StringBuilder (      +        + 1 ) ;         ;        ;       ; updatedCommand =      ; } ProcessOutput processOutput =         ;         ;           ; return processOutput ; }<CODESPLIT>Executes the process and returns the output .
public ModelNode getConnector ( String name ) throws Exception { final Address address =                 ; return       ; }<CODESPLIT>Returns the connector node with all its attributes . Will be null if it doesn t exist .
int match ( CharsetDetector det , int [ ] commonChars ) { @ SuppressWarnings ( "unused" ) int singleByteCharCount = 0 ; int doubleByteCharCount = 0 ; int commonCharCount = 0 ; int badCharCount = 0 ; int totalCharCount = 0 ; int confidence = 0 ; iteratedChar iter = new iteratedChar ( ) ; detectBlock : { for (      ;       ; ) { totalCharCount ++ ; if ( iter . error ) { badCharCount ++ ; } else { long cv = iter . charValue & 0xFFFFFFFFL ; if ( cv <= 0xff ) { singleByteCharCount ++ ; } else { doubleByteCharCount ++ ; if ( commonChars != null ) { if (            >= 0 ) { commonCharCount ++ ; } } } } if ( badCharCount >= 2 && badCharCount * 5 >= doubleByteCharCount ) { break detectBlock ; } } if ( doubleByteCharCount <= 10 && badCharCount == 0 ) { if ( doubleByteCharCount == 0 && totalCharCount < 10 ) { confidence = 0 ; } else { confidence = 10 ; } break detectBlock ; } if ( doubleByteCharCount < 20 * badCharCount ) { confidence = 0 ; break detectBlock ; } if ( commonChars == null ) { confidence = 30 + doubleByteCharCount - 20 * badCharCount ; if ( confidence > 100 ) { confidence = 100 ; } } else { double maxVal =            ; double scaleFactor = 90.0 / maxVal ; confidence = ( int ) (         * scaleFactor + 10 ) ; confidence =         ; } } return confidence ; }<CODESPLIT>Test the match of this charset with the input text data which is obtained via the CharsetDetector object .
public static void extract ( DMatrix src , int srcY0 , int srcY1 , int srcX0 , int srcX1 , DMatrix dst ) {                  ;                   ; }<CODESPLIT>Extract where the destination is reshaped to match the extracted region
public void resizeEip ( ResizeEipRequest request ) {               ;               ; if (           ) {         ; } InternalRequest internalRequest =                 ;         ;             ;       ;         ; }<CODESPLIT>Resizing eip The Prepaid eip can not be downgrade . This is an asynchronous interface .
private void useNextAddressAsNewContactSeedBroker ( ) { if ( ++ currentContactSeedBrokerIndex == seedBrokerAddresses . length ) { currentContactSeedBrokerIndex = 0 ; } URL newContactUrl =          ; this . consumer = new SimpleConsumer (      ,      , soTimeout , bufferSize , dummyClientId ) ; }<CODESPLIT>Re - establish broker connection using the next available seed broker address .
private String unescape ( String value ) { StringBuilder result = new StringBuilder ( ) ; for ( int i = 0 ; i <      ; ++ i ) { char c =       ; if ( c == ESCAPE_PREFIX ) { String codeString =             ; int code =         ; if ( code < reservedChars . length && reservedChars [ code ] == code ) {          ; i += 2 ; } else { throw new ServiceLocationException ( "Unknown escaped character " + ESCAPE_PREFIX + codeString + " at position " + ( i + 1 ) + " of " + value , SLPError . PARSE_ERROR ) ; } } else {       ; } } return      ; }<CODESPLIT>Unescapes the scope string following RFC 2608 6 . 4 . 1
protected HashMap readFile ( HashMap brMap ) throws IOException { HashMap ret = new HashMap ( ) ; ArrayList < HashMap > expArr = new ArrayList < HashMap > ( ) ; HashMap < String , HashMap > files =     ; ArrayList < HashMap > obvData ; HashMap obv ; HashMap expData ; for ( String exname :      ) { obvData = ( ArrayList )            ; for ( HashMap obvSub : obvData ) { expData = new HashMap ( ) ; obv = new HashMap ( ) ;              ;              ;              ;         ;              ;       ; } } ArrayList idNames = new ArrayList ( ) ;       ;       ;         ; return ret ; }<CODESPLIT>DSSAT TFile Data input method for Controller using
public static FixedStringSearchInterpolator createInterpolator ( MojoParameters params , String filter ) { String [ ] delimiters =     ; if ( delimiters == null ) { return      ; } DockerAssemblyConfigurationSource configSource = new DockerAssemblyConfigurationSource ( params , null , null ) ; return                                                  ; }<CODESPLIT>Create an interpolator for the given maven parameters and filter configuration .
public static boolean isPartitionCleanupInProgress ( ZooKeeper zk ) throws KeeperException , InterruptedException { List < String > children =           ; List < ZKUtil . ChildrenCallback > childrenCallbacks =      ; for ( String child : children ) { ZKUtil . ChildrenCallback callback = new ZKUtil . ChildrenCallback ( ) ;                      ;       ; } for ( ZKUtil . ChildrenCallback callback : childrenCallbacks ) { if (          ) { return true ; } } return false ; }<CODESPLIT>Checks if the cluster suffered an aborted join or node shutdown and is still in the process of cleaning up .
private byte [ ] unifyLData ( final CEMI ldata , final boolean emptySrc , final List < Integer > types ) { final byte [ ] data ; if ( ldata instanceof CEMILDataEx ) { final CEMILDataEx ext = ( ( CEMILDataEx ) ldata ) ; final List < AddInfo > additionalInfo =      ; synchronized ( additionalInfo ) { for ( final Iterator < AddInfo > i =      ;      ; ) { final AddInfo info =      ; if ( !           ) {             ;      ; } } } } data =      ; data [ 0 ] = 0 ; data [ 1 + data [ 1 ] + 1 ] = 0 ; if ( emptySrc ) { data [ 1 + data [ 1 ] + 3 ] = 0 ; data [ 1 + data [ 1 ] + 4 ] = 0 ; } return data ; }<CODESPLIT>additional info . types provides the list of add . info types we want to keep everything else is removed
public static < T extends Number > int [ ] asArray ( final T ... array ) { int [ ] b = new int [ array . length ] ; for ( int i = 0 ; i < b . length ; i ++ ) { b [ i ] =         ; } return b ; }<CODESPLIT>Convert any number class to array of integer .
synchronized void setActiveChunkHandle ( SegmentHandle handle ) {                       ; SegmentChunk last =    ;                     ;                                  ; this . activeChunkHandle = handle ; }<CODESPLIT>Sets the Active SegmentChunk handle .
public String getEmptyValue ( ) { if ( Timex3Interval_Type . featOkTst && ( ( Timex3Interval_Type ) jcasType ) . casFeat_emptyValue == null )           ; return                  ; }<CODESPLIT>getter for emptyValue - gets
public static AccountInfo adaptAccountInfo ( BitstampBalance bitstampBalance , String userName ) { List < Balance > balances = new ArrayList < > ( ) ; for ( org . knowm . xchange . bitstamp . dto . account . BitstampBalance . Balance b :      ) { Balance xchangeBalance = new Balance (               ,      ,      ,      , ZERO , ZERO ,                        , ZERO ) ;       ; } return new AccountInfo ( userName ,      , new Wallet ( balances ) ) ; }<CODESPLIT>Adapts a BitstampBalance to an AccountInfo
public void afterConnectionClosed ( WebSocketSession session , CloseStatus status ) {                    ; }<CODESPLIT>Invoked after the web socket connection is closed . You can override this method in the child classes .
public static String trimLastPathSection ( String path ) { String [ ] sections =       ; StringBuilder newPath = new StringBuilder ( "/" ) ; for ( int i = 1 ; i < sections . length - 1 ; i ++ ) {               ; } return      ; }<CODESPLIT>Removes the last part of a file path .
public static Style red ( ) { final Style style = new Style ( ) ; style . color =         ; return style ; }<CODESPLIT>Default material red transparent style for SuperToasts .
public ManagedObjectContext createContext ( ) { Bean < T > bean = null ; EjbDescriptor < T > ejbDescriptor =    ; if ( !      ) { bean =    ; } WeldManager beanManager =    ; WeldCreationalContext < T > creationalContext =       ; ManagedObjectContext managedObjectContext = new CDIManagedObjectState ( creationalContext ) ; return managedObjectContext ; }<CODESPLIT>This version creates a ManagedObjectContext which contains a CreationalContext for an EJB .
public final void deleteOperation ( String name ) { DeleteOperationRequest request =               ;     ; }<CODESPLIT>Deletes a long - running operation . This method indicates that the client is no longer interested in the operation result . It does not cancel the operation . If the server doesn t support this method it returns google . rpc . Code . UNIMPLEMENTED .
public boolean isMember ( int x ) {           ; return 0 <= x && x < ( bits . length << wordshift ) && ( bits [ x >>> wordshift ] & ( 1 << ( x & wordmask ) ) ) != 0 ; }<CODESPLIT>Is x an element of this set?
public HandlerRegistration addSearchFinishHandler ( final SearchFinishEvent . SearchFinishHandler handler ) { return         ; }<CODESPLIT>This handler will be triggered when search is finish
public void setForeignBusSendAllowed ( boolean sendAllowed ) { if (      &&      ) {                ; } _sendAllowedOnTargetForeignBus =       ; if ( aliasesThatTargetThisDest != null ) { synchronized ( aliasesThatTargetThisDest ) { Iterator i =      ; while (      ) { AbstractAliasDestinationHandler abstractAliasDestinationHandler = ( AbstractAliasDestinationHandler )      ;       ; } } } if (      &&      ) {         ; } }<CODESPLIT>Set the Foreign Bus Level sendAllowed flag
public void processingInstruction ( String target , String data ) throws SAXException { if ( documentHandler != null )         ; }<CODESPLIT>Adapt a SAX2 processing instruction event .
public static Integer getFileSizeOnFTPServer ( String hostName , Integer port , String userName , String password , String filePath ) { Integer result = null ; String replyString =               ; if ( replyString == null || !        ) { throw new RuntimeException (                        ) ; } else { result =                       ; } return result ; }<CODESPLIT>Get size of the FTP file .
public static base_responses enable ( nitro_service client , String trapname [ ] ) throws Exception { base_responses result = null ; if ( trapname != null && trapname . length > 0 ) { snmpalarm enableresources [ ] = new snmpalarm [ trapname . length ] ; for ( int i = 0 ; i < trapname . length ; i ++ ) { enableresources [ i ] = new snmpalarm ( ) ; enableresources [ i ] . trapname = trapname [ i ] ; } result =         ; } return result ; }<CODESPLIT>Use this API to enable snmpalarm resources of given names .
public void ordered ( Consumer < T > action ) { TopoSorter < T > sorter = new TopoSorter < > ( this ) ;       ; }<CODESPLIT>Traverse this graph and performs the given action in topological order
public static SeqServerGroup parse ( String asg ) { int d1 =       ; int d2 =           ; int dN =       ; if ( dN < 0 || !       ) { dN =      ; } return new SeqServerGroup ( asg , d1 , d2 , dN ) ; }<CODESPLIT>Create a new instance of a server group object by parsing the group name .
private static int getMapCount ( int srcCount , int numNodes ) { int numMaps = ( int ) ( srcCount / OP_PER_MAP ) ; numMaps =           ; return         ; }<CODESPLIT>Calculate how many maps to run .
protected void channelRead0 ( ChannelHandlerContext ctx , FullBinaryMemcacheResponse msg ) throws Exception { switch (      ) { case SUCCESS :      ;           ;      ; break ; case ACCESS_ERROR :                ; break ; case NOTFOUND_ERROR :                 ; break ; default :                     ; } }<CODESPLIT>Handles incoming Select bucket responses .
private final DiceNotationExpression unwrap ( final DiceNotationExpression expression ) { final DiceNotationExpression result ; if ( expression instanceof ExpressionWrapper ) { result =           ; } else { result = expression ; } return result ; }<CODESPLIT>Removes the expression wrappers used to temporally prune the nodes .
public static float [ ] checkArrayElementsInRange ( float [ ] value , float lower , float upper , String valueName ) {             ; for ( int i = 0 ; i < value . length ; ++ i ) { float v = value [ i ] ; if (       ) { throw new IllegalArgumentException ( valueName + "[" + i + "] must not be NaN" ) ; } else if ( v < lower ) { throw new IllegalArgumentException (                        ) ; } else if ( v > upper ) { throw new IllegalArgumentException (                        ) ; } } return value ; }<CODESPLIT>Ensures that all elements in the argument floating point array are within the inclusive range
public static void copy ( InputStream inputStream , OutputStream outputStream ) throws IOException {         ; }<CODESPLIT>Writes the content provided by the given source input stream into the given destination output stream .
private static Collection < Tuple > getTuples ( List < VarDef > varDefs , int varStart , int varEnd , int tupleSize ) { Collection < Tuple > tuples = new ArrayList < Tuple > ( ) ; for ( int i = varStart ; i < varEnd ; i ++ ) { VarDef nextVar =       ; Iterator < VarValueDef > values =      ; if ( !      ) { throw new IllegalStateException ( "Can't complete tuples -- no valid values defined for var=" + nextVar ) ; } Collection < Tuple > subTuples = tupleSize == 1 ? null :                 ; if ( subTuples == null ) { while (      ) {                     ; } } else if ( !      ) { while (      ) { VarBindingDef nextBinding = new VarBindingDef ( nextVar ,      ) ; for ( Tuple subTuple : subTuples ) { Tuple nextTuple =           ; if (      ) {       ; } } } } } return tuples ; }<CODESPLIT>Returns all valid tuples of values for the given input variables .
public V get ( K key ) { final int hash =     ; final int slot =     ; for ( Entry < K , V > entry = table [ slot ] ; entry != null ; entry = entry . next ) { if ( entry . hashCode == hash &&         ) { return entry . value ; } } return null ; }<CODESPLIT>Looks up the value mapped under the given key . Returns null if no value is mapped under this key .
public boolean validSecondFactor ( String secret , String number ) {               ;               ; return         ; }<CODESPLIT>Checks if a given number for 2FA is valid for the given secret
protected void updateOutgoingEdgesStateDL ( int currS , int currL , int prevS , int prevL , Emissions emission ) {                         ;                         ; }<CODESPLIT>Enumerates the possible transitions into state DL .
public void setPrefix ( String key , String prefix ) { PdfName fieldname = new PdfName ( key ) ; PdfObject o =     ; if ( o == null ) throw new IllegalArgumentException ( "You must set a value before adding a prefix." ) ; PdfDictionary dict = new PdfDictionary ( PdfName . COLLECTIONSUBITEM ) ;           ;                   ;       ; }<CODESPLIT>Adds a prefix for the Collection item . You can only use this method after you have set the value of the item .
protected AbstractExpression replaceExpressionsWithPve ( AbstractExpression expr ) { assert ( expr != null ) ; if ( expr instanceof TupleValueExpression ) { int paramIdx =      ; ParameterValueExpression pve = new ParameterValueExpression ( paramIdx , expr ) ;         ; return pve ; } if ( expr instanceof AggregateExpression ) { int paramIdx =      ; ParameterValueExpression pve = new ParameterValueExpression ( paramIdx , expr ) ; List < TupleValueExpression > tves =       ; assert ( m_parentStmt != null ) ; for ( TupleValueExpression tve : tves ) { int origId =      ; if ( m_stmtId != origId && m_parentStmt . m_stmtId != origId ) { throw new PlanningErrorException ( "Subqueries do not support aggregation of parent statement columns" ) ; } }         ; return pve ; } if (      != null ) {              ; } if (      != null ) {              ; } if (      != null ) { List < AbstractExpression > newArgs = new ArrayList < > ( ) ; for ( AbstractExpression argument :      ) {          ; }       ; } return expr ; }<CODESPLIT>Helper method to replace all TVEs and aggregated expressions with the corresponding PVEs . The original expressions are placed into the map to be propagated to the EE . The key to the map is the parameter index .
private static boolean addCallback ( String applicationId , DelayedCallback callback ) { boolean isFirst = false ; List < DelayedCallback > list =       ; if ( null == list ) { list = new ArrayList < DelayedCallback > ( ) ;         ; isFirst = true ; }       ; return isFirst ; }<CODESPLIT>Add a delayed callback for the given application id . Returns whether this is the first request for the application id .
public static byte [ ] gunzipBytes ( byte [ ] compressedBytes ) throws IOException { ByteArrayOutputStream bos = new ByteArrayOutputStream ( ( int ) ( compressedBytes . length * 1.5 ) ) ; InflaterOutputStream dos = new InflaterOutputStream ( bos ) ;       ;      ; return      ; }<CODESPLIT>to avoid linking all that jazz into the client code
public TupleValueExpression getOutputExpression ( int index ) { SchemaColumn schemaCol =     ; TupleValueExpression tve = new TupleValueExpression (    ,    ,      ,      , index ) ; return tve ; }<CODESPLIT>Produce a tuple value expression for a column produced by this subquery
