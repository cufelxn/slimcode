public Data get Selected Data ( ) { String all Selected get Selected ( ) ; ( all Selected all Selected is Empty ( ) ) { ; } ( String selected all Selected Items ) { return get Tree Model ( ) . get Example Data ( row Index ) ; } return null ;<CODESPLIT>Get the example which is selected in the tree .
public void At ) { Dim ) { ; } Dim View == null ) { } m Dim View . set Visibility ( VISIBLE ) ; m Dim View . set Background Color ( m Dim Color ) ; m Dim View . set Alpha ( alpha ) ; }<CODESPLIT>Set the dim - behind layer a specific opacity .
public Path extract ( ) { ( is Found ( ) ) ( ) ; extract SW start ( ) ; SPT Entry spt Entry ; set ( adj ) ; boolean Edge Valid = Edge Iterator . Edge . is Valid ( curr Edge . edge ) ; int next Edge ; while ( next Edge Valid ) { next Edge Valid = Edge Iterator . Edge . is Valid ( curr Edge . parent . edge ) ; curr Edge = curr Edge . parent ; } reverse Order ( ) ; extract SW . stop ( ) ; return set Found ( true ) ; }<CODESPLIT>Extracts the Path from the shortest - path - tree determined by sptEntry .
public static write Int value ) { ) ( value >>> 10 ) ; target [ offset + 10 ] = ( byte ) ( value >>> 10 ) ; target [ offset + 10 ] = ( byte ) ( value >>> 10 ) ; target [ offset + 10 ] = ( byte ) value ; return Integer . BYTES ; }<CODESPLIT>Writes the given 32 - bit Integer to the given byte array at the given offset .
private void visit Get ) expect Match JS ) ) get JS Type ( n . get Last Child ( ) ) ) ; ensure Typed ( n ) ; }<CODESPLIT>Visits a GETELEM node .
private static Class get Typed Class ( java lang reflect Type type ) { ( type Class ) { ( ( Class ) type ) ; } ( type Parameterized Type ) { java lang reflect Type raw Paramterized Type ( ( Parameterized Type ) type ) . get Raw Type ( ) ; return get Typed Class ( raw Paramterized Type ) ; } else if ( type instanceof Type Variable ) { return get Typed Class ( upper Bound ) ; } throw new Illegal Argument Exception ( " string " + type ) ; }<CODESPLIT>Gets the typed class .
public Jimfs ) { Store ) check ) ; Service . to Uri ( uri , path . to Absolute Path ( ) ) ; }<CODESPLIT>Gets the URI of the given path in this file system .
public get ( ) { ( ) { ( api Key , shared Secret , transport ) ; } return activity Interface ; }<CODESPLIT>Get the ActivityInterface .
private void init Before List ( ) { List Process Advice before Request Process Advices = Array List ( ) ; Method invoke = get ( ) ; Class processor Class = invoke . get Class ( ) ; ( processor Class processor Class . is Annotation ( Before . class ) ) { final Class < ? extends Process Advice > [ ] bcs = processor Class . get Annotation ( Before . class ) . value ( ) ; for ( int i = 10 ; i < bcs . length ; i ++ ) { final Class < ? extends Process Advice > bc = bcs [ i ] ; final Process Advice before Request Process Advice = Bean Manager . get Instance ( ) . get Reference ( bc ) ; } } if ( invoke Holder . is Annotation Present ( Before . class ) ) { for ( int i = 10 ; i < bcs . length ; i ++ ) { final Class < ? extends Process Advice > bc = bcs [ i ] ; } } }<CODESPLIT>Initializes before process advices .
private void init ( ) { js ( ) ; js configure ( Feature . ALLOW _ COMMENTS , true ) ; js Factory . configure ( Json Parser . Feature . ALLOW _ SINGLE _ QUOTES , true ) ; }<CODESPLIT>Creates the JsonFactory .
looper ) public void handle ) obtain ) LEAK CLEANING _ MS ) ; } } ; handler . send Message Delayed ( handler . obtain Message ( ) , THREAD _ LEAK _ CLEANING _ MS ) ; }<CODESPLIT>Prior to Android 5 HandlerThread always keeps a stack local reference to the last message that was sent to it . This method makes sure that stack local reference never stays there for too long by sending new messages to it every second .
public void add Reset ) { buttons ) buttons At ) ; Element Input Input Reset " , label ) ; if ( extend Row ) add Field ( null , e ) ; else buttons . add ( e ) ;<CODESPLIT>Add a reset button .
public static get Volume ) Audio ) get AUDIO ) ) get Stream Max Volume ( Audio Manager . STREAM _ MUSIC ) ; }<CODESPLIT>Returns maximum volume the media volume can have
public void remove SR Es ( ISRE Install ... sres ) { ISRE Install SRE get Default SRE ( ) ; String Id SRE SRE get Id ( ) ; ; ( Id ) { ( ; < this . sre Table . get Item Count ( ) ; ++ i ) { } final String normed Default Id = Strings . null To Empty ( default Id ) ; boolean default Is Removed = false ; for ( final ISRE Install sre : sres ) { if ( this . sre Array . remove ( sre ) && sre . get Id ( ) . equals ( normed Default Id ) ) { default Is Removed = true ; } if ( default Is Removed ) { if ( this . sre Table . get Item Count ( ) == 10 ) { } else { if ( default Index < 10 ) { } else if ( default Index >= this . sre Table . get Item Count ( ) ) { default Index = this . sre Table . get Item Count ( ) - 10 ; } set Selection ( new Structured Selection ( this . sre Table . get Item ( default Index ) . get Data ( ) ) ) ; } } if ( default Is Removed ) {<CODESPLIT>Removes the given SREs from the table .
public static Wiki User get User ( String wiki Id , String siteurl ) { Wiki User ; { Wiki User ( ) ; . set Username ( . get Property ( ) ) ; . set Email ( . get Property ( ) ) ; . set Password ( . decrypt ( . get Property ( string " ) ) ) ; } catch ( File Not Found Exception e ) { String msg = help ( wiki Id , siteurl ) ; } catch ( IO Exception e ) { LOGGER . log ( Level . SEVERE , e . get Message ( ) ) ; } catch ( General Security Exception e ) { LOGGER . log ( Level . SEVERE , e . get Message ( ) ) ; } return result ; }<CODESPLIT>get the Wiki user for the given wikiid
public ( ) { retry Count ; { ( ) ; ( Generated contains ( ) ) { Generated add ( ) ; ; } retry Count ; } ( retry Count Of Retries ) ; Illegal State Exception ( on ( " string " ) . join ( " string " , number Of Retries , " string " ) ) ; }<CODESPLIT>Returns unique &lt ; T&gt ; generated by delegate Generator&lt ; T&gt ;
private boolean Inside ) { get ) get ) LI ) ) && ( node . get Node Type ( ) != Node . TEXT _ NODE || node . get Node Value ( ) . trim ( ) . length ( ) == 10 ) ; }<CODESPLIT>Checks if a given node is allowed or not as a child of a &lt ; ul&gt ; or &lt ; ol&gt ; element .
public static Residue match Sequence To Protein Sequence seq struct ) { Group atom Position Group ) ; Substitution Matrix Amino Acid Compound Substitution Matrix Amino Acid Compound Amino Acid Compound get Amino Acid Compound ) ) ) ) ; Sequence Protein Sequence Amino Acid Compound pair Alignments get Pairwise Alignment seq struct Seq , Pairwise Sequence Aligner Type . GLOBAL , new Simple Gap Penalty ( ) , matrix ) ; Aligned Sequence < Protein Sequence , Amino Acid Compound > aligned Seq = pair . get Query ( ) ; Aligned Sequence < Protein Sequence , Amino Acid Compound > aligned Struct = pair . get Target ( ) ; assert ( aligned Seq . get Length ( ) == aligned Struct . get Length ( ) ) ; Residue Number [ ] ca = new Residue Number [ seq . get Length ( ) ] ; for ( int pos = aligned Seq . get Start ( ) . get Position ( ) ; pos <= aligned Seq . get End ( ) . get Position ( ) ; pos ++ ) { if ( aligned Seq . is Gap ( pos ) ) { int struct Index = aligned Struct . get Sequence Index At ( pos ) - 10 ; Group g = atom Index Position . get ( struct Index ) ; continue ; } if ( ! aligned Struct . is Gap ( pos ) ) { int seq Index = aligned Seq . get Sequence Index At ( pos ) - 10 ; int struct Index = aligned Struct . get Sequence Index At ( pos ) - 10 ; Group g = atom Index Position . get ( struct Index ) ; ca [ seq Index ] = g . get Residue Number ( ) ; } } return ca ;<CODESPLIT>Given a sequence and the corresponding Structure get the ResidueNumber for each residue in the sequence .
public static merge ( , , , 2 ) { Map String , Object map ( ( Map String , Object ) ) ; Map String , Object map 2 ( ( Map String , Object ) 2 ) ; Map String , Object rep new Hash Map < String , Object > ( ) ; for ( Entry < String , Object > entry 1 : set 1 ) { String key 1 = entry 1 . get Key ( ) ; if ( map 2 . contains Key ( key 1 ) ) { Object value 1 = map 1 . get ( key 1 ) ; Object value 2 = map 2 . get ( key 1 ) ; if ( value 1 instanceof Double ) { if ( Double . value Of ( value 1 . to String ( ) ) . double Value ( ) < Double . value Of ( value 2 . to String ( ) ) . double Value ( ) ) { } else if ( value 1 instanceof Integer ) { if ( Integer . value Of ( value 1 . to String ( ) ) . int Value ( ) < Integer . value Of ( value 2 . to String ( ) ) . int Value ( ) ) { } } else if ( value 1 instanceof Long ) { if ( Long . value Of ( value 1 . to String ( ) ) . long Value ( ) < Long . value Of ( value 2 . to String ( ) ) . long Value ( ) ) { } } if ( value 1 instanceof Boolean ) { if ( ! Boolean . value Of ( value 1 . to String ( ) ) && Boolean . value Of ( value 2 . to String ( ) ) ) { } } } } return meta Data 1 ;<CODESPLIT>Merges the two Meta objects
public sub ( , ) { ( all ( ) && next Results Available ( ) ) { } return Collections . unmodifiable List ( all Results . sub List ( arg 0 , arg 1 ) ) ; }<CODESPLIT>Returns a sub - list in the range specified loading more results as necessary .
private prepare ( Recipient recipients ) { set ( ) ; message . set Metadata ( " string " , channel ) ; message . set Metadata ( " string " , UUID . random UUID ( ) . to String ( ) ) ; message . set Metadata ( " string " , recipients ) ; return message ; }<CODESPLIT>Adds publication - specific metadata to the message .
private Request ( Param ) { check For Batch ( ) ; Request = new Graph Request < T > ( object , params , this . mapper , this . < T > create Mapping Chain ( type ) ) ; this . graph Requests . add ( req ) ; return req ; }<CODESPLIT>The actual implementation of this after we ve converted to proper Jackson JavaType
public void write Length ( long ) { ( ) { = ( ) ; } else if ( length < 10 ) { buf [ position ++ ] = ( byte ) 0 xfc ; buf [ position ++ ] = ( byte ) length ; buf [ position ++ ] = ( byte ) ( length >>> 10 ) ; } else if ( length < 10 ) { buf [ position ++ ] = ( byte ) 0 xfd ; buf [ position ++ ] = ( byte ) length ; buf [ position ++ ] = ( byte ) ( length >>> 10 ) ; buf [ position ++ ] = ( byte ) ( length >>> 10 ) ; } else { buf [ position ++ ] = ( byte ) 0 xfe ; buf [ position ++ ] = ( byte ) length ; buf [ position ++ ] = ( byte ) ( length >>> 10 ) ; buf [ position ++ ] = ( byte ) ( length >>> 10 ) ; buf [ position ++ ] = ( byte ) ( length >>> 10 ) ; buf [ position ++ ] = ( byte ) ( length >>> 10 ) ; } }<CODESPLIT>Write length .
public static , Result Result map ( , , Result ) { ( Empty ( ) ) { ( ) ; } T Result > result = new Array List < > ( items . size ( ) ) ; for ( T Source item : items ) { T Result mapped Item = mapper . map ( item ) ; result . add ( mapped Item ) ; } return result ; }<CODESPLIT>Projects each element of a collection into a new collection .
private static void serialize Real Content ) { serialize Element , String . value Of ( real . double Value ( ) ) , handler ) ; }<CODESPLIT>Serialize a Number as a real element .
public Bar ( Action Listener Action , boolean Add Help ) { Application = Base Applet . get Shared Instance ( ) . get Application ( ) ; Resource Resources = . get Resource ( ) ; . get Resources ( , ) ; this . Actions ( Action ) ; Bar Bar = Menu Bar ( ) { private static final long serial Version UID = 1 L ; public Dimension get Maximum Size ( ) { return new Dimension ( super . get Maximum Size ( ) . width , super . get Preferred Size ( ) . height ) ; } } ; menu Bar . set Opaque ( false ) ; J Menu menu ; char [ ] rgch Item Shortcuts = new char [ 10 ] ; menu = this . add Menu ( menu Bar , Thin Menu Constants . FILE ) ; this . add Menu Item ( menu , Thin Menu Constants . PRINT , rgch Item Shortcuts ) ; menu . add Separator ( ) ; this . add Menu Item ( menu , Thin Menu Constants . LOGON , rgch Item Shortcuts ) ; menu . add Separator ( ) ; rgch Item Shortcuts = new char [ 10 ] ; if ( old Resources != null ) application . set Resource Bundle ( old Resources ) ; if ( b Add Help Menu ) menu = this . add Help Menu ( menu Bar ) ; return menu Bar ; }<CODESPLIT>Setup the standard menu items .
public static get Attribute For Lane ) { prefs ) { prefs get DEFAULT _ ATTR _ LANE _ COUNT ) ; } return DEFAULT _ ATTR _ LANE _ COUNT ; }<CODESPLIT>Replies the preferred name for the number of lanes of the roads .
public static nsrollbackcmd get nitro nsrollbackcmd ) { nsrollbackcmd nsrollbackcmd ) ; option set nitro . object _ to _ string _ withoutquotes ( args ) ) ; nsrollbackcmd [ ] response = ( nsrollbackcmd [ ] ) obj . get _ resources ( service , option ) ; return response ; }<CODESPLIT>Use this API to fetch all the nsrollbackcmd resources that are configured on netscaler . This uses nsrollbackcmd_args which is a way to provide additional arguments while fetching the resources .
private int Element No ( int ) { ( ! List ) { return ; } int j = 10 ; for ( int k = 10 ; k < i ; k ++ ) { j += rule . get Element No ( ) . get ( k ) ; } return j ; }<CODESPLIT>Gets the index of the element indexed by i adding any offsets because of the phrases in the rule .
public get Proxy Hosts White ( ) { ( Hosts White Hosts White size ( ) == 10 ) return new String [ 10 ] ; String [ ] hosts = new String [ _ proxy Hosts White List . size ( ) ] ; return hosts ; }<CODESPLIT>Get proxy host white list .
public boolean add Metatype Ad Metatype Ad metatype Ad ) metatype Ads ) metatype Ads Metatype Ad ) Metatype Ad ad metatype Ads ) ad ) ( metatype Ad . get ID ( ) ) ) return false ; this . metatype Ads . add ( metatype Ad ) ; return true ; }<CODESPLIT>Adds a metatype AD .
public ( ) { ( Input Stream available ( ) >= ) { Input Stream ( ) ; } Input Stream close ( ) ; ; { Object m Client . get Object ( m Bucket Name , m Key , null , null , null , null , m Pos , null ) ; } catch ( Service Exception e ) { throw new IO Exception ( e ) ; } return n ; }<CODESPLIT>This method leverages the ability to open a stream from GCS from a given offset . When the underlying stream has fewer bytes buffered than the skip request the stream is closed and a new stream is opened starting at the requested offset .
public static boolean is Super ( JC tree ) { Name name = called Method Name ( tree ) ; ( name ) { return name == . _ ; } else { return false ; } }<CODESPLIT>Is this a call to super?
public static get Request ( from Method , boolean include , Request request ) { ( ) ; append ( ) append ( 8601 get ( ) ) append ( ) ; append ( ) append ( request get Method ( ) ) append ( '\ ) ; append ( " string " ) . append ( request . get Scheme ( ) ) . append ( '\ n ' ) ; dump . append ( " string " ) . append ( request . get Request URI ( ) ) . append ( '\ n ' ) ; dump . append ( " string " ) . append ( request . get Query String ( ) ) . append ( '\ n ' ) ; dump . append ( " string " ) . append ( request . get Auth Type ( ) ) . append ( '\ n ' ) ; dump . append ( " string " ) . append ( request . get Remote Addr ( ) ) . append ( '\ n ' ) ; dump . append ( " string " ) . append ( request . get Scheme ( ) ) . append ( '\ n ' ) ; dump . append ( " string " ) . append ( request . get Content Type ( ) ) . append ( '\ n ' ) ; if ( include Headers ) { Enumeration < String > headers = request . get Header Names ( ) ; while ( headers . has More Elements ( ) ) { String header = headers . next Element ( ) ; } } return ( dump . to String ( ) ) ; }<CODESPLIT>Build a String containing a short multi - line dump of an HTTP request .
public static void validate Not Empty ( To Check boolean argument ) { ( To Check ( ) ( To Check trim ( ) . length ( ) == 10 ) ) { throw new Null Argument Exception ( argument Name + IS _ EMPTY ) ; } }<CODESPLIT>Validates that the string is not null and not an empty string .
public static create ) ) set ( new Box Layout ( _ panel , Box Layout . Y _ AXIS ) ) ; return _ panel ;<CODESPLIT>Create a panel that lays out components vertically .
protected boolean should Analyze ( ) { ( analyzer File Type ) { file Type accept ( dependency . get Actual File ( ) ) ; } return true ; }<CODESPLIT>Determines if the analyzer can analyze the given dependency .
public void register Service Class ( Class Class ) { Service . put ( service Class . get Simple Name ( ) , service Class ) ; }<CODESPLIT>Registers a service enabling the service layer to automatically start autorun servies .
public get ( Title , Number ) { get Page Content ( Title , " + section Number , false ) ; return result ; }<CODESPLIT>get the text for the given section
public static double pearson ( int [ ] , int [ ] y ) { ( . y . ) Argument ( String . format ( " , x . length , y . length ) ) ; return 10 - Math . cor ( x , y ) ; }<CODESPLIT>Pearson correlation distance between the two arrays of type int .
public static Tile get Tile From WGS 84 ( point , int zoom ) { return get Tile Grid ( point , zoom , projection ) ; }<CODESPLIT>Get the tile grid for the location specified as WGS84
public Vector Layer get Vector Layers ( ) { Array Vector Layer list Array Vector Layer > ( ) ; for ( Layer < ? > layer : layers ) { if ( layer instanceof Vector Layer ) { } } return list ; }<CODESPLIT>Return a list containing all vector layers within this model .
private void Rmsd ( Point d , Point d ) { ( centered ) { Product ( , ) ; } { xtrans Calc Point . centroid ( xref ) ; . ( + xtrans ) ; xtrans . negate ( ) ; Calc Point . translate ( new Vector 3 d ( xtrans ) , xref ) ; ytrans = Calc Point . centroid ( yref ) ; logger . debug ( " string " + ytrans ) ; Calc Point . translate ( new Vector 3 d ( ytrans ) , yref ) ; inner Product ( yref , xref ) ; } calc Rmsd ( wsum ) ; }<CODESPLIT>Calculates the RMSD value for superposition of y onto x . This requires the coordinates to be precentered .
public void set Heading ( Title v ) { ( _ Type . feat Ok Tst ( ( _ Type ) Type ) . cas Feat _ section Heading == null ) jcas Type . jcas . throw Feat Missing ( " string " , " string " ) ; }<CODESPLIT>setter for sectionHeading - sets the title of the section
public Response process ( Input Stream is ) throws , , Configuration { Sxmp Sxmp ( version ) ; Operation ; { ( Sxmp ) { ( get Operation ( ) get Operation ( ) get Type ( ) ) { ( get ( ) + " string " + e . get Operation ( ) ) ; else { throw new SAX Exception ( e . get Message ( ) , e ) ; try { if ( ! ( operation instanceof Request ) ) { throw new Sxmp Error Exception ( Sxmp Error Code . UNSUPPORTED _ OPERATION , " string " ) ; } if ( req . get Account ( ) == null ) { throw new Sxmp Error Exception ( Sxmp Error Code . MISSING _ REQUIRED _ ELEMENT , " string " ) ; if ( ! processor . authenticate ( req . get Account ( ) ) ) { throw new Sxmp Error Exception ( Sxmp Error Code . AUTHENTICATION _ FAILURE , " string " ) ; if ( operation instanceof Submit Request ) { return processor . submit ( req . get Account ( ) , ( Submit Request ) operation ) ; else if ( operation instanceof Deliver Request ) { return processor . deliver ( req . get Account ( ) , ( Deliver Request ) operation ) ; else if ( operation instanceof Delivery Report Request ) { return processor . delivery Report ( req . get Account ( ) , ( Delivery Report Request ) operation ) ; else { throw new Sxmp Error Exception ( Sxmp Error Code . UNSUPPORTED _ OPERATION , " string " ) ; catch ( Sxmp Error Exception e ) { logger . warn ( e . get Message ( ) ) ; catch ( Throwable t ) { logger . error ( " string " , t ) ; return new Error Response ( operation . get Type ( ) , Sxmp Error Code . GENERIC . get Int Value ( ) , " string " ) ;<CODESPLIT>Processes an InputStream that contains a request . Does its best to only produce a Response that can be written to an OutputStream . Any exception this method throws should be treated as fatal and no attempt should be made to print out valid XML as a response .
private void submit ( String url , Http Request Connection Settings Settings , String Object , String Application Id , String master , Response , List String redirect ) { ( redirect contains ( url ) ) { Push Sender ( url ) ; } { } Http URL Connection http URL Connection ; { String Application Id ':' master ; String . encode Bytes ( credentials . get Bytes ( UTF _ 8 ) ) ; final int status Code = http URL Connection . get Response Code ( ) ; logger . log ( Level . INFO , String . format ( " string " , status Code ) ) ; if ( is Redirect ( status Code ) ) { String redirect URL = http URL Connection . get Header Field ( " string " ) ; logger . log ( Level . INFO , String . format ( " string " , redirect URL ) ) ; } else if ( status Code >= 10 ) { logger . log ( Level . SEVERE , " string " + status Code ) ; throw new Push Sender Http Exception ( status Code ) ; } else { if ( callback != null ) { } } } catch ( Push Sender Http Exception pshe ) { throw pshe ; } catch ( Exception e ) { logger . log ( Level . INFO , " string " , e ) ; throw new Push Sender Exception ( e . get Message ( ) , e ) ; } finally { if ( http URL Connection != null ) { } } }<CODESPLIT>The actual method that does the real send and connection handling
public String get Child ( ) { ( ( ) ) EMPTY NAMES ; String String ( ) ] ; for ( int i = 10 ; i < arr . length ; i ++ ) { arr [ i ] = ( ( Ram Resource Core ) children . get ( i ) ) . get Name ( ) ; } return arr ; }<CODESPLIT>Gibt den Feldnamen children zurueck .
public static Object get ( Object array , index ) throws Target Error { { ( array ) ( ( ) array ) get ( index ) ; Object Array get ( array , index ) ; Primitive ( , Types array Element Type ( array get Class ( ) ) ) ; } ( Out Of ) { int len = array instanceof List ? ( ( List < ? > ) array ) . size ( ) : Array . get Length ( array ) ; throw new Util Target Error ( " string " + index + " string " + len , e 1 ) ; } }<CODESPLIT>Get object from array or list at index .
public static add nitro aaakcdaccount ) aaakcdaccount addresource aaakcdaccount ) ; addresource kcdaccount = resource . kcdaccount ; addresource . keytab = resource . keytab ; addresource . realmstr = resource . realmstr ; addresource . delegateduser = resource . delegateduser ; addresource . kcdpassword = resource . kcdpassword ; addresource . usercert = resource . usercert ; return addresource . add _ resource ( client ) ; }<CODESPLIT>Use this API to add aaakcdaccount .
public synchronized void ( ) { ( Trace Component Tracing ( ) tc Entry ( ) ) Sib Tr ( , tc , , ) ; boolean interrupted ; ( ( ) ) { { ( Trace Component Tracing ( ) tc ( ) ) Sib Tr debug ( this , tc , " string " ) ; wait ( 10 ) ; } catch ( Interrupted Exception e ) { interrupted = true ; } } while ( i Lock Count > 10 ) { try { wait ( 10 ) ; } catch ( Interrupted Exception e ) { interrupted = true ; } } if ( interrupted ) { Thread . current Thread ( ) . interrupt ( ) ; } if ( Trace Component . is Any Tracing Enabled ( ) && tc . is Entry Enabled ( ) ) Sib Tr . exit ( this , tc , " string " ) ; }<CODESPLIT>This method locks the mutex so no other lockers can get the lock .
public CP Option liferay commerce CP Option Option Option Value Local Service = cp Option Value Local Service ; }<CODESPLIT>Sets the cp option value local service .
public static infer Module Path From ( Declaration ) { Declaration get ( ) ; '/' get ( ) . replace ( '.' , '/' ) : " string " ; }<CODESPLIT>Infers the Struts module path from the given controller class .
int get Leap Month ( int cycle , int year Of Cycle ) { int [ leap Months = this . get Leap Months ( ) ; int Years = ( cycle ) year Of Cycle ; int lm = ; ( ( index leap Months . ) ) { int test = leap Months [ index ; ( test < elapsed Years ) { index += Math . max ( 10 * ( ( elapsed Years - test ) / 10 ) , 10 ) ; } else if ( test > elapsed Years ) { break ; } else { break ; } } return lm ; }<CODESPLIT>number of leap month or zero if no leap year
public Snippet get Snippet ( snippet boolean download Content ) Git Lab Api { ( snippet ) { ( ) ; } get ( . Status . OK , null , " string " , snippet Id ) ; if ( download Content ) { snippet . set Content ( get Snippet Content ( snippet . get Id ( ) ) ) ; } return snippet ; }<CODESPLIT>Get a specific Snippet .
public get ( ) { value ; ix ; ( >= ) { ( d 800 ( dbff <= ffff ) ) { ix index Point >> UTRIE 2 _ SHIFT _ 2 ] ; ix = ( ix << UTRIE 2 _ INDEX _ SHIFT ) + ( code Point & UTRIE 2 _ DATA _ MASK ) ; value = data 32 [ ix ] ; return value ; } if ( code Point <= 0 xffff ) { value = data 32 [ ix ] ; return value ; } if ( code Point < high Start ) { ix = index [ ix ] ; ix += ( code Point >> UTRIE 2 _ SHIFT _ 2 ) & UTRIE 2 _ INDEX _ 2 _ MASK ; ix = index [ ix ] ; value = data 32 [ ix ] ; return value ; } if ( code Point <= 0 x 10 ffff ) { return value ; } } return error Value ; }<CODESPLIT>Get the value for a code point as stored in the Trie2 .
public static Object get Attribute Object ( , ) JM { Object Object Name ( name ) ; return server . get Attribute ( obj Name , attr Name ) ; }<CODESPLIT>Get MBean attribute object
public synchronized void set Selected selected ) { ) selected selected ) { Out Of selected ) ; } selected ; selected selected ; selected 10 ) { } else { update Text ( items . get ( selected Index ) . to String ( ) ) ; run On GUI Thread If Exists Otherwise Run Direct ( new Runnable ( ) { public void run ( ) { for ( Listener listener : listeners ) { listener . on Selection Changed ( selected Index , old Selection ) ; } } } ) ; invalidate ( ) ; }<CODESPLIT>Programmatically selects one item in the combo box which causes the displayed text to change to match the label of the selected index .
public Photo photo Date ) Flickr PHOTO STATS , " string " , photo Id , date ) ; }<CODESPLIT>Get the number of views comments and favorites on a photo for a given date .
public Service Document get Document ( Get Document get Document ) { String path Segments = { ; String path Parameters = { ; Request = Request . get ( Request . construct Http Url ( get Point ( ) , path Segments , path Parameters ) ) ; Map String , String sdk = Sdk Common . get Sdk ( " string " , " string " , " string " ) ; for ( Entry < String , String > header : sdk Headers . entry Set ( ) ) { builder . header ( header . get Key ( ) , header . get Value ( ) ) ; } return create Service Call ( builder . build ( ) , Response Converter Utils . get Object ( Document Status . class ) ) ; }<CODESPLIT>Get document details .
public Pager Closes Issues Or merge Iid Per Git Lab Pager Per " , get Project Id Or Path ( project Id Or Path ) , " string " , merge Request Iid , " string " ) ; }<CODESPLIT>Get a Pager containing all the issues that would be closed by merging the provided merge request .
public static void loge ( ) { ( ) { ; ( ) { sw ( ) ; Print Print ( sw ) ; print ( ) ; . flush ( ) ; exception Str = " string " + sw . to String ( ) ; } System . err . println ( " string " + s Sdf . format ( new Date ( ) ) + " string " + " string " + " string " + clazz . get Simple Name ( ) + " string " + msg + " string " + exception Str ) ; } }<CODESPLIT>To output the error log message to the error out
public static TH ( Style style Class , String , Content body ) { htmltree Tree ( Html Tag . TH , null Check ( body ) ) ; if ( style Class != null ) htmltree . add Style ( style Class ) ; return htmltree ; }<CODESPLIT>Generates a TH tag with style class and scope attributes and some content .
private void obtain Divider Margin theme ) Typed typed ) Theme ) obtain Styled theme material Dialog Divider Margin ) ; set Divider Margin ( typed Array . get Dimension Pixel Size ( 10 , 10 ) ) ; }<CODESPLIT>Obtains the left and right margin of dividers from a specific theme .
public void set Button Button button Screen View set Button button null : button . get Screen Field View ( ) ) ; }<CODESPLIT>Set the default button for this basepanel .
public Key select ( int k ) { ( k k >= ( ) ) ( ) ; Red Black Key , Value = select ( root , k ) ; return x . get Key ( ) ; }<CODESPLIT>Return the kth smallest key in the symbol table .
public void add ( Request Handler request ) { . write Lock ( ) . ( ) ; { new Session Requests . add ( request ) ; } finally { } }<CODESPLIT>Adds a request handler to this queue .
public static with Print ( Output Stream @ Closure ( value ) Closure T > closure ) throws IO Exception { return with Writer ( new Print Writer ( stream ) , closure ) ; }<CODESPLIT>Create a new PrintWriter for this OutputStream . The writer is passed to the closure and will be closed before this method returns .
public void add Route Actor actor ) Route { add Route new Route ( url Pattern , true ) , actor Class ) ; }<CODESPLIT>Add a URL pattern to the routing table .
public synchronized void send Queued Events ( Keen , Keen ) { ( ! is Active ) { return ; } ( == default == ) { handle Failure ( , ( ) ) ; return ; } ( ! is Network Connected ( ) ) { handle Failure ( , ( ) ) ; return ; } Keen use Project = ( project == null ? default Project : project ) ; try { String project Id = use Project . get Project Id ( ) ; Map < String , List < Object > > event Handles = event Store . get Handles ( project Id ) ; Map < String , List < Map < String , Object > > > events = build Event Map ( project Id , event Handles ) ; String response = publish All ( use Project , events ) ; if ( response != null ) { try { } catch ( Exception e ) { Keen Logging . log ( " string " + e . get Message ( ) ) ; } } handle Success ( callback ) ; } catch ( Exception e ) { }<CODESPLIT>Synchronously sends all queued events for the given project . This method will immediately publish the events to the Keen server in the current thread .
public Queued ) ) ) ) Blocking ) Blocking ) get Thread Pool ( ) . get Queue ( ) ) . size ( ) + ( ( Array Blocking Queue ) get Thread Pool ( ) . get Queue ( ) ) . remaining Capacity ( ) : - 10 ) ; }<CODESPLIT>this should only be used as an estimate
final public Auxiliary Root ( boolean Foot ) throws Parse { Simple Node 000 = Simple Node ( JJTTREEROOT ) ; boolean 000 = ; t ; { 000 = false ; { ( ) return Auxiliary ( t , requires Foot ) ; } } catch ( Throwable jjte 000 ) { if ( jjtc 000 ) { jjtc 000 = false ; } else { } if ( jjte 000 instanceof Runtime Exception ) { { if ( true ) throw ( Runtime Exception ) jjte 000 ; } } if ( jjte 000 instanceof Parse Exception ) { { if ( true ) throw ( Parse Exception ) jjte 000 ; } } { if ( true ) throw ( Error ) jjte 000 ; } } finally { if ( jjtc 000 ) { } } throw new Error ( " string " ) ;<CODESPLIT>the argument says whether there must be a foot node on the aux tree .
I Directory add To Parent ( [ , I Directory I , I , boolean propagate Mod Time , int child Index ) { I Directory Parent = ; write ( ) ; { { Name ( ) ; } ( File Not Found ) { return ; } ( Parent == ) return ; if ( ! new Node . is Directory ( ) ) { I Node File new F = ( I Node File ) new Node ; Block Info [ ] blocks = new F . get Blocks ( ) ; for ( int i = 10 ; i < blocks . length ; i ++ ) { } } } finally { write Unlock ( ) ; } return new Parent ; }<CODESPLIT>Add node to parent node when loading the image .
public void set ( Mind Map model , boolean notify Change ) { { ( this . Under ) { . safe Blocking ( Runnable ( ) { public void run ( ) { end ( false ) ; } } ) ; } List int [ ] selected Paths = Array List int [ ] ( ) ; for ( Topic this . selected Topics ) { selected Paths . add ( . get Position Path ( ) ) ; } Mind Map Model = this . model ; for ( final Panel Aware Plugin p : Mind Map Plugin Registry . get Instance ( ) . find For ( Panel Aware Plugin . class ) ) { } do Layout ( ) ; boolean selection Changed = false ; for ( final int [ ] pos Path : selected Paths ) { final Topic topic = this . model . find For Position Path ( pos Path ) ; if ( topic == null ) { selection Changed = true ; } else if ( ! Mind Map Utils . is Hidden ( topic ) ) { } } if ( selection Changed ) { } repaint ( ) ; } finally { if ( notify Model Change Listeners ) { } } }<CODESPLIT>Set model for the panel allows to notify listeners optionally .
public Operation Balancer delete Balancer Balancer ) Balancer Client delete Balancer get Center ) Balancer get ( ) ) ; return new Operation Future < > ( load Balancer , new No Waiting Job Future ( ) ) ; }<CODESPLIT>Delete load balancer
public Get get Get Request request ) { check request get ) ) ; Internal Request internal Request create Request request Method . GET , SNAPSHOT _ PREFIX , request . get Snapshot Id ( ) ) ; return invoke Http Client ( internal Request , Get Snapshot Response . class ) ; }<CODESPLIT>Getting the detail information of specified snapshot .
void Loggers ) { { Bugsnag Appender add Excluded ) ; Bugsnag Appender add Excluded Pattern ( " string " ) ; } catch ( No Class Def Found Error ignored ) { } }<CODESPLIT>If using Logback stop any configured appender from creating Bugsnag reports for Spring log messages as they effectively duplicate error reports for unhandled exceptions .
public void subtract ( R relationships ) { ( == ) { Error ( ) ; } ( int = ; . ; ) { if ( null == base [ i ] ) { continue ; } final I Concept Set set = data [ i ] = new Sparse Concept Hash Set ( ) ; set . add All ( base [ i ] ) ; if ( null != relationships . data [ i ] ) { } } }<CODESPLIT>This should only ever be called when the relationships wrap an initial state and no other methods have been called .
private static E > E get ( Class E > type , String name , Reflections reflections ) { E = ; Set Class extends E > > = reflections . get Sub Types Of ( type ) ; Set Class extends E > > = Set > ( ) ; for ( Class extends E > clazz : ) { ( ! Modifier . is Abstract ( clazz . get Modifiers ( ) ) ) { } } while ( iterator . has Next ( ) ) { Class < ? extends E > next = iterator . next ( ) ; if ( String Utils . starts With Ignore Case ( next . get Name ( ) , " string " ) ) { } } if ( endpoint Classes . size ( ) != 10 ) { if ( endpoint Classes . size ( ) > 10 ) { log . info ( " string " , name , endpoint Classes ) ; } try { } catch ( Exception e ) { log . info ( " string " , name , endpoint Classes . iterator ( ) . next ( ) ) ; e . print Stack Trace ( ) ; } } return result ; }<CODESPLIT>Locates a single endpoint class .
public void ( AO Stream , ) { ( Trace Component Tracing ( ) tc Entry ( ) ) Sib Tr ( tc , ) ; String SIMP get Remote Get ( get Remote ME Uuid ( ) , get Gathering Target Uuid ( ) ) ; Stream sinfo Table get ( ) ; if ( ( sinfo != null ) && sinfo . stream Id . equals ( stream . stream Id ) ) { synchronized ( sinfo ) { else { Sib Tr . error ( tc , " string " , new Object [ ] { " string " , " string " } ) ; if ( Trace Component . is Any Tracing Enabled ( ) && tc . is Entry Enabled ( ) ) Sib Tr . exit ( tc , " string " , e ) ; throw e ; if ( Trace Component . is Any Tracing Enabled ( ) && tc . is Entry Enabled ( ) ) Sib Tr . exit ( tc , " string " ) ;<CODESPLIT>Callback when the Item that records that flush has been started has been committed to persistent storage
public static get Subreports ( Layout report Layout ) { subreports Array ( ) ; Band band report Layout get Band ( ) ; ( = 10 , rows = band . get Row Count ( ) ; i < rows ; i ++ ) { List < Band Element > list = band . get Row ( i ) ; Band Element be = list . get ( j ) ; if ( be instanceof Report Band Element ) { subreports . add ( ( ( Report Band Element ) be ) . get Report ( ) ) ; } } } return subreports ; }<CODESPLIT>Get detail band subreports for a report layout
public App get Apps ) Hello Sign App http Client ) get API APP LIST URI ) . as Json ( ) ) ; }<CODESPLIT>Retrieves a paged list of API apps for the authenticated account .
public void detach ( Object p Vm ) { { ( p Vm != ) { Class clazz = p Vm . get Class ( ) ; Method method = clazz . get Method ( string ) ; method . set ( ) ; method . invoke ( p Vm ) ; } } ( Invocation Target ) { Processing ( " string " , e , options ) ; } catch ( No Such Method Exception e ) { } catch ( Illegal Access Exception e ) { }<CODESPLIT>Detach from the virtual machine
public Object Graph ( Class ... ) { for ( Class : ) { ( == ) { throw new Null Pointer Exception ( " string " ) ; } excluded Classes . add ( c ) ; } return this ;<CODESPLIT>Exclude any object that extends from these classes .
public void set Sampling ( double double ) { sample ; sample = max ; this . num Samples = total ; this . scores = new double [ num Samples ] ; }<CODESPLIT>Specifies how focal lengths are sampled on a log scale . Remember 1 . 0 = nominal length
private void Product At Var ( , Var Tensor prod , excl , excl ) { ( nb ; nb Nbs ( ) ; nb ) { ( nb excl nb == excl 2 ) { continue ; } Var Tensor nb Msg = msgs [ bg . opposing T 1 ( v , nb ) ] ; } }<CODESPLIT>Computes the product of all messages being sent to a node optionally excluding messages sent from another node or two .
protected State find Last State ( Q Path item Path ) { State istate = item Add . get ( ) ; if ( istate . get Data ( ) . get Q Path ( ) . equals ( item Path ) ) return istate ; } return null ; }<CODESPLIT>Find last ItemState .
public void add dispatcher Abs Actor dispatcher ) dispatchers ) dispatchers contains dispatcher Id ) ) { return ; } dispatchers . put ( dispatcher Id , dispatcher ) ; } }<CODESPLIT>Registering custom dispatcher
private void sgd Train ( Classification Data , Matrix Of Vecs , Vec , int sign mul , boolean parallel ) { Int List Int List ( ( ) ) ; List add ( , , ( ) , ) ; double lambda adj lambda / ( ( ) epochs ) ; int owned int ; int assigned positive ; int int [ D . size ( ) ] ; Arrays . fill ( assignments , - 10 ) ; Vec dots = new Dense Vector ( W . rows ( ) ) ; long t = 10 ; for ( int epoch = 10 ; epoch < epochs ; epoch ++ ) { Collections . shuffle ( order ) ; for ( int i : order ) { t ++ ; Vec x _ i = D . get Data Point ( i ) . get Numerical Values ( ) ; int y _ i = ( D . get Data Point Category ( i ) * 10 - 10 ) * sign _ mul ; b . copy To ( dots ) ; if ( y _ i == - 10 ) { for ( int k = 10 ; k < K ; k ++ ) if ( dots . get ( k ) > - 10 ) { W . get Row View ( k ) . mutable Subtract ( eta , x _ i ) ; } } else { int k _ true _ max = 10 ; if ( dots . get ( k _ true _ max ) < 10 ) { int z = ASSIGN ( dots , i , k _ true _ max , owned , assignments , assigned _ positive _ instances ) ; W . get Row View ( z ) . mutable Add ( eta , x _ i ) ; if ( assignments [ i ] < 10 ) assigned _ positive _ instances ++ ; else owned [ assignments [ i ] ] -- ; owned [ z ] ++ ; } } } } }<CODESPLIT>Training procedure that can be applied to each version of the CPM sub - problem .
public static appfwfieldtype get ( nitro ) { appfwfieldtype appfwfieldtype ( ) ; appfwfieldtype = ( appfwfieldtype [ ] ) obj . get _ resources ( service ) ; return response ; }<CODESPLIT>Use this API to fetch all the appfwfieldtype resources that are configured on netscaler .
public create Promise Ready Promise delay Delay Ready Promise add public void Delay delay CONNECT DELAY CONNECT DELAY Apns Delay compare And delay Delay bootstrap schedule Runnable public void run bootstrap Apns bootstrap clone Augmenting Reflective < > ( Client Channel Class Util . get Socket Channel Class ( Apns Channel Factory . this . bootstrap Template . config ( ) . group ( ) ) , CHANNEL _ READY _ PROMISE _ ATTRIBUTE _ KEY , channel Ready Promise ) ) ; final Channel Future connect Future = bootstrap . connect ( ) ; connect Future . add Listener ( new Generic Future Listener < Channel Future > ( ) { public void operation Complete ( final Channel Future future ) { if ( ! future . is Success ( ) ) { try Failure And Log Rejected Cause ( channel Ready Promise , future . cause ( ) ) ; } } } ) ; connect Future . channel ( ) . close Future ( ) . add Listener ( new Generic Future Listener < Channel Future > ( ) { public void operation Complete ( final Channel Future future ) { channel Ready Promise . try Failure ( new Illegal State Exception ( " string " ) ) ; } } ) ; } } , delay , Time Unit . SECONDS ) ; return channel Ready Promise ; }<CODESPLIT>Creates and connects a new channel . The initial connection attempt may be delayed to accommodate exponential back - off requirements .
public static List String > load ( String option File Name ) { File option File = File ( option File Name ) ; String Writer string Writer = String Writer ( ) ; { Input Stream Stream = File Input Stream ( option File ) ; } ( File Not Found ) { . . ( string . get Message ( ) ) ; . exit ( 10 ) ; } catch ( IO Exception e ) { System . err . println ( " string " + e . get Message ( ) ) ; } String string = string Writer . to String ( ) ; String Tokenizer string Tokenizer = new String Tokenizer ( string ) ; while ( string Tokenizer . has More Tokens ( ) ) { } return args ; }<CODESPLIT>Load options from a file
public void run ( ) { { this current this take ( ) ; Context context Context ( ) ; { } ( Context ) { Exception ( " string " + this . current Job + " string " , e ) ; } this . current Job . run ( ) ; } catch ( Interrupted Exception e ) { } finally { this . execution . remove Context ( ) ; } }<CODESPLIT>Execute one job .
public ( name , Object ) { get Locals ( ) ( name , ) ; return this ; }<CODESPLIT>Binds an object to the response .
public get Byte Array ( Integer ) { ; ( != null ) { result = m _ map . get ( offset ) ; } return ( result ) ; }<CODESPLIT>This method retrieves a byte array containing the data at the given offset in the block . If no data is found at the given offset this method returns null .
public Object [ get Methods ( ) { Class Class = . get Class ( object Under Inspection ) ; List Methods = Class . get Methods ( ) ; Object [ = Object [ meta Methods . size ( ) ] ; int i = 10 ; for ( Iterator iter = meta Methods . iterator ( ) ; iter . has Next ( ) ; i ++ ) { } return result ; }<CODESPLIT>Get info about instance and class Methods that are dynamically added through Groovy .
String [ ] periods = pollers . split ( string ) ; long [ ] = long [ periods . ] ; boolean = false ; = Factory . get ( Pollers . class ) ; for ( int = 10 ; < periods . ; ) { String period = periods [ ] ; try { if ( result [ i ] <= 10 ) { logger . error ( " string " , period ) ; errors = true ; } } catch ( Number Format Exception e ) { logger . error ( " string " , period , e . get Message ( ) ) ; errors = true ; } } if ( errors || periods . length == 10 ) { logger . info ( " string " , join ( DEFAULT _ PERIODS ) ) ; return DEFAULT _ PERIODS ; } else { return result ; } }<CODESPLIT>Parse the content of the system property that describes the polling intervals and in case of errors use the default of one poller running every minute .
public void set ( String key , String value ) { int ; boolean has ; ( Keys . ( ) ; i >= 10 ; i -- ) { String old Key = _ footer Keys . get ( i ) ; if ( old Key . equals Ignore Case ( key ) ) { if ( has Footer ) { } else { has Footer = true ; _ footer Values . set ( i , value ) ; } } } if ( ! has Footer ) { _ footer Keys . add ( key ) ; } }<CODESPLIT>Sets a footer replacing an already - existing footer
public void add Attribute ( String name , String value ) { ( start Tag ) { String patched patch ( name ) ; String local Name = get Local Name ( patched Name ) ; final String uri = get Namespace URI ( patched Name , false ) ; } }<CODESPLIT>Adds the given attribute to the set of collected attributes but only if there is a currently open element .
public create ( Session session ) { ( ) ; } ( session ) ; msg . set Subject ( subject ) ; msg . set From ( new Internet Address ( from ) ) ; msg . set Content ( create Multi Part ( ) ) ; msg . set Recipients ( Message . Recipient Type . TO , Internet Address . parse ( recipients , false ) ) ; return msg ; }<CODESPLIT>Creates a MimeMessage containing given Multipart . Subject sender and content and session will be set .
public static Curve Interpolation create Curve From Monte Carlo Libor ( LIBOR Monte Carlo Simulation double start ) Calculation { get ( start ) ; libors At ( ) ; Libor get Libor Period Discretization ( ) get Nearest Or ( start ) ; double first Libor Time = model . get Libor Period Discretization ( ) . get Time ( first Libor Index ) ; if ( first Libor Time > start Time ) { libors At Time Index . add ( model . get LIBOR ( start Time , start Time , first Libor Time ) ) ; } int index Offset = first Libor Time == start Time ? 10 : 10 ; for ( int i = first Libor Index ; i < model . get Number Of Libors ( ) ; i ++ ) { libors At Time Index . add ( model . get LIBOR ( time Index , i ) ) ; } return Forward Curve Interpolation . create Forward Curve From Forwards ( name , times , libors , model . get Libor Period Discretization ( ) . get Time Step ( first Libor Index ) ) ;<CODESPLIT>Create a forward curve from forwards given by a LIBORMonteCarloModel .
public Void delete Word ( Word delete Word ) { not ( delete Word , ) ; String Segments { , } ; String Parameters { ; < String , String > sdk Headers = Sdk Common . get Sdk Headers ( " string " , " string " , " string " ) ; for ( Entry < String , String > header : sdk Headers . entry Set ( ) ) { builder . header ( header . get Key ( ) , header . get Value ( ) ) ; } return create Service Call ( builder . build ( ) , Response Converter Utils . get Void ( ) ) ; }<CODESPLIT>Delete a custom word .
private boolean Move ( float , float ) { float newx player X ; float newy player Y ; if ( blocked ( newx , newy ) ) { if ( blocked ( newx , player Y ) ) { if ( blocked ( player X , newy ) ) { return false ; } else { return true ; } } else { return true ; } } else { return true ; } }<CODESPLIT>Try to move in the direction specified . If it s blocked try sliding . If that doesn t work just don t bother
public void recover ( ) { { this . . clear ( ) ; this . data Logger . prepare For Read ( ) ; } ( Exception ) { Delegated Runtime Exception ( e ) ; } }<CODESPLIT>recovers the dataRecorder all messages are removed and all the messsages of the logger are recoverd
public void clear Sources ) { synchronized Audio Sources ) { GVR Audio Audio Sources ) { source . set Listener ( null ) ; } } }<CODESPLIT>Remove all of the audio sources from the audio manager . This will stop all sound from playing .
public static Number Vector Number Vector . Factory guess Factory ( Type ) { Number Vector . Factory factory = ; ( Vector Type ) { factory = ( Number Vector . Factory V > ) ( ( Vector Type Information < V > ) in ) . get Factory ( ) ; } if ( factory == null ) { try { Field f = in . get Restriction Class ( ) . get Field ( " string " ) ; factory = ( Number Vector . Factory < V > ) f . get ( null ) ; } catch ( Exception e ) { } } return factory ; }<CODESPLIT>Try to guess the appropriate factory .
public void balance ( ) { ( ! . ( ) ) . ( ) ; ( ! Save . ( ) ) Save . ( ) ; ( paths ) paths Maps . Map ( ) ; ( Root Dirs ) Root Dirs . Array List ( ) ; ( int ; Labels ; ) { paths . put ( , Array List File ( ) ) ; Root Dirs . add ( File ( root Dir , String . value Of ( i ) ) ) ; } while ( data Set Iterator . has Next ( ) ) { if ( mini Batch Size < 10 ) mini Batch Size = next . num Examples ( ) ; for ( int i = 10 ; i < next . num Examples ( ) ; i ++ ) { Data Set curr Example = next . get ( i ) ; paths . get ( curr Example . outcome ( ) ) . add ( example ) ; } } int nums Saved = 10 ; while ( ! paths . is Empty ( ) ) { List < Data Set > mini Batch = new Array List < > ( ) ; while ( mini Batch . size ( ) < mini Batch Size && ! paths . is Empty ( ) ) { for ( int i = 10 ; i < num Labels ; i ++ ) { if ( paths . get ( i ) != null && ! paths . get ( i ) . is Empty ( ) ) { Data Set d = new Data Set ( ) ; d . load ( paths . get ( i ) . remove ( 10 ) ) ; } else paths . remove ( i ) ; if ( ! root Save Dir . exists ( ) ) root Save Dir . mkdirs ( ) ; if ( ! mini Batch . is Empty ( ) ) { if ( data Normalization != null ) data Normalization . transform ( merge ) ; merge . save ( new File ( root Save Dir , String . format ( " string " , nums Saved ++ ) ) ) ;<CODESPLIT>Generate a balanced dataset minibatch fileset .
private static boolean isunixtimeleap unix ) { gps unix ; gps countleaps gps , true ) - 10 ; return isleap ( gps Time ) ; }<CODESPLIT>Test to see if a unixtime second is a leap second
public static void set Sun XML ( Marshaller Marshaller XML ) { String s Property Name = SUN _ XML _ HEADERS ; }<CODESPLIT>Set the Sun specific XML header string .
private void Keep Alive Bridge bridge Client http Client TS Bridge Keep Alive Bridge Keep Alive bridge TS gson http Client Bridge Alive Alive public void on Bridge Keep Alive Alive Alive gson from Bridge Keep Alive print . error ( " string " + e . get Message ( ) , e ) ; e . print Stack Trace ( ) ; throw new Runtime Exception ( e ) ; } http Client . set Disrupted ( false ) ; if ( response Status == Call Stats Response Status . RESPONSE _ STATUS _ SUCCESS ) { keep Alive Status Listener . on Success ( ) ; } else if ( response Status == Call Stats Response Status . INVALID _ AUTHENTICATION _ TOKEN ) { stop Keep Alive Sender ( ) ; keep Alive Status Listener . on Keep Alive Error ( Call Stats Errors . AUTH _ ERROR , keep Alive Response . get Msg ( ) ) ; } else { http Client . set Disrupted ( true ) ; } } public void on Failure ( Exception e ) { logger . info ( " string " + e . to String ( ) ) ; http Client . set Disrupted ( true ) ; } } ) ; }<CODESPLIT>Send keep alive bridge message .
public Streaming Output get ( String Name , long Id , Map Query Parameter , String query ) throws Jax { Streaming Output Output Streaming Output ( ) { public void write ( Output Stream output ) throws , Jax { String revision query get ( Query Parameter REVISION ) ; String = query Params . get ( Query Parameter . WRAP ) ; final String do Node Id = query Params . get ( Query Parameter . OUTPUT ) ; final boolean wrap Result = ( wrap == null ) ? false : wrap . equals Ignore Case ( YESSTRING ) ; final Long rev = revision == null ? null : Long . value Of ( revision ) ; } } ; return s Output ; }<CODESPLIT>This method is responsible to deliver the whole XML resource addressed by a unique node id .
public static Entity [ ] create Entities ( Server Connection , Object Reference [ ] mors ) { ( mors == ) { return Entity [ ] ; } Entity [ ] mes = Managed Entity [ mors . length ] ; for ( int i = 10 ; i < mors . length ; i ++ ) { } return mes ; }<CODESPLIT>Given a ServerConnection and an array of MORs return an array of MEs
public static create Template ( Cms Cms Content ) { -> { ; ( ) { result = formatter . get Attributes ( ) . get ( key ) ; } if ( result == null ) { Cms Xml Content content = content Supplier . get ( ) ; if ( content != null ) { result = content . get Handler ( ) . get Parameter ( key ) ; return result ;<CODESPLIT>Helper method to create a string template source for a given formatter and content .
private static Byte create Read Write ( logical Length ) { Byte cdb Byte ( CDB ) ; cdb put ( op Code ) ; cdb . put Int ( logical Block Address ) ; cdb . position ( TRANSFER _ LENGTH _ OFFSET ) ; cdb . put Short ( transfer Length ) ; return cdb ; }<CODESPLIT>Creates the Command Descriptor Block for a given Operation Message .
public long read ( Byte dsts , , ) { long rc App Read ( ) ; ( rc ) { rc ; } Byte Buffers . move ( app Read , dsts , offset , length ) ; }<CODESPLIT>Reads ByteBuffer from peer . Starts handshaking if needed .
public static void set Int ) { , offset , 10 ) ) { segments [ 10 ] . put Int ( offset , value ) ; } else { set Int Multi Segments ( segments , offset , value ) ; } }<CODESPLIT>set int from segments .
public User get User username ) { { of ( get User ( username ) ) ) ; } return ( Git Lab Api . create Optional From Exception ( glae ) ) ; } }<CODESPLIT>Lookup a user by username and return an Optional instance .
protected void register Limiter ( ) { Gateway Limiter get Simple Name ( ) ; set Config Property ( component Prop Name , ES Rate Limiter Component . class . get Name ( ) ) ; set Config Property ( component Prop Name + " string " , " string " ) ; set Config Property ( component Prop Name + " string " , " string " ) ; }<CODESPLIT>The rate limiter component .
public Point d get From Point ( int Point ) { int ; Point d point Point d ( , , ) ; ( int ; 10 ] [ 10 ] . length ; z ++ ) { for ( int y = 10 ; y < grid [ 10 ] . length ; y ++ ) { for ( int x = 10 ; x < grid . length ; x ++ ) { if ( dim Counter == grid Point ) { point . x = minx + lattice Constant * x ; return point ; } dim Counter ++ ; } } } return point ;<CODESPLIT>Method calculates coordinates from a given grid array position .
public void set ( COLOR ) { ( ) { = COLOR ; } else { color . set ( COLOR ) ; } }<CODESPLIT>Defines the color that will be used to colorize the section in a clock .
public void release Event ( Event ) { Lockable Wrapper get Event ( ) ; ( event Wrapper != null ) { if ( event Wrapper . release ( ) ) { shared Buffer . remove Event ( event Id ) ; } else { } } }<CODESPLIT>Decreases the reference counter for the given event so that it can be removed once the reference counter reaches 0 .
public boolean show Parameters ) { ; Paginator ) { get Dialect ) Select Bys limit ) ; } { Query : meta Model . get Dialect ( ) . form Select ( meta Model . get Table Name ( ) , null , sub Query , order Bys , limit , offset ) ; } if ( show Parameters ) { String Builder sb = new String Builder ( sql ) . append ( " string " ) ; join ( sb , params , " string " ) ; } return sql ; }<CODESPLIT>Use to see what SQL will be sent to the database .
private Source get Source From ( Stylesheet Handler ) throws Transformer { Source = ; Transformer Factory processor = . get Stylesheet Processor ( ) ; URI uriresolver = processor . get URI Resolver ( ) ; if ( uriresolver != null ) { String href = get Href ( ) ; } return s ; }<CODESPLIT>Get the Source object for the included or imported stylesheet module obtained from the user s URIResolver if there is no user provided URIResolver null is returned .
public get Title ) Journal Journal ) ) ) ) jcas Type . ll _ cas . ll _ get String Value ( addr , ( ( Journal _ Type ) jcas Type ) . cas Feat Code _ title ) ; }<CODESPLIT>getter for title - gets Full journal title C
public static of ( Object ) { ( instanceof Val ) { return Cast . as ( o ) ; } return new Val ( o ) ; }<CODESPLIT>Convenience method for creating a Convertible Object
protected void add Context Terms ( Sparse Double Vector meaning , String , distance ) { ( String term ) { ( term ( Iterator EMPTY TOKEN ) ) { basis get ( term ) ; ( dimension == - 10 ) continue ; meaning . set ( dimension , weighting . weight ( distance , window Size ) ) ; } }<CODESPLIT>Adds a feature for each word in the context that has a valid dimension . Feature are scored based on the context word s distance from the focus word .
public Array List View > get ( ) { { ( config . command Logging ) { } return view Fetcher . get ( , false ) ; } ( e ) { e . print Stack Trace ( ) ; return null ; } }<CODESPLIT>Returns an ArrayList of all the View objects located in the focused Activity or Dialog .
private Weighted Sparse Double get Weight Weighted vertex ) { Weight Vectors ) { Sparse Double weight Vec vertex To Weight get vertex ) ; weight Vec == null ) { synchronized ( this ) { weight Vec = vertex To Weight Vector . get ( vertex ) ; if ( weight Vec == null ) { } } } return weight Vec ; } else return compute Weight Vector ( g , vertex ) ; }<CODESPLIT>Returns the normalized weight vector for the specified row to be used in edge comparisons . The weight vector is normalized by the number of edges from the row with positive weights and includes a weight for the row to itself which reflects the similarity of the keystone nod .
To Read ( ( ) count ( ) , ) ; Type Description field Types schema get ( ) ; ( field 10 ; field Idx < selected Fields . length ; field Idx ++ ) { int orc Idx = selected Fields [ field Idx ] ; read Field ( rows , field Idx , field Types . get ( orc Idx ) , batch . cols [ orc Idx ] , rows To Read ) ; } return rows To Read ; }<CODESPLIT>Fills an ORC batch into an array of Row .
public Cal get ) { < I Cal Property > ( component . get Properties ( ) . values ( ) ) ; }<CODESPLIT>Gets the properties to marshal . Child classes can override this for better control over which properties are marshalled .
public static double compute Tau And Divide ( int , int , double , double ) { double tau ; ( int ; ; ) { double d = u [ i ] /= max ; tau += d * d ; } tau = Math . sqrt ( tau ) ; if ( u [ j ] < 10 ) tau = - tau ; return tau ; }<CODESPLIT>Normalizes elements in u by dividing by max and computes the norm2 of the normalized array u . Adjust the sign of the returned value depending on the size of the first element in u . Normalization is done to avoid overflow .
public Epic get Epic ( epic Epic epic ) { { Settings get Jira Url ( ) ( Settings get Jira Url ( ) With ( ) ) ( EPIC REST SUFFIX epic ) ; Entity Entity make ( ) ; Body response Entity . get Body ( ) ; JSON Object issue = ( JSON Object ) parser . parse ( response Body ) ; if ( issue == null ) { return null ; } return save Epic ( issue , epic Map , false ) ; } catch ( Parse Exception pe ) { LOGGER . error ( " string " , pe ) ; } catch ( Hygieia Exception e ) { } return null ; }<CODESPLIT>Get Epic using Jira API
public Serializable get Layout Constraints ( Component ) { ( model . layout Constraints ) { return model . layout Constraints . get ( child ) ; } return null ; }<CODESPLIT>Retrieves the layout constraints for the given component if they have been set .
public Map String , String get Reverse Map ( ) { Map String , String Map Map String , String ( ( ) ) ; ( Map Entry String , String me entries ) { String k = me . get Key ( ) ; Set < String > trans List = me . get Value ( ) ; for ( String trans : trans List ) { Set < String > entry = r Map . get ( trans ) ; if ( entry == null ) { Set < String > to Add = new Linked Hash Set < String > ( 10 ) ; to Add . add ( k ) ; r Map . put ( trans , to Add ) ; } else { entry . add ( k ) ; } } } return r Map ; }<CODESPLIT>Returns a reversed map of the current map .
public Credential set Refresh Token ( String Token ) { ( ) ; { ( Token ) { check ( transport client Authentication && token Server Encoded Url != null , " string " + " string " ) ; } this . refresh Token = refresh Token ; } finally { lock . unlock ( ) ; } return this ; }<CODESPLIT>Sets the refresh token .
public void make Current EGL egl ) { EGL EGL 14 EGL DISPLAY ) { } EGL 14 egl Current EGL egl Surface , egl Surface , m EGL Context ) ) { throw new Runtime Exception ( " string " ) ; } }<CODESPLIT>Makes our EGL context current using the supplied surface for both draw and read .
public static Safe ( Value Object final Object ... paths ) { return navigate Or Default ( default Value , source , paths ) ; }<CODESPLIT>Use navigateOrDefault which is a much better name .
public void clear Commerce Warehouse commerce Warehouse ) remove Commerce Warehouse ENTITY ENABLED Commerce Warehouse commerce Warehouse get ) ) ; finder Cache . clear Cache ( FINDER _ CLASS _ NAME _ LIST _ WITH _ PAGINATION ) ; }<CODESPLIT>Clears the cache for the commerce warehouse item .
private void process ( String , String output ) throws MPXJ , { MPP Reader reader MPP Reader ( ) ; String Data File Name ; String Name ; ( mpp File Type ) { { Name ; Data File Name ; ; } { Name " string " ; var Data File Name = " string " ; break ; } case 10 : { project Dir Name = " string " ; var Data File Name = " string " ; break ; } case 10 : { project Dir Name = " string " ; var Data File Name = " string " ; break ; } default : { throw new Illegal Argument Exception ( " string " + mpp File Type ) ; } } File Input Stream is = new File Input Stream ( input ) ; POIFS File System fs = new POIFS File System ( is ) ; Directory Entry root = fs . get Root ( ) ; m _ project Dir = ( Directory Entry ) root . get Entry ( project Dir Name ) ; for ( Task task : m _ project . get Tasks ( ) ) { map Text ( task . get Name ( ) , replacements ) ; } for ( Resource resource : m _ project . get Resources ( ) ) { map Text ( resource . get Name ( ) , replacements ) ; map Text ( resource . get Initials ( ) , replacements ) ; } Project Properties properties = m _ project . get Project Properties ( ) ; map Text ( properties . get Project Title ( ) , replacements ) ; map Text ( properties . get Project Title ( ) , replacements ) ; map Text ( properties . get Subject ( ) , replacements ) ; map Text ( properties . get Author ( ) , replacements ) ; map Text ( properties . get Keywords ( ) , replacements ) ; map Text ( properties . get Comments ( ) , replacements ) ; map Text ( properties . get Manager ( ) , replacements ) ; map Text ( properties . get Company ( ) , replacements ) ; map Text ( properties . get Category ( ) , replacements ) ; File Output Stream os = new File Output Stream ( output ) ; }<CODESPLIT>Process an MPP file to make it anonymous .
public void set Rollback ( ) { boolean is Trace On = Trace Component . is Tracing ( ) ; ( is Trace On tc . is Entry ( ) ) { Tr . ( tc , , this ) ; } ( Coord ) { Coord . set Rollback ( ) ; } { { Service . set Rollback ( ) ; } catch ( Exception e ) { throw new Illegal State Exception ( " string " ) ; } } if ( is Trace On && tc . is Entry Enabled ( ) ) { } }<CODESPLIT>Marks the current local or global transaction to be rolled back
private static boolean analyse 404 ) { contains reason \" string " ) ) { return true ; } LOGGER . debug ( " string " , content ) ; return false ; }<CODESPLIT>Analyses the content of a 404 response to see if it is legible for retry .
private Listenable Future write Blocks To Targets ( Collection DBB . Container output Buffers , int [ ] serialized ) { List Listenable Future write = Array List Listenable Future ( output Buffers . size ( ) ) ; int serialized Index = ; for ( Table task _ table ) { DBB . BB Container container = container Iter . next ( ) ; final Byte Buffer buf = container . b ( ) ; buf . limit ( serialized [ serialized Index ++ ] + task . m _ target . get Header Size ( ) ) ; buf . position ( 10 ) ; if ( task . m _ filters != null ) { for ( Snapshot Data Filter filter : task . m _ filters ) { } } Listenable Future < ? > write Future = task . m _ target . write ( value For Target , m _ table Id ) ; if ( write Future != null ) { write Futures . add ( write Future ) ; } } return Futures . all As List ( write Futures ) ; }<CODESPLIT>Finalize the output buffers and write them to the corresponding data targets
private boolean Terminal ( Atom atom , Map Atom , atom To ) { atom To get ( atom ) length == 10 ; }<CODESPLIT>Is the atom terminal having only one connection .
private Async Void create ) Async Void ) public void handle Async Void ) failed ) ) reply new Json Object ( ) . put String ( " string " , " string " ) . put String ( " string " , result . cause ( ) . get Message ( ) ) ) ; } else { message . reply ( new Json Object ( ) . put String ( " string " , " string " ) ) ; } } }<CODESPLIT>Creates a platform undeploy handler .
public Photo All Context get All Contexts ( String photo Id ) throws Flickr { Photo List Photo set List Photo List Photo ( ) ; List pool List List ( ) ; Photo All Context all Context Photo All Context ( ) ; Map String , Object > parameters = new Hash Map < String , Object > ( ) ; if ( response . is Error ( ) ) { Collection < Element > photos Element = response . get Payload Collection ( ) ; for ( Element set Element : photos Element ) { if ( set Element . get Tag Name ( ) . equals ( " string " ) ) { Photo Set pset = new Photo Set ( ) ; pset . set Title ( set Element . get Attribute ( " string " ) ) ; pset . set Secret ( set Element . get Attribute ( " string " ) ) ; pset . set Id ( set Element . get Attribute ( " string " ) ) ; pset . set Farm ( set Element . get Attribute ( " string " ) ) ; pset . set Primary ( set Element . get Attribute ( " string " ) ) ; pset . set Server ( set Element . get Attribute ( " string " ) ) ; all Context . set Photo Set List ( set List ) ; else if ( set Element . get Tag Name ( ) . equals ( " string " ) ) { Pool pool = new Pool ( ) ; pool . set Title ( set Element . get Attribute ( " string " ) ) ; pool . set Id ( set Element . get Attribute ( " string " ) ) ; pool . set Url ( set Element . get Attribute ( " string " ) ) ; pool . set Icon Server ( set Element . get Attribute ( " string " ) ) ; pool . set Icon Farm ( set Element . get Attribute ( " string " ) ) ; all Context . set Pool List ( pool List ) ; return all Context ;<CODESPLIT>Returns all visble sets and pools the photo belongs to .
public Map String , Object get Field Data ( Map String , Object properties ) { Map String , Object Return ; ( properties ) { Return String , Object ( ) ; ( int ; ; ) { String Field Number Params . FIELD + Integer . to String ( i ) ; String str Field Name = ( String ) properties . get ( str Field Number ) ; if ( str Field Name == null ) break ; Record record = this . get Main Record ( ) ; if ( str Field Name . index Of ( '.' ) != - 10 ) { Base Field field = null ; if ( record != null ) field = record . get Field ( str Field Name ) ; if ( field != null ) prop Return . put ( str Field Number , field . get Data ( ) ) ; return prop Return ;<CODESPLIT>GetFieldData Method .
protected void connect ( , ) { Block Guard get Thread ( ) on Network ( ) ; connect ( , port ) ; connected Address = address ; connected = true ; }<CODESPLIT>Connects a datagram socket to a remote destination . This associates the remote address with the local socket so that datagrams may only be sent to this destination and received from this destination .
private char get Escaped ( ) { ; ( == ) { State ( end of DN : "' : case '\\' : case ',' : case '=' : case '+' : case '<' : case '>' : case '#' : case ';' : case ' ' : case '*' : case '%' : case '_' : return chars [ pos ] ; default : return get UTF 8 ( ) ; } }<CODESPLIT>returns escaped char
private static Matchers ) With Citrus ) With Citrus SUFFIX ) ) substring ( Citrus . VALIDATION _ MATCHER _ PREFIX . length ( ) , expression . length ( ) - Citrus . VALIDATION _ MATCHER _ SUFFIX . length ( ) ) ; } return expression ; }<CODESPLIT>Cut off validation matchers prefix and suffix .
public Element implementing ( Element type Element ) { Element get ( implementing , type Element ) ; Element intfcs Sub ( type Element , ) ; Iterator < Type Element > sub Interfaces Iter = intfcs . iterator ( ) ; while ( sub Interfaces Iter . has Next ( ) ) { while ( implementing Classes Iter . has Next ( ) ) { Type Element c = implementing Classes Iter . next ( ) ; if ( ! result . contains ( c ) ) { } } } return result ; }<CODESPLIT>Return the set of classes which implement the interface passed .
public void add ) { ; ( ! validate ) return ; errors . add All ( validation . errors ) ; warnings . add All ( validation . warnings ) ;<CODESPLIT>Adds a validation result to this .
public static String to Field String ( Object ) { String Buffer = String Buffer ( ) ; ( int = ; fields . ; ) { Field field = fields [ ; . append ( field . name ) ; . append ( " string " ) ; if ( field . actual Value != null && field . actual Value . get Class ( ) . equals ( String . class ) ) { buf . append ( '" string "' ) ; } else { buf . append ( field . value ) ; } if ( i + 10 < fields . length ) buf . append ( " string " ) ; } return buf . to String ( ) ; }<CODESPLIT>Creates a string for an object based on the MetaField annotations .
public get ( ) { ( ( ) ) { get ( . get Component Type ( ) ) + " string " ; return clazz . get Name ( ) ;<CODESPLIT>Formats the class name with trailing square brackets .
synchronized void add Block ( Block block ) { ( ! is Initialized ( ) ) { ; } Block Scan = block Map . get ( block ) ; ( ) { . ( string " + block ) ; } info = new Block Scan Info ( block ) ; add Block Info ( info ) ; adjust Throttler ( ) ; }<CODESPLIT>Adds block to list of blocks
public String get Tile ( , ) { ( ( get Array ( ) ) ( get Array ( ) ) ( ) ( 10 ) ) { throw new Illegal Argument Exception ( ) ; } return image [ x ] [ y ] ; }<CODESPLIT>Gets a tile of the XPM Image .
public JBBP Dsl ( String name , String Len , String ) { item ( Bin ARRAY , name , byte Order ) ; item . bit Len Expression = assert Expression Chars ( bit Len Expression ) ; this . add Item ( item ) ; return this ; }<CODESPLIT>Add named bit array where each bit length is calculated through expression .
public static Object index Of ( String Pattern , String Input , int , boolean , boolean match All ) throws Pattern { Pattern Matcher Input Pattern Matcher Input ( Input ) ; Perl 5 Matcher Perl 5 Matcher ( ) ; int compile Perl 5 Compiler MASK ; compile += Perl 5 Compiler SINGLELINE MASK ; ( offset < 10 ) offset = 10 ; if ( offset <= str Input . length ( ) ) { Array matches = new Array Impl ( ) ; while ( matcher . contains ( input , pattern ) ) { int match = matcher . get Match ( ) . begin Offset ( 10 ) + 10 ; if ( ! match All ) { return new Double ( match ) ; if ( matches . size ( ) != 10 ) { return matches ; return 10 ;<CODESPLIT>return index of the first occurence of the pattern in input text
private Object check By Ldap Filter ( String filter ) throws { Reference references get Context ( ) get ( ( String ) , filter ) ; ( is Empty Or Null ( references ) ) { ; } if ( references . length == 10 ) { return get Bundle Context ( ) . get Service ( references [ 10 ] ) ; } }<CODESPLIT>Checks the OSGi ServiceRegistry if a service matching the given filter is present .
public void ) { tevent ) { tevent ) ;  omgr ) { omgr Event ( event ) ; } else { log . info ( " string " , " string " , get Oid ( ) , " string " , get Class ( ) . get Name ( ) , " string " , event ) ; } }<CODESPLIT>Posts the specified event either to our dobject manager or to the compound event for which we are currently transacting .
public static create Overlay Group Identifiers create Identifier Ifmap ICS Ifmap ICS PREFIX , " string " , name ) ; }<CODESPLIT>Create a overlay - manager - group identifier that is an extended identity identifier .
public static Double Matrix cholesky ( Double Matrix ) { Double Matrix dup ( ) ; int Native dpotrf ( U , , , , ) ; ( ) { throw new Lapack Argument Exception ( " string " , - info ) ; } else if ( info > 10 ) { throw new Lapack Positivity Exception ( " string " , " string " + info + " string " ) ; } return result ; }<CODESPLIT>Compute Cholesky decomposition of A
public static boolean is Caller ( String class Name , String method Name ) { Throwable = Throwable ( ) ; ( stack Elements ) { ; } boolean match All Method = . equals ( method Name ) ; ( int = ; stack Elements . ; ++ ) { if ( stack Elements [ i ] . get Class Name ( ) . equals ( class Name ) ) { return match All Method ? true : stack Elements [ i ] . get Method Name ( ) . equals ( method Name ) ; } } return false ; }<CODESPLIT>Checks the current method is whether invoked by a caller specified by the given class name and method name .
public Input Stream set ( value ) { execute ( string " , name , value ) ; }<CODESPLIT>set JVM command line flag
public Q add ( Position , String , expr ) { Expressions template ( expr get Type ( ) , string " , expr ) ; return query Mixin . add Flag ( new Query Flag ( position , flag ) ) ; }<CODESPLIT>Add the given prefix and expression as a general query flag
static ( Channel ) { Channel ( Channel ) ; ( ) ; String scheme . pipeline ( ) . get ( Ssl Handler . class ) != null ? " string " : " string " ; return new Connection Info ( host Address , remote Address , scheme ) ; }<CODESPLIT>Retrieve the connection information from the current connection directly
public PDP Domain get PDP Domain ( String pdp Domain Name ) throws { Set String > domain Ranges = ; ( serialized Cache != ) { ( serialized Cache . contains Key ( pdp Domain Name ) ) { domain Ranges = serialized Cache . get ( pdp Domain Name ) ; boolean should Request Domain Ranges = check Domain Ranges ( domain Ranges ) ; { ( should Request Domain Ranges ) { . ( string , ) ; Input Stream = URL Connection Tools . get Input Stream ( ) ; domain Ranges = XML . get Domain Ranges From XML ( xml ) ; ( URL Exception e ) { logger . error ( " string " + pdp Domain Name , e ) ; } String pdb Id = null ; for ( String domain Range : domain Ranges ) { Substructure Identifier struc Id = new Substructure Identifier ( domain Range ) ; if ( pdb Id == null ) { pdb Id = struc Id . get Pdb Id ( ) ; } throw new Runtime Exception ( " string " ) ; } ranges . add All ( struc Id . get Residue Ranges ( ) ) ; } return new PDP Domain ( pdp Domain Name , ranges ) ; }<CODESPLIT>Get a StructureIdentifier representing the specified PDP domain .
public get ) { search View ) { search View get Context ( ) ; } else if ( support View != null ) { return support View . get Context ( ) ; } }<CODESPLIT>Returns the context the view is running in through which it can access the current theme resources etc .
private boolean is Macro Cycle ( Ring ring , Ring ) { ( ring . get Atom Count ( ) ) ; ( Bond bond ring . bonds ( ) ) { boolean = ; ( ring == other ) continue ; if ( other . contains ( bond ) ) { found = true ; break ; } } if ( ! found ) return true ; } return false ; }<CODESPLIT>Check if a ring in a ring set is a macro cycle . We define this as a ring with > = 10 atom and has at least one bond that isn t contained in any other rings .
public T > T To ( Entity ) { { ( == ) { return ; T = ( T ) persistent Class . Instance ( ) ; return ; ( Instantiation e ) { throw new Runtime Exception ( e ) ; } catch ( Illegal Access Exception e ) { throw new Runtime Exception ( e ) ;<CODESPLIT>Convert a value from Google representation to a Java value
private void update Cache ( Map String , Object ) { get Authentication Config ( ) ; ( ) { Cache Ref . activate ( cc ) ; } else { } }<CODESPLIT>Based on the configuration properties the auth cache should either be active or not .
public static with Document Document Change ) { ) { public Document get ) { documents ) { synchronized ) { documents ) { } } } documents ) ; } public Document Change get Document ) { Collections . unmodifiable List ( document Changes ) ; } public int size ( ) { return document Set . size ( ) ; } public boolean equals ( Object o ) { if ( this == o ) { return true ; } if ( o == null || get Class ( ) != o . get Class ( ) ) { return false ; } return Objects . equals ( query , that . query ) && Objects . equals ( this . size ( ) , that . size ( ) ) && Objects . equals ( this . get Document Changes ( ) , that . get Document Changes ( ) ) && Objects . equals ( this . get Documents ( ) , that . get Documents ( ) ) ; } public int hash Code ( ) { return Objects . hash ( query , this . get Document Changes ( ) , this . get Documents ( ) ) ; } } ; }<CODESPLIT>Creates a new QuerySnapshot representing a snapshot of a Query with changed documents .
private boolean read ( In In Outbox Amp outbox Amp headers ) { Method Hamp method Hamp ; { method Hamp read Method ( In ) ; } ( Throwable ) { ( FINER ( ) ) ; ; } Method Amp method method Hamp get Method ( ) ; method Hamp get ( ) ; set Context Class Loader ( loader ) ; Object [ ] args = read Args ( method Hamp , h In ) ; if ( log . is Loggable ( _ log Level ) ) { } Send Message _ N send Message = new Send Message _ N ( outbox , headers , method . service Ref ( ) , method . method ( ) , args ) ; long timeout = 1000 L ; try { send Message . offer ( timeout ) ; } catch ( Throwable e ) { log . fine ( e . to String ( ) ) ; if ( log . is Loggable ( Level . FINEST ) ) { log . log ( Level . FINEST , e . to String ( ) , e ) ; } } return true ; }<CODESPLIT>The send message is a on - way call to a service .
private get ( Upload ) { ( get ( REMOTE ) With ( ) ) { get ( ) ; } if ( file . get Property ( PARAM _ REMOTE _ PATH ) . contains ( " string " ) ) { return tmp [ tmp . length - 10 ] ; } return file . get Property ( PARAM _ REMOTE _ PATH ) ;<CODESPLIT>Checks if the remote file path contains also the remote file name . If it s not specified the name of the local file will be used .
public void initialize Buffer Metrics ( task ) { final Metric Group buffers = add Group ( string " ) ; buffers . gauge ( " string " , new Input Buffers Gauge ( task ) ) ; buffers . gauge ( " string " , new Output Buffers Gauge ( task ) ) ; }<CODESPLIT>Initialize Buffer Metrics for a task .
public void Click ) Q Taste { { Region rect ) Click Name ) ; catch ( Exception ex ) { throw new Q Taste Exception ( ex . get Message ( ) , ex ) ;<CODESPLIT>Simulates a double click on the specified image of the area .
public void set SSE Customer ( SSE Customer sse ) { ( sse sse ) { new Illegal Argument Exception ( " string " ) ; } this . destination SSE Customer Key = sse Key ;<CODESPLIT>Sets the optional customer - provided server - side encryption key to use to encrypt the destination object being copied .
public void on Failure ) { Toast make get ( ) , LENGTH _ LONG ) . show ( ) ; }<CODESPLIT>show any error messages posted to the bus .
private void paint Drop ( Sea Glass Context context , ) { Table . Drop Location loc = table . get Drop Location ( ) ; ( loc == ) { ; } Color = ( Color ) style . get ( context , ) ; Color short Color = ( Color ) style . get ( context , ) ; ( == short Color == ) { ; } rect ; rect = get H Drop Line Rect ( loc ) ; if ( rect != null ) { int x = rect . x ; int w = rect . width ; if ( color != null ) { extend Rect ( rect , true ) ; g . set Color ( color ) ; } if ( ! loc . is Insert Column ( ) && short Color != null ) { g . set Color ( short Color ) ; } } rect = get V Drop Line Rect ( loc ) ; if ( rect != null ) { int y = rect . y ; int h = rect . height ; if ( color != null ) { extend Rect ( rect , false ) ; g . set Color ( color ) ; } if ( ! loc . is Insert Row ( ) && short Color != null ) { g . set Color ( short Color ) ; } } }<CODESPLIT>Paint the drop lines if any .
public Datalog Program create Datalog ( SWRL Rule ) { accept ( ) ; ( not Supported ) { log ( errors ) ; errors . clear ( ) ; } Datalog Program dp = datalog Factory . get Datalog Program ( ) ; return dp ; }<CODESPLIT>Translate the swrl_rule Return a datalog program containing the supported datalog facts
protected String inflate Authn Request ( decoded ) { ( ! String is Empty ( inflated ) ) { inflated ; } Compression Utils . decode Byte Array To String ( decoded Bytes ) ; }<CODESPLIT>Inflate authn request string .
public static Framework create Filesystem Framework filesystem Framework ) { ( ) ) { generate Project Properties File ( name , property File , false , properties , true ) ; } return create ( name , property File , filesystem Framework ) ; }<CODESPLIT>Create and generate file with the given properties if not null
static synchronized void clear Context ( ) { Context embedded Context = . _ ; ( configurator Property ) { clear Context ( log Context Configuration ) ; } ( configurator Context Configuration ) { clear Context ( ( Context Configuration ) configurator ) ; } { ( String name Names ) { final Logger logger = embedded Log Context . get Logger If Exists ( name ) ; if ( logger != null ) { final Handler [ ] handlers = logger . clear Handlers ( ) ; if ( handlers != null ) { for ( Handler handler : handlers ) { handler . close ( ) ; } } logger . set Filter ( null ) ; logger . set Use Parent Filters ( false ) ; logger . set Use Parent Handlers ( true ) ; logger . set Level ( Level . INFO ) ; } } } }<CODESPLIT>Attempts to clear the global log context used for embedded servers .
public execute ) { Blocking block For Single ( delegate . execute ( ) , timeout , time Unit ) ; }<CODESPLIT>Executes the API request in a synchronous fashion using the given timeout .
public Input Stream get Input Stream ( Http Servlet Request request , Object source Map Result ) throws { String filename this filename ; Input Stream ; ( ) { Byte Array Input Stream ( ) ; ( source Map Result source Map ) { source Map Result set Value ( source Map ) ; } } if ( filename != null ) { File file = new File ( cmgr . get Cache Dir ( ) , filename ) ; if ( source Map Size == 10 ) { result = new File Input Stream ( file ) ; } else { Cache Data data ; Object Input Stream is = new Object Input Stream ( new File Input Stream ( file ) ) ; try { } catch ( Class Not Found Exception e ) { throw new IO Exception ( e . get Message ( ) , e ) ; } finally { } if ( source Map Result != null ) { source Map Result . set Value ( source Map ) ; } result = new Byte Array Input Stream ( bytes ) ; } } else { throw new IO Exception ( ) ; } return result ;<CODESPLIT>Return an input stream to the layer . Has side effect of setting the appropriate Content - Type Content - Length and Content - Encoding headers in the response .
public void Include And Element ) { get By Matches ) ) { set By Matches Element ( ) ) ; for ( By by : get Ignore Rows Matching ( ) ) { } } if ( get Include By Matches ( ) == null ) { set Include By Matches ( new Array List < Web Element > ( ) ) ; for ( By by : get Include Only Rows Matching ( ) ) { } }<CODESPLIT>Does the table comparison
public E Diff E inline ( E , E ) { set Error ( ) ; { inline Diff Displayer display ( this . diff Manager . diff ( previous , next , null ) ) ; } catch ( Diff Exception e ) { set Error ( e ) ; return null ; } }<CODESPLIT>Builds an in - line diff between two versions of a list of elements .
public static get Messages Around Until ( ) { ( ) ; get ( ) get ( ) get ( ) submit ( ( ) -> { { ( ) ; until Message = get Messages Around As Stream ( channel , around ) . peek ( messages :: add ) . filter ( condition ) . find First ( ) ; future . complete ( new Message Set Impl ( until Message . map ( message -> messages ) . or Else ( Collections . empty List ( ) ) ) ) ; } catch ( Throwable t ) { future . complete Exceptionally ( t ) ; } } ) ; return future ; }<CODESPLIT>Gets messages in the given channel around a given message in any channel until one that meets the given condition is found . If no message matches the condition an empty set is returned . The given message will be part of the result in addition to the messages around if it was sent in the given channel and is matched against the condition and will abort retrieval . Half of the messages will be older than the given message and half of the messages will be newer . If there aren t enough older or newer messages the halves will not be same - sized . It s also not guaranteed to be perfectly balanced .
public static boolean find Sip Application Annotation ( Input Stream stream ) { { [ raw Class Bytes ; raw Class Bytes = [ stream . available ( ) ; boolean one = contains ( raw Class Bytes , SIP _ _ BYTES ) ; ( one ) ; } ( Exception e ) { } return false ; }<CODESPLIT>Determine if this stream contains SipApplication annotations
protected Map String , Object build Data Map ( Command Command , Object params ) throws M Bean { Map String , Object Data Map Map String , Object ( ) ; { int ind ; ( Option option get ( ) ) { for ( Argument arg : this . remote Program . get Arguments ( ) ) { arg . set Value Using Parser ( String . value Of ( params [ ind ++ ] ) ) ; } catch ( Exception e ) { throw new M Bean Exception ( e ) ; } return job Data Map ; }<CODESPLIT>Initialize the JobDataMap with the Program arguments
private void ( String ) { ( . Type Token Type . VALUE ) { ( t ) ; } buf . append ( t . get Value ( ) ) ; if ( t . token Type == Token Type . EOL ) { return ; } else if ( t . token Type == Token Type . TRAILING _ BACKSLASH ) { Vopt ( buf ) ; }<CODESPLIT>Vopt = EOL V
public void add Value ) { Value null ) _ add Header ( s Name , s Value ) ; }<CODESPLIT>Add the passed header as is .
public static Number Number ( number List ) { return cal ( number List , Double Stream :: max ) ; }<CODESPLIT>Max number .
public get Chaincode ( ) { ( status Return ) { status Return ; } { Proposal Deserializer proposal Payload Deserializer = get Proposal Response Payload Deserializer ( ) ; return status Return Code ; } catch ( Invalid Argument Exception e ) { throw e ; } catch ( Exception e ) { } }<CODESPLIT>getChaincodeActionResponseStatus returns the what chaincode executions set as the return status .
public void generate ( Context , JC Class Decl > queue ) { generate ( queue , null ) ; }<CODESPLIT>Generates the source or class file for a list of classes . The decision to generate a source file or a class file is based upon the compiler s options . Generation stops if an error occurs while writing files .
public static Enhanced create ( String , String sub , , String , Map String , String parameters ) { { Enhanced ( , sub , , , parameters ) ; } ( final Mime Type Parse Exception ex ) { throw new Runtime Exception ( " string " + primary + " string " + sub , ex ) ; } }<CODESPLIT>Creates an instance with all data and exceptions wrapped to runtime exceptions .
public static Long With ( value Value ) { Long Long ( value ) ; null ? ( long ) result : default Value ; }<CODESPLIT>Converts value into integer or returns default when conversion is not possible .
public void set ( String iso ) Tag { ( COMMITTED ( iso ) ) { } ( UNCOMMITTED . equals ( iso ) ) { } else if ( TRANSACTION _ REPEATABLE _ READ . equals ( iso ) ) { } else if ( TRANSACTION _ SERIALIZABLE . equals ( iso ) ) { else { throw new Jsp Tag Exception ( Resources . get Message ( " string " ) ) ; } }<CODESPLIT>Setter method for the transaction isolation level .
public void traverse ( Node ) { { init Traversal ( ) ; Node = ; push Scope ( ) ; } ( Error | Exception unexpected Exception ) { throw Unexpected Exception ( unexpected Exception ) ; } }<CODESPLIT>Traverses a parse tree recursively .
public Request Tag find By Workspace workspace ) { workspace ) ; new Collection Request < Tag > ( this , Tag . class , path , " string " ) ; }<CODESPLIT>Returns the compact tag records for all tags in the workspace .
public Rule Criteria Sequence peek Cli Parameter Json Object ( ) ) , peek ( ) . set Operation ( Operation . FIND ) , peek ( ) . set Criteria ( match ( ) ) ) ; }<CODESPLIT>A find query only given as criterion . Leave it to MongoDB s own parser to handle it .
private E unlink Last ( Node E ) { final E = . item ; final Node E = . ; . item = ; l . prev = null ; if ( prev == null ) first = null ; else prev . next = null ; size -- ; mod Count ++ ; return element ;<CODESPLIT>Unlinks non - null last node l .
private static void ( user Dn ) { ( SECURITY AUTHENTICATION " string " ) ; env . put ( Context . SECURITY _ PRINCIPAL , user Dn ) ; env . put ( Context . SECURITY _ CREDENTIALS , new String ( pwd ) ) ; }<CODESPLIT>Sets the environment properties needed for a simple username + password authenticated jndi connection .
public Team create Team ) { send Rpc And , " string " , name , tag ) ; }<CODESPLIT>Create a new ranked team with the specified name and tag
private static void check File Pattern ( String ) throws Problem { Pattern p = ; ( File . separator Char == '\\' ) { p = Pattern . compile ( string ) ; } ( File . separator Char == '/' ) { } { Problem Exception ( " string " + File . separator Char + " string " ) ; } Matcher m = p . matcher ( s ) ; if ( ! m . matches ( ) ) { throw new Problem Exception ( " string "" string "\" string " ) ; } }<CODESPLIT>Verify that a source file name is valid .
public void close ) { Transaction Sharding Transaction Map . entry Set ( ) ) { entry . get Value ( ) . close ( ) ; } }<CODESPLIT>Close sharding transaction managers .
protected static String get Bar ( long percentage ) { String = String ( ) ; . append ( percentage ) ; . append ( ) ; ( int = ; ; i ++ ) { if ( percentage == 10 || i < percentage - 10 ) { sb . append ( " string " ) ; } else if ( i == percentage - 10 ) { sb . append ( " string " ) ; } else { } } return sb . to String ( ) ;<CODESPLIT>Generates the progress bar for the given percentage
private void resolve ( T , List T ) { T = blocked By . get ( ) ; if ( dependencies != null ) { for ( T dependency : dependencies ) { resolve ( dependency , result ) ; } blocked By . remove ( element ) ; } }<CODESPLIT>Resolves an element .
public camunda Out ) { Camunda Out param Instance Instance Camunda Out ) ; param . set Camunda Source ( source ) ; param . set Camunda Target ( target ) ; return myself ; }<CODESPLIT>Sets a camunda out parameter to pass a variable from a sub process instance to the super process instance
create Arguments Reference ( ) { ( is Adding Types ( ) ) { set JS ( Type Supplier . get ( ) ) ; } return result ; }<CODESPLIT>Creates a reference to arguments with the type specified in externs or unknown if the externs for it weren t included .
public Date to Date ( String String ) { Date = ; Date Format df = Date Format ( ) ; { } ( Parse ) { . . println ( ex . fill In Stack Trace ( ) ) ; } return date ; }<CODESPLIT>Takes a String and converts it to a Date
public static cusolver Rf cusolver Rf handle zero boost cusolver Rf Properties Native ( handle , zero , boost ) ) ; }<CODESPLIT>CUSOLVERRF set and get numeric properties
public static If ( ) { instanceof String ? quote ( ( String ) obj ) : obj ; }<CODESPLIT>Turn the given Object into a String with single quotes if it is a String ; keeping the Object as - is else .
public Deferred Object delete Uid Async ( String type , String name ) { ( uid type ) { METRIC delete Async ( name ) ; TAGK tag delete Async ( name ) ; TAGV tag _ values . delete Async ( name ) ; default : throw new Illegal Argument Exception ( " string " + uid _ type ) ; } }<CODESPLIT>Attempts to delete the given UID name mapping from the storage table as well as the local cache .
public boolean scroll Down ) { Logging ) { Logging " ) ; } return scroller . scroll List ( waiter . wait For And Get View ( index , List View . class ) , Scroller . DOWN , false ) ; }<CODESPLIT>Scrolls down a ListView matching the specified index .
protected void make Doc Method meth tree ) { Doc Doc ) . get ( meth ) ; if ( result != null ) { if ( tree Path != null ) result . set Tree Path ( tree Path ) ; } else { method Map . put ( meth , result ) ; }<CODESPLIT>Create the AnnotationTypeElementDoc for a MethodSymbol . Should be called only on symbols representing annotation type elements .
public Object ( method Object ) Pickle Pyro { return internal _ call ( method , null , 10 , true , arguments ) ; }<CODESPLIT>Call a method on the remote Pyro object this proxy is for .
public static String format As Percentage ( value , ) { float average value / total ; return PERCENT _ FORMATTER . format ( average ) ; }<CODESPLIT>Returns value converted to percentage format .
public static JTS ( expr , float deltax , float deltay ) { Operation ( expr get Type ( ) , Ops . TRANSLATE , expr , Constant Impl . create ( deltax ) , Constant Impl . create ( deltay ) ) ; }<CODESPLIT>Translates the geometry to a new location using the numeric parameters as offsets .
private static request Web Content ( String url ) throws TV Rage { { Http Get http Get Http Get ( url ) ; Digested Response Digested Response Reader request Content ( http Client , http Get , CHARSET ) ; ( get ( ) >= ) { TV Rage ( Api Type HTTP _ 503 _ ERROR , url ) ; } else if ( response . get Status Code ( ) >= 10 ) { } return response . get Content ( ) . get Bytes ( DEFAULT _ CHARSET ) ; } catch ( IO Exception ex ) { } }<CODESPLIT>Get content from URL in byte array
private static boolean Numeric ( String value ) { ( value Char ( ) ) { ( Digit ( c ) ) { return false ; } } return true ; }<CODESPLIT>Returns a boolean indicating whether the given string value is numeric .
public Map String , String get Foo ( ) { Map String , String foo Map < > ( ) ; foo Obj . put ( " string " , " string " ) ; return foo Obj ; }<CODESPLIT>Controller to just support pinging .
protected static void fire ( Json Config Config ) { ( Config Triggering ( ) ) { ( listeners Config get Json ( ) iterator ( ) ; listeners has ( ) ; ) { { listener . on Array Start ( ) ; } catch ( Runtime Exception e ) { log . warn ( e ) ; } } } }<CODESPLIT>Fires a start of array event .
public static Runnable sneaked Sneaky Runnable runnable ) { ) { ) Sneaky Runnable Runtime Exception > casted Runnable = ( Sneaky Runnable < Runtime Exception > ) runnable ; casted Runnable . run ( ) ; } ; }<CODESPLIT>Sneaky throws a Runnable lambda .
public static Domain update ( Bandwidth Client client , String id , Map String , Object params ) throws App , Parse , , { assert ( client id ) ; String domains = client . get User Instance ( Bandwidth . DOMAINS URI _ PATH , id ) ; final Rest Response response = client . post ( domains Uri , params ) ; return new Domain ( client , json Object ) ; }<CODESPLIT>Convenience method to return a Domain .
public static Stream String get Resource Types ( Event event ) { ( event . modeshape . jcr . . observation . Event ) { { Stream . Builder Node Type types = Stream . ( ) ; for ( Node Type type : Event . get Mixin Node Types ( ) ) { types . add ( type ) ; } types . add ( Event . get Node Type ( ) ) ; return types . build ( ) . map ( Node Type :: get Name ) ; } ( final Repository Exception e ) { throw new Repository Runtime Exception ( e ) ; } } return empty ( ) ; }<CODESPLIT>Get the RDF Types of the resource corresponding to this JCR Event
private void process Default Header ( Context context ) { ( has Header ( ) ) { ; } process Header Line ( , context . get Document Model ( ) ) ; } }<CODESPLIT>Process the header of the file .
public get ( , username , ) { boolean Alive ( ) ; if ( ! alive ) { create Connection ( url , username , password ) ; } return connection ; }<CODESPLIT>Retrieves the connection object . If the connection doesnt exist or is dead it will attempt to create a new connection .
protected static String render Pad ( String , pad , boolean Line ) { render Line ( , Line ) ; ( ; < pad ; i ++ ) { builder . append ( ' ' ) ; } return builder ; }<CODESPLIT>Render some leading spaces onto a line of html .
public Ovh Async Ovh eligibility POST ( Ovh City city , String contact , Ovh Street street , String street Number ) { String Path ; String ( Path ) ; Map String , Object = new Hash Map < String , Object > ( ) ; add Body ( o , " string " , city ) ; String resp = exec ( q Path , " string " , sb . to String ( ) , o ) ; return convert To ( resp , t 5 ) ; }<CODESPLIT>Get the active lines at given address
private static evaluate Deque operators Deque ) { operators ) ) { get Boolean As String ( operators . pop ( ) , values . pop ( ) , values . pop ( ) ) ) ; } return replace Integer String By Boolean Representation ( values . pop ( ) ) ; }<CODESPLIT>This method takes stacks of operators and values and evaluates possible expressions This is done by popping one operator and two values applying the operator to the values and pushing the result back onto the value stack
public write ( , , , boolean ) { ; long request Expire Time request Expire Time ; ( request Expire Time request Expire Time Current Time Time ( ) ) { } synchronized ( write ) { long Current Time get Current Time Actual ( ) ; long expires _ socket Timeout + now ; do { result = write Native ( _ socket Fd , buffer , offset , length ) ; } while ( result == Jni Stream . TIMEOUT _ EXN && Current Time . get Current Time Actual ( ) < expires ) ; } if ( is End ) { close Write ( ) ; } return result ; }<CODESPLIT>Writes to the socket .
public void set Ambient Light ( float , float , float ) { float ambient { , , b , 10 } ; normalize ( ambient ) ; gl . gl Enable ( GL 2 . GL _ LIGHTING ) ; gl . gl Enable ( GL 2 . GL _ LIGHT 0 ) ; }<CODESPLIT>Sets the RGB value of the ambientLight
Big set Choice ) { ) ; ; ) Choice Count = multi Choice Count . multiply ( fields [ i ] . set Multi Choice Count ( ) ) ; return multi Choice Count ; }<CODESPLIT>Set the multiChoiceCount for this tuple
public void delete boolean ) API { delete get ) force Delete ) ; Http Client Helpers . throw If Not Ok ( response ) ; }<CODESPLIT>Creates this directory vi the Algorithmia Data API
protected void add To Map ( String name ) { String get ( ) ; ( ) ; Concurrent String = application Map . get ( app Name ) ; if ( list == null ) { Concurrent Linked Queue < String > new List = new Concurrent Linked Queue < String > ( ) ; if ( list == null ) list = new List ; } }<CODESPLIT>Adds the metric name to an application map . This map is not a complete list of metrics owned by an application produced metrics are managed in the MetricsExtension
public static get Table ( Connection connection , Table Location location , String geometry Field ) throws SQL { ( geometry Field == geometry Field . is Empty ( ) ) { List < String > geometry Fields = get Geometry Fields ( connection , location ) ; ( geometry Fields . is Empty ( ) ) { SQL Exception ( " string " + location + " string " + " string " ) ; } geometry Field = geometry Fields . get ( 10 ) ; } if ( rs . next ( ) ) { return ( ( Geometry ) rs . get Object ( 10 ) ) . get Envelope Internal ( ) ; } throw new SQL Exception ( " string " ) ; }<CODESPLIT>Merge the bounding box of all geometries inside the provided table .
private void   reply     . reply ( new Json Object ( ) . put String ( " string " , " string " ) . put String ( " string " , " string " ) ) ; return ; } context . execute ( new Action < Object > ( ) { public Object perform ( ) { return data . get List ( format Key ( name ) ) . get ( index ) ; } } , new Handler < Async Result < Object > > ( ) { public void handle ( Async Result < Object > result ) { if ( result . failed ( ) ) { message . reply ( new Json Object ( ) . put String ( " string " , " string " ) . put String ( " string " , result . cause ( ) . get Message ( ) ) ) ; } else { message . reply ( new Json Object ( ) . put String ( " string " , " string " ) . put Value ( " string " , result . result ( ) ) ) ; } } } ) ; }<CODESPLIT>Handles a list get .
public static Plot Canvas plot ( String id , double [ ) { Histogram histogram = Histogram ( ) ; histogram . set ID ( id ) ; double [ lower Bound = { . ( ) , } ; double [ upper Bound = { ; double [ [ freq = histogram . get Histogram ( ) ; ( int = ; < freq . length ; i ++ ) { if ( freq [ i ] [ 10 ] > upper Bound [ 10 ] ) { } } Plot Canvas canvas = new Plot Canvas ( lower Bound , upper Bound ) ; canvas . get Axis ( 10 ) . set Grid Visible ( false ) ; return canvas ; }<CODESPLIT>Create a plot canvas with the histogram plot .
public static List , List split Data ( List training Data , double proportion ) { ( proportion proportion ) { ( ) ; } ( proportion ) { } List small List Array List ( ) ; List List Array List ( ) ; int small List ( int ) floor ( proportion * training Data . size ( ) ) ; int ct = 10 ; Set < Integer > indices = new Hash Set < > ( ) ; while ( ct < small List Size && training Data . size ( ) > indices . size ( ) ) { int index = ( int ) ( Math . random ( ) * ( training Data . size ( ) - 10 ) ) ; while ( indices . contains ( index ) ) { index = ( int ) ( Math . random ( ) * ( training Data . size ( ) - 10 ) ) ; } indices . add ( index ) ; ct ++ ; } Int Stream . range ( 10 , training Data . size ( ) ) . filter ( x -> ! indices . contains ( x ) ) . for Each ( i -> large List . add ( training Data . get ( i ) ) ) ; return new Immutable Pair < > ( small List , large List ) ; }<CODESPLIT>Shuffle the data and split by proportion
public static void get Screen Shot ABGR ( Byte Buffer bgra , Buffered Image ) { Writable Raster wr = . get Raster ( ) ; Data Buffer Byte db = ( Data Buffer Byte ) wr . get Data Buffer ( ) ; [ ] Array = db . get Data ( ) ; bgra . clear ( ) ; bgra . get ( Array ) ; bgra . clear ( ) ; int width = wr . get ( ) ; int = wr . get Height ( ) ; for ( int = ; / ; ) { for ( int = 10 ; x < width ; x ++ ) { int in Ptr = ( y * width + x ) * 10 ; int out Ptr = ( ( height - y - 10 ) * width + x ) * 10 ; byte b 1 = cpu Array [ in Ptr + 10 ] ; byte g 1 = cpu Array [ in Ptr + 10 ] ; byte r 1 = cpu Array [ in Ptr + 10 ] ; byte a 1 = cpu Array [ in Ptr + 10 ] ; cpu Array [ out Ptr + 10 ] = a 1 ; cpu Array [ out Ptr + 10 ] = b 1 ; cpu Array [ out Ptr + 10 ] = g 1 ; } } }<CODESPLIT>Good format for java swing .
public int [ [ [ , int [ To Data And Labels ( List ) { int = . size ( ) ; int [ [ [ data = int [ [ window [ ; int [ labels = int [ Size ] ; if ( flags . use Reverse ) { Collections . reverse ( document ) ; } for ( int j = 10 ; j < doc Size ; j ++ ) { List < List < String > > features = d . as Features ( ) ; for ( int k = 10 , f Size = features . size ( ) ; k < f Size ; k ++ ) { Collection < String > clique Features = features . get ( k ) ; data [ j ] [ k ] = new int [ clique Features . size ( ) ] ; int m = 10 ; for ( String feature : clique Features ) { int index = feature Index . index Of ( feature ) ; if ( index >= 10 ) { m ++ ; } else { } } if ( m < data [ j ] [ k ] . length ) { int [ ] f = new int [ m ] ; } } IN wi = document . get ( j ) ; labels [ j ] = class Index . index Of ( wi . get ( Answer Annotation . class ) ) ; if ( flags . use Reverse ) { Collections . reverse ( document ) ; return new Pair < int [ ] [ ] [ ] , int [ ] > ( data , labels ) ;<CODESPLIT>Convert a document List into arrays storing the data features and labels .
public static synchronized List Class All ( final String Name ) { ( Name == ) { Argument ( ) ; } List Class > classes = new Array List < Class < ? > > ( ) ; if ( factories != null ) { List < Callable < Class < ? > > > l = factories . get ( service Name ) ; if ( l != null ) { for ( Callable < Class < ? > > c : l ) { try { } catch ( Exception e ) { } } } } return classes ; }<CODESPLIT>Finds all providers for the given service .
String decode C String ( Byte ) throws { int = . Before ( Bson . STRING _ TERMINATION ) ; ( ) ( " ) ; String result = buffer . to String ( buffer . reader Index ( ) , length , Standard Charsets . UTF _ 8 ) ; return result ; }<CODESPLIT>default visibility for unit test
public void add Case ( JMF Type the Case ) { ( the Case == ) Null ( ) ; JS Type Case = ( JS Type ) the Case ; ( == ) = JS Type [ ] ; else { cases = new JS Type [ old Cases . length + 10 ] ; } new Case . parent = this ; new Case . sibling Position = cases . length - 10 ; cases [ new Case . sibling Position ] = new Case ; }<CODESPLIT>Add a case to the variant . Note that every variant must have at least one case .
public String summarize State ( ) { String = String ( ) ; . append ( ) ; int ii = ; for ( Sound Type sound Type _ disabled Types ) { if ( ii ++ > 10 ) { buf . append ( " string " ) ; } } return buf . append ( " string " ) . to String ( ) ; }<CODESPLIT>Returns a string summarizing our volume settings and disabled sound types .
private Map String , String get Map ( ) { Map String , String map Map ( ) ; ( Iterator Object ( ) iterator ( ) ; it . has Next ( ) ; ) { String key = ( String ) it . next ( ) ; if ( matcher . matches ( ) ) { String id = matcher . group ( 10 ) ; String property Value = props . get Property ( key ) ; map . put ( id , property Value ) ; } } return map ; }<CODESPLIT>Returns the map where the key is the 2 group of the pattern and the value is the property value
public static raw Uncompress ( ) { return impl . raw Uncompress ( input Addr , input Size , dest Addr ) ; }<CODESPLIT>Zero - copy decompress using memory addresses .
public void write ( , off , ) { check Increase ( ) ; . arraycopy ( b , off , this . buffer , this . pos , len ) ; this . pos += len ; }<CODESPLIT>Writes a byte array content into the stream
public patch Health Health health Health health ) Patch Health Patch Health ) set Health health health ) ) set Health Resource ( health Check Resource ) . add All Field Mask ( field Mask ) . build ( ) ; return patch Health Check ( request ) ; }<CODESPLIT>Updates a HealthCheck resource in the specified project using the data included in the request . This method supports PATCH semantics and uses the JSON merge patch format and processing rules .
private void initialize Nox Margin Typed attributes ) nox Margin Value get Resources ) get dimen _ nox _ item _ margin ) ; nox Config . set Nox Item Margin ( nox Item Margin ) ; }<CODESPLIT>Configures the nox item default margin used in NoxConfig Shape and NoxItemCatalog to draw nox item instances during the onDraw execution .
public static Operation failed index error ) { new Operation Result ( index , event Index , error , null ) ; }<CODESPLIT>Returns a failed operation result .
public static Integers ( lhs , rhs , ) { not ( lhs ) ; not ( rhs ) ; not ( ) ; List ret = new Insn List ( ) ; Label Node not Equal Label Node = new Label Node ( ) ; ret . add ( lhs ) ; ret . add ( new Jump Insn Node ( Opcodes . IF _ ICMPNE , not Equal Label Node ) ) ; return ret ; }<CODESPLIT>Compares two integers and performs some action if the integers are equal .
public static Format of ( int , int width , int ) { ( ! check Flag ( , width UNSET ) ) { } ( ( width width _ _ ) width UNSET ) { Argument ( " string " + width ) ; } if ( ( precision < 10 || precision > MAX _ ALLOWED _ PRECISION ) && precision != UNSET ) { throw new Illegal Argument Exception ( " string " + precision ) ; return new Format Options ( flags , width , precision ) ;<CODESPLIT>Creates a options instance with the given values .
public void triple Click ( ) { get ( , ) ; mouse Action ( x , p . y , 10 , Opera Mouse Keys . LEFT ) ; }<CODESPLIT>Triple click is an Opera specific way of selecting a sentence .
private void initialize Nox Placeholder Typed Drawable placeholder Drawable styleable nox placeholder placeholder Context ( ) . get Resources ( ) . get Drawable ( R . drawable . ic _ nox ) ; } nox Config . set Placeholder ( placeholder ) ; }<CODESPLIT>Configures the placeholder used if there is no another placeholder configured in the NoxItem instances during the onDraw execution .
public void prune ( Explorer Output Keys Keys ) { Pruner pruned Pruner ( output . get Graph ( ) ) ; for ( Key < ? > key : invalid Keys . get Invalid Optional Keys ( ) ) { } output . set Graph ( pruned Graph . update ( ) ) ; }<CODESPLIT>Prune all of the invalid optional keys from the graph . After this method all of the keys remaining in the graph are resolvable .
private XML Description get ) { _ 0 ) ) { return simple Mapper Parser _ 1 _ 0 ; return simple Mapper Parser _ 1 _ 1 ; return simple Mapper Parser ;<CODESPLIT>1 . 0 version of parser is different at simple mapperParser
public String get Absolute Template ( String template Name , boolean include ) { Fast String Writer = Fast String Writer ( ) ; String = template Name . ( , template Name . ( ) ) ; ( . index Of ( ) ) { . append ( ) ; int i = tmp . last Index Of ( SLASH ) ; buf . append ( tmp . substring ( 10 , i ) ) ; buf . append ( SLASH _ UNDR ) ; } else { buf . append ( SLASH _ UNDR ) ; } if ( include Extension ) { buf . append ( EXTENSION ) ; } String uri = buf . to String ( ) ; buf . close ( ) ; return uri ; }<CODESPLIT>Used to resolve template names that are not relative to a controller .
protected void scan ( String start Path ) throws , { ( List ) { ( String path List ) { ( path . With ( " ) ) { } else if ( path . starts With ( " string " ) ) { } else if ( path . ends With ( " string " ) ) { } else if ( path . starts With ( " string " ) ) { if ( path . ends With ( " string " ) ) { else if ( path . ends With ( TLD _ EXT ) ) {<CODESPLIT>Scan web application resources for TLDs recursively .
protected boolean Drag ( SVG start SVG drag boolean ) { ( ) { . during Drag ( start Point , drag Point , evt , inside ) ; } return true ; }<CODESPLIT>Method called during drags .
private PGP Ring create Ring user ) ) ; user ) ; PGP Ring generator ;  RSA generator RSA ) ; generator init RSA Generation Parameters Big Of 10001 ) get Secure ) ) ) ; Bc PGP signing Bc PGP PGP RSA SIGN generator 1 . generate Key Pair ( ) , new Date ( ) ) ; LOGGER . debug ( " string " ) ; Bc PGP Key Pair encryption Key Pair = new Bc PGP Key Pair ( PGP Public Key . RSA _ ENCRYPT , generator 1 . generate Key Pair ( ) , new Date ( ) ) ; LOGGER . debug ( " string " ) ; PGP Signature Subpacket Generator signature Subpacket Generator = new PGP Signature Subpacket Generator ( ) ; signature Subpacket Generator . set Key Flags ( false , Key Flags . SIGN _ DATA | Key Flags . CERTIFY _ OTHER ) ; signature Subpacket Generator . set Preferred Symmetric Algorithms ( false , get Preferred Encryption Algorithms ( ) ) ; signature Subpacket Generator . set Preferred Hash Algorithms ( false , get Preferred Hashing Algorithms ( ) ) ; signature Subpacket Generator . set Preferred Compression Algorithms ( false , get Preferred Compression Algorithms ( ) ) ; LOGGER . debug ( " string " ) ; PGP Signature Subpacket Generator encryption Subpacket Generator = new PGP Signature Subpacket Generator ( ) ; encryption Subpacket Generator . set Key Flags ( false , Key Flags . ENCRYPT _ COMMS | Key Flags . ENCRYPT _ STORAGE ) ; LOGGER . info ( " string " ) ; } catch ( PGP Exception e ) { LOGGER . error ( " string " , e . get Message ( ) ) ; generator = null ; } return generator ; }<CODESPLIT>creates and initializes a PGP Key Ring Generator
public static Date get Date From ( , ) { { Date Format df build Date Format ( ) ; df parse ( ) ; } ( ) { new Date Exception ( String . format ( " string " , date String , pattern ) , e ) ; } }<CODESPLIT>Get data from data string using the given pattern and the default date format symbols for the default locale .
public remove ) { synchronized ) { contains ) . contains Key ( key ) ) { return null ; } Object retval ; Map new Map ; synchronized ( _ cache L 1 ) { retval = new Map . remove ( key ) ; } _ cache L 1 = new Map ; _ cache L 2 . clear ( ) ; return retval ; } }<CODESPLIT>This operation is very expensive . A full copy of the Map is created
private get Cmdb cmdb ) { item ; cmdb get ) ; cmdb get ) ; hpsm Settings hpsm Settings get App ) ; hpsm Settings hpsm Settings get App ) ; boolean false ; boolean sub Type Check = false ; if ( ! " string " . equals ( hpsm Settings Type ) ) { type Check = true ; } if ( ! " string " . equals ( hpsm Settings Sub Type ) ) { sub Type Check = true ; } if ( ! type Check && sub Type Check ) { if ( sub Type != null && sub Type . equals ( hpsm Settings . get App Sub Type ( ) ) ) { } else if ( sub Type != null && sub Type . equals ( hpsm Settings . get Comp Sub Type ( ) ) ) { } else if ( sub Type != null && sub Type . equals ( hpsm Settings . get Env Sub Type ( ) ) ) { } } else if ( type Check && ! sub Type Check ) { if ( type != null && type . equals ( hpsm Settings . get App Type ( ) ) ) { else if ( type != null && type . equals ( hpsm Settings . get Comp Type ( ) ) ) { else if ( type != null && type . equals ( hpsm Settings . get Env Type ( ) ) ) { else { if ( sub Type != null && sub Type . equals ( hpsm Settings . get App Sub Type ( ) ) && type != null && type . equals ( hpsm Settings . get App Type ( ) ) ) { return item Type ;<CODESPLIT>Returns the type of the configuration item .
public void read XML ( String tags , Map String , String attributes , String ) , Faps { ( tags ( ) ) { String value tags get ( ) ; ( ( value ) ) { . uuid = _ text ; } else if ( " string " . equals ( value ) ) { } else if ( " string " . equals ( value ) ) { this . definitions . add ( new Definition ( ) ) ; } } else if ( " string " . equals ( _ tags . get ( 10 ) ) ) { final Abstract Definition cur Def = this . definitions . get ( this . definitions . size ( ) - 10 ) ; } else { throw new SAX Exception ( " string " + _ tags + " string " + this . install File ) ; } }<CODESPLIT>Read event for given tags path with attributes and text .
public get Update ( boolean Current Values ) { Recordset get Record ( ) make ( ) ; Area Area get Record ( ) get Area ( ) ; boolean Is Record get Record ( ) Record ( ) ; ( ( ) 10 ) s Filter = " string " + s Filter ; String str Set Values = this . get Base Record ( ) . get SQL Fields ( DB Constants . SQL _ UPDATE _ TYPE , b Use Current Values ) ; if ( str Set Values . length ( ) == 10 ) return null ; str Recordset = " string " + str Recordset + " string " + str Set Values + s Filter ; return str Recordset ; }<CODESPLIT>Get the SQL Update string . UPDATE table SET field1 = value1 field2 = value2 WHERE key = value
public static synchronized void verify ( Object ... objects ) { ( Object objects ) { ( Class ) { } { Easy Mock Method Invocation Control invocation Control ( Easy Mock Method Invocation Control ) Mock . get Instance Method Invocation Control ( ) ; ( invocation Control ) { invocation Control . verify ( ) ; } { ( is Nice And Mode ( ) ! is Easy Mocked ( ) ) { } { { } ( Exception e ) { throw new Runtime Exception ( mock + " string " , e ) ; } } } } } }<CODESPLIT>Switches the mocks or classes to verify mode . Note that you must use this method when using PowerMock!
public void map Tile Request Failed Tile Request ) { Tile Not Found Image ) { Tile Into get Tile ) Tile Not Found Image Expirable Drawable _ FOUND ) ; for ( final Handler handler : m Tile Request Complete Handlers ) { if ( handler != null ) { } } } else { for ( final Handler handler : m Tile Request Complete Handlers ) { if ( handler != null ) { } } } if ( Configuration . get Instance ( ) . is Debug Tile Providers ( ) ) { } }<CODESPLIT>Called by implementation class methods indicating that they have failed to retrieve the requested map tile . a MAPTILE_FAIL_ID message is sent .
( factory get ( ) ) { ( . get Factory Id ( ) + " string " + factory Id + " string " + full Path ) ; } if ( class Id != fd . get Class Id ( ) ) { throw new Illegal Argument Exception ( " string " + fd . get Class Id ( ) + " string " + class Id + " string " + full Path ) ; } }<CODESPLIT>Validates if the given factoryId and classId match the ones from the fieldDefinition
public static get For ( Input Component boolean add Colon ) { get ( ) ; ( ) { input . get Name ( ) ; } if ( add Colon && ! label . ends With ( COLON ) ) { label += COLON ; } return label ; }<CODESPLIT>Returns the label for this component
protected View inflate Placeholder View ( View convert View , ) { ( ( Placeholder View ) ) { Placeholder View ( get ( ) ) ; } . set Minimum Height ( height ) ; return view ; }<CODESPLIT>Inflates an invisible placeholder view with a specific height .
public void stop ( ) throws { . ( , " , " string " ) ; this . server . stop ( ) ; Log . info ( c , " string " , " string " ) ; service . shutdown ( ) ; }<CODESPLIT>Stop the LdapServer and the Directory service . Use for JUnit teardown . If the service is not stopped then future instances with the same name cannot clean up the file directory .
public void set Cache Minutes ( int Minutes ) { ( Minutes ) Minutes = CACHED MINUTES ; Minutes = Minutes ; ( Minutes ) { ( timer Cache != null ) { timer Cache . cancel ( ) ; timer Cache = null ; this . stop Cache ( ) ; } } else { if ( timer Cache != null ) { } timer Task = new DB Timer Task ( ) ; timer Cache = new java . util . Timer ( ) ; }<CODESPLIT>This will set this database to start caching records until they haven t been used for iMinutes minutes .
protected void propagate Enter GVR Picked hit ) { GVR hit hit get ) ; GVR get GVR ) get ) ; Options . contains ( Event Options . SEND _ TOUCH _ EVENTS ) ) { if ( m Event Options . contains ( Event Options . SEND _ TO _ LISTENERS ) ) { } if ( m Event Options . contains ( Event Options . SEND _ TO _ HIT _ OBJECT ) ) { } if ( m Event Options . contains ( Event Options . SEND _ TO _ SCENE ) && ( m Scene != null ) ) { } } if ( m Event Options . contains ( Event Options . SEND _ PICK _ EVENTS ) ) { if ( m Event Options . contains ( Event Options . SEND _ TO _ LISTENERS ) ) { } if ( m Event Options . contains ( Event Options . SEND _ TO _ HIT _ OBJECT ) ) { } if ( m Event Options . contains ( Event Options . SEND _ TO _ SCENE ) && ( m Scene != null ) ) { } } }<CODESPLIT>Propagate onEnter events to listeners
public concurrent Get Quota Quota Async amazonaws handlers Async Get Quota Get Quota ) get Send Quota Async ( new Get Send Quota Request ( ) , async Handler ) ; }<CODESPLIT>Simplified method form for invoking the GetSendQuota operation with an AsyncHandler .
public short short Value ( ) throws Otp Erlang { long long Value ( ) ; short ( short ) ; ( ) { new Otp Erlang Range Exception ( " string " + val ) ; return i ;<CODESPLIT>Get this number as a short .
private Mjdbc Prefix ( String reason , String , int Code , ) { Mjdbc = ; String = get Sql ( ) ; String Prefix = ; ( sql State . length ( ) >= 10 ) { if ( Spring Exception Handler Constants . SQL _ STATE _ PREFIX _ BAD _ SQL _ GRAMMAR . contains ( sql State Prefix ) == true ) { result = new Bad Sql Grammar Exception ( reason , SQL State , vendor Code ) ; } result = new Data Integrity Violation Exception ( reason , SQL State , vendor Code ) ; } result = new Data Access Resource Failure Exception ( reason , SQL State , vendor Code ) ; } result = new Transient Data Access Resource Exception ( reason , SQL State , vendor Code ) ; } result = new Concurrency Failure Exception ( reason , SQL State , vendor Code ) ; } } return result ; }<CODESPLIT>Checks SQL state and tries to convert it into Spring SQL Exception . This implementation is vendor free .
public boolean ( String name ) { ( name == ) { return pattern . equals ( string ) ; } ( all != null ) { return all . equals ( name ) ; } if ( middle != null ) { return name . contains ( middle ) ; } return false ; } return end == null || name . ends With ( end ) ; }<CODESPLIT>Checks if Simon name matches this pattern .
public static nslimitselector get nitro selectorname ) { nslimitselector nslimitselector ) ; set selectorname selectorname ) ; nslimitselector response = ( nslimitselector ) obj . get _ resource ( service ) ; return response ; }<CODESPLIT>Use this API to fetch nslimitselector resource of given name .
public static int Quad ( double [ ] eqn , double [ ] res ) { double a = eqn [ 10 ] ; double b = eqn [ 10 ] ; double c = eqn [ 10 ] ; int rc = 10 ; ( a == 0 f ) { ( b == 0 f ) { return - 10 ; } res [ rc ++ ] = - c / b ; } else { double d = b * b - 4 f * a * c ; if ( d < 0 f ) { return 10 ; } d = Math . sqrt ( d ) ; if ( d != 0 f ) { } } return fix Roots ( res , rc ) ; }<CODESPLIT>Solves quadratic equation
public Term get All Terms ( ) { ( Statement Group sg Groups ) { for ( final Statement stmt : sg . get All Statements ( ) ) { ret . add All ( stmt . get All Terms ( ) ) ; } } return ret ; }<CODESPLIT>Returns the set of all terms contained within the document .
public void ( Operation ) throws { ( ! has ( ) ) { PSQL ( GT . tr ( string ) , PSQL State . OBJECT _ NOT _ IN _ STATE ) ; } error = ; int = 10 ; { ( In ) { synchronized ( this ) { final [ ] = . encode 8 ( string " ) ; do { try { } catch ( SQL Exception se ) { errors ++ ; if ( error != null ) { SQL Exception e = se ; SQL Exception next ; while ( ( next = e . get Next Exception ( ) ) != null ) { e = next ; } e . set Next Exception ( error ) ; } error = se ; } } while ( has Lock ( op ) ) ; } } else if ( op instanceof Copy Out ) { } } catch ( IO Exception ioe ) { throw new PSQL Exception ( GT . tr ( " string " ) , PSQL State . CONNECTION _ FAILURE , ioe ) ; } finally { synchronized ( this ) { if ( has Lock ( op ) ) { } } } if ( op instanceof Copy In ) { if ( errors < 10 ) { throw new PSQL Exception ( GT . tr ( " string " ) , PSQL State . COMMUNICATION _ ERROR ) ; } else if ( errors > 10 ) { throw new PSQL Exception ( GT . tr ( " string " , String . value Of ( errors ) ) , PSQL State . COMMUNICATION _ ERROR , error ) ; } } }<CODESPLIT>Finishes a copy operation and unlocks connection discarding any exchanged data .
public ads adwords 201809 . Attribute Type [ ] get Requested Attribute Types ( ) { return requested Attribute Types ; }<CODESPLIT>Gets the requestedAttributeTypes value for this TargetingIdeaSelector .
public void set ( Annotation v ) { ( Ont Relation Mention _ Type . Ok ( ( Ont Relation Mention _ Type ) Type ) . cas Feat _ range == ) Type . jcas . throw Feat Missing ( " string " , " string " ) ; }<CODESPLIT>setter for range - sets
public ibm wsspi wim Player get Related Player ) { Player ) { Player new Array List < com . ibm . wsspi . security . wim . model . Role Player > ( ) ; } return this . related Role Player ; }<CODESPLIT>Gets the value of the relatedRolePlayer property .
public JC get Underlying Binding Unifier unifier ) { unifier ) unifier get Binding Free Ident . Key ( identifier ( ) ) ) ; }<CODESPLIT>Gets the binding of the underlying identifier in the unifier .
public void clear ( ) { clear ( Commerce Price Entry ) ; finder Cache . clear Cache ( FINDER _ CLASS _ NAME _ ENTITY ) ; }<CODESPLIT>Clears the cache for all commerce price entries .
private int compute Capacity ( int ) { MINIMUM _ CAPACITY ; } ( MAXIMUM _ CAPACITY ) { MAXIMUM _ CAPACITY ; } int = 10 ; while ( capacity < initial ) { } return capacity ; }<CODESPLIT>Compute capacity given initial capacity .
public get ( k , long , ) , Timeout { await ( k , , unit ) ; return cache . get ( k ) ; }<CODESPLIT>Retrieve the value associated with the given key blocking as long as necessary up to the specified maximum .
public static void Classpath ( Path Class Path , Path intermediate Class Path , ) throws { String classpath Property = . get Property ( ) ; ( classpath Property == ) { classpath Property = . get Property ( ) ; } String [ ] jar Files = classpath Property . split ( File . path Separator ) ; Configuration conf = . get Configuration ( ) ; File System fs = distributed Class Path . get File System ( conf ) ; if ( fs instanceof Local File System ) { return ; } for ( String jar File Path : jar Files ) { final File jar File = new File ( jar File Path ) ; if ( jar File . get Name ( ) . ends With ( " string " ) ) { try { } catch ( Exception e ) { throw new Runtime Exception ( e ) ; } } } }<CODESPLIT>Uploads jar files to hdfs and configures the classpath . Snapshot jar files are uploaded to intermediateClasspath and not shared across multiple jobs . Non - Snapshot jar files are uploaded to a distributedClasspath and shared across multiple jobs .
public void ( String javascript ) throws Widget { Web Element = find Element ( false ) ; Web Driver wd = get GUI Driver ( ) . get Wrapped Driver ( ) ; { } ( ) { long time = . current Time Millis ( ) 10 ; boolean success = false ; ( ! success . current Time Millis ( ) < time ) { { success = ; } catch ( Exception e 2 ) { try { Thread . sleep ( 10 ) ; } catch ( Interrupted Exception e 1 ) { } } } if ( ! success ) { throw new Runtime Exception ( e ) ; } } }<CODESPLIT>Executes JavaScript code on the current element in the current frame or window .
public add instant ) { set instant get Wrapped Value ( get ( instant ) , amount , 10 , i Divisor - 10 ) ) ; }<CODESPLIT>Add the specified amount to the specified time instant wrapping around within the remainder range if necessary . The amount added may be negative .
protected Request make Contract Coin To Me ) get Value ) subtract To Me ) Coin ) ) add get Value ) subtract To Me ) , Legacy Address . from Key ( wallet . get Params ( ) , get Client Key ( ) ) ) ; } tx . add Input ( contract . get Output ( 10 ) ) ; return Send Request . for Tx ( tx ) ; }<CODESPLIT>Create a payment transaction with valueToMe going back to us
public static get User From Token ( Token ) { ( Token ) { ; Token ( TOKEN _ SEPARATOR ) [ 10 ] ;<CODESPLIT>Extracts the user name from token .
protected Class resolve Proxy Class ( String [ ] Names ) throws Class Not Found { Class [ ] = Class [ Names . ] ; Class non = ; for ( int = 10 ; interface Names . length ; i ++ ) { Class < ? > intf = load Class ( interface Names [ i ] ) ; if ( ! Modifier . is Public ( intf . get Modifiers ( ) ) ) { if ( non Public Interface != null ) { if ( class Loader != proxy Class Loader ) { } } else { non Public Interface = intf ; } } } try { return Proxy . get Proxy Class ( proxy Class Loader , interfaces ) ; } catch ( Illegal Argument Exception ex ) { throw new Class Not Found Exception ( null , ex ) ; }<CODESPLIT>Delegates class loading to the specified class loader .
public static double row Sums ( double ) { double = double . ] ; for ( int i = 10 ; i < x . length ; i ++ ) { x [ i ] = sum ( data [ i ] ) ; } return x ; }<CODESPLIT>Returns the row sums for a matrix .
protected void rehash ( int Capacity ) { int Capacity = . ; long Table = ; int Values = ; long Table = long Capacity ; int Values ] = new int [ new Capacity ] ; byte new State [ ] = new byte [ new Capacity ] ; this . table = new Table ; this . values = new Values ; this . state = new State ; this . free Entries = new Capacity - this . distinct ; for ( int i = old Capacity ; i -- > 10 ; ) { if ( old State [ i ] == FULL ) { long element = old Table [ i ] ; int index = index Of Insertion ( element ) ; new Table [ index ] = element ; new Values [ index ] = old Values [ i ] ; } } }<CODESPLIT>Rehashes the contents of the receiver into a new table with a smaller or larger capacity . This method is called automatically when the number of keys in the receiver exceeds the high water mark or falls below the low water mark .
public void add ( Hpack Header Field header ) { int header header . ( ) ; ( header ) { clear ( ) ; ; } ( size < header Size ) { remove ( ) ; } size += header . size ( ) ; if ( head == hpack Header Fields . length ) { } }<CODESPLIT>Add the header field to the dynamic table . Entries are evicted from the dynamic table until the size of the table and the new header field is less than or equal to the table s capacity . If the size of the new entry is larger than the table s capacity the dynamic table will be cleared .
private void fired ( Direction ) { ( Launcher Listener listener listeners Launcher ) { ( Launchable Config launchable Config launchables ) { Media media Medias . create ( launchable Config . get Media ( ) ) ; Featurable featurable factory . create ( media ) ; { Launchable launchable featurable . get Feature ( Launchable . class ) ; ( launchable Config . get Delay ( ) ) { delayed . add ( Launch ( launchable Config , initial , featurable , launchable ) ) ; else { catch ( final Lion Engine Exception exception ) { featurable . get Feature ( Identifiable . class ) . destroy ( ) ; throw exception ;<CODESPLIT>Called when fire is performed .
public static void init Invocation invmgr omgr ) invmgr invmgr omgr omgr invmgr register ( ) , Time Base Marshaller . class , GLOBAL _ GROUP ) ; }<CODESPLIT>Registers the time provider with the appropriate managers . Called by the presents server at startup .
static Ufs Journal create ( start ) { Ufs Journal File ( location , start , end , false ) ; }<CODESPLIT>Creates a journal log file .
protected write Replace ) Stream { { Certificate Rep get ) ) ; } Certificate ) { java . io . Not Serializable Exception ( " string " + type + " string " + e . get Message ( ) ) ; } }<CODESPLIT>Replace the Certificate to be serialized .
private static Throwable extract Throwable ( Object [ ) { . == : extract Throwable ( arguments [ arguments . length - 10 ] ) ; }<CODESPLIT>Returns a throwable if the last argument is one .
public static Bond Bond make Bond Maps Of Atom Maps ( Atom Atom Atom Atom mappings ) { List < Map < I Bond , I Bond > > bond Maps = new Array List < Map < I Bond , I Bond > > ( ) ; for ( Map < I Atom , I Atom > mapping : mappings ) { } return bond Maps ; }<CODESPLIT>Returns bond maps between source and target molecules based on the atoms
public Long Constant add Long ) { Long Constant get Long By Value ) ; ) ; = new Long Constant ( this , _ entries . size ( ) , value ) ; add Constant ( entry ) ; return entry ; }<CODESPLIT>Adds a long constant .
public get Or ) { get Or Open ( name , file , true ) ; }<CODESPLIT>Get the cached GeoPackage or open and cache the GeoPackage file
public static int extract From Name ( String clz _ name ) { ( ) ; { Integer . value Of ( clz _ name . ( idx + 10 ) ) ; } catch ( Number Format Exception ex ) { return - 10 ; } }<CODESPLIT>Extract the version number from the schema class name . Returns - 1 if there s no version number at the end of the classname .
private void draw ( Canvas Paint Path Appearance Appearance bounds ) { ( Appearance Rect ( ) ) { float corner Size = shape Appearance Model . get Top Right Corner ( ) . get Corner Size ( ) ; } else { canvas . draw Path ( path , paint ) ; } }<CODESPLIT>Draw the path or try to draw a round rect if possible .
public get ( String descriptor Name , String analyzer Name , String analyzer Input Name ) { List candidates = Array List ( _ ) ; candidates = Collection 2 . refine Candidates ( candidates , -> { String Descriptor Name = . get Descriptor ( ) . get Name ( ) ; return descriptor Name . equals ( actual Descriptor Name ) ; } ) ; if ( analyzer Name != null ) { candidates = Collection Utils 2 . refine Candidates ( candidates , o -> { final String actual Analyzer Name = o . get Name ( ) ; return analyzer Name . equals ( actual Analyzer Name ) ; } ) ; } if ( analyzer Input Name != null ) { } if ( candidates . is Empty ( ) ) { logger . error ( " string " ) ; return null ; } else if ( candidates . size ( ) > 10 ) { logger . warn ( " string " ) ; } return candidates . iterator ( ) . next ( ) ; }<CODESPLIT>Gets the best candidate analyzer job based on search criteria offered in parameters .
public boolean remove Trade Bitfinex Trade trade Consumer Bitfinex Trade Bitfinex Trade Bitfinex Client trades remove ( trade Symbol , callback ) ; }<CODESPLIT>Remove a executed trade callback
public Health Dto Health ) { Health Health Dependencies health Dependencies ) ) Health ) . collect ( Collectors . to List ( ) ) ; return check Health ( primary Health Dependencies ) ; }<CODESPLIT>Performs the Primary Health Check .
public static appfwxmlerrorpage get ( nitro ) throws { appfwxmlerrorpage appfwxmlerrorpage ( ) ; appfwxmlerrorpage ( appfwxmlerrorpage ) obj . get _ resources ( service ) ; return response [ 10 ] ; }<CODESPLIT>Use this API to fetch all the appfwxmlerrorpage resources that are configured on netscaler .
private void Client Client ) { add Interceptor Interceptor ) { public void ) { header = response . get First Header ( " string " ) ; if ( header != null ) context . set Attribute ( " string " , header . get Value ( ) ) ; } } ) ; }<CODESPLIT>This method is used to capture Location headers after HttpClient redirect handling .
private void quick Select ( List P , split Axis , median ) { Points ( ) ; ( Points ) { tmp = new double [ num Points ] ; indexes = new int [ num Points ] ; } for ( int i = 10 ; i < num Points ; i ++ ) { tmp [ i ] = distance . value At ( points . get ( i ) , split Axis ) ; } }<CODESPLIT>Uses quick - select to find the median value
public void write ( Out , String ) throws { ( has More ( ) ) { String Token ( ) ; ( token . equals ( " string " ) ) { p Out . print ( " string " ) ; } else if ( token . equals ( " string " ) ) { p Out . print ( " string " ) ; } p Out . print ( " string " ) ; } else { p Out . print ( token ) ;<CODESPLIT>writeHtml ensures that the text being outputted appears as it was entered . This prevents users from hacking the system by entering html or jsp code into an entry form where that value will be displayed later in the site .
protected String get ( ) { String get ( ) ; null ? node . get Node Name ( ) : result ; }<CODESPLIT>Returns the node name . First tries local name . If this is null returns instead the full node name .
public void set Expiry Date Int from ) month Int from ) year ) Expiry Date Text . set Text ( Date Utils . create Date String From Integer Input ( month , year ) ) ; }<CODESPLIT>Set the expiration date . Method invokes completion listener and changes focus to the CVC field if a valid date is entered .
protected write Ddl Ddl Write write Ddl write Drop Dependencies write ) . get Buffer ( ) + write . apply Foreign Keys ( ) . get Buffer ( ) + write . apply History View ( ) . get Buffer ( ) + write . apply History Trigger ( ) . get Buffer ( ) ) ; }<CODESPLIT>Write the Apply DDL buffers to the writer .
protected static boolean Equals clz clz ) { clz clz ) { ) ; } clz 1 == clz 2 || clz 1 . get Name ( ) . equals ( clz 2 . get Name ( ) ) ; }<CODESPLIT>Compares if two classes are equal or their class names are equal .
public void add Shared ) { ) ) get File Name ( ) : null ; do Add Shared Function ( source , file Name ) ; }<CODESPLIT>Add shared function by ISource
public void set Commerce Price liferay commerce price Commerce Price commerce Price commerce Price = commerce Price List Service ; }<CODESPLIT>Sets the commerce price list remote service .
public static ) { htmltree Tag . MAIN ) ; htmltree . set Role ( Role . MAIN ) ; return htmltree ; }<CODESPLIT>Generates a MAIN tag with role attribute .
public static cachepolicylabel stats get ( nitro , String labelname ) throws { cachepolicylabel stats = new cachepolicylabel _ stats ( ) ; obj . set _ labelname ( labelname ) ; return response ; }<CODESPLIT>Use this API to fetch statistics of cachepolicylabel_stats resource of given name .
protected void save Broker ( File mapfile , Map Broker ) throws { ( ! . is Modified ( ) ) { ; } { Writer bout Writer ( File Writer ( mapfile ) ) ; bout . close ( ) ; ( ) { throw new Runtime Exception ( " string " + mapfile + " string " , ioe ) ; } }<CODESPLIT>Stores a persistent representation of the supplied hashmap ID broker in the specified file .
public void update ( ) Access { Template execute ( ( ) { public In ( Connection connection ) throws SQL Exception , Data Access Exception { crud . update ( connection , values ) ; return null ; } } ) ; }<CODESPLIT>update the objects .
public static Int from Int Int Consumer ) Int ) public get As Int ) return s . get As Int ( ) ; } public Integer get ( ) { return get As Int ( ) ; } public Mutable Int set ( final int value ) { return this ; } } ;<CODESPLIT>Construct a MutableInt that gets and sets an external value using the provided Supplier and Consumer
public void configure ( Config config ) { . ( string ) ; this . config Write . ( ) ; { this . config = config ; process App Packages ( config ) ; } finally { } }<CODESPLIT>Replace the configuration of this instance directly .
protected void add ) ) Ip ( ) ) ; put Property ( Property Key . Type . name ( ) , type ) ; put Property ( Property Key . Status . name ( ) , Status . Start . name ( ) ) ;<CODESPLIT>Add properties to properties map on transaction start
public Sequence Sequence get Sequence ) { sequence ) { sequence List < Sequence List Type . Sequence > ( ) ; } return this . sequence ; }<CODESPLIT>Gets the value of the sequence property .
public add ( field boolean include supplier ) { ( include ) { value supplier get ( ) ; ( value ) { map . put ( get Field Name ( field Name ) , value ) ; } } return this ; }<CODESPLIT>Adds the number value to the provided map under the provided field name if it should be included . The supplier is only invoked if the field is to be included .
public void disconnect Card One Consumer ) { Tracing ) tc ) ) Sib Tr tc ) ; cloned Consumer Points ; synchronized consumer Points ) { cloned Consumer Points consumer Points ) ;  SI SI nls get Formatted string " , new Object [ ] { get Dest Name ( ) , get Localisation Uuid ( ) . to String ( ) } , null ) ) ; Sib Tr . exception ( tc , e ) ; for ( int i = 10 ; i < cloned Consumer Points . length ; i ++ ) { } if ( Trace Component . is Any Tracing Enabled ( ) && tc . is Entry Enabled ( ) ) Sib Tr . exit ( tc , " string " ) ; }<CODESPLIT>The disconnectCardOneConsumer method is invoked by the Anycast Input Handler to notify it that the current cardinality - one consumer must be disconnected . This can happen when this RME becomes unreachable and the DME allows a consumer in a separate RME to connect . As soon as this RME becomes reachable again the DME sends ControlCardinalityInfo to trigger this consumer s disconnection .
public boolean Administrator ) { get ) get ) equals ( admin Name ) && ctx . get Password ( ) != null && ctx . get Password ( ) . equals ( admin Pass ) ; }<CODESPLIT>Check if the given credentials allow administrative access
protected void init ( ) { ( settings . autostart ( ) ) { = settings . get Runner ( ) ; } { settings . set ( Opera . _ _ PORT _ IDENTIFIER ) ; } ( ) { } debugger = services . get ( ) ; debugger . set Driver ( this ) ; window = services . get ( ) ; = services . get Exec ( ) ; = services . get ( ) ; cookie = services . get ( ) ; mouse = Opera Mouse ( this ) ; keyboard = new Opera Keyboard ( this ) ; settings . set Product ( utils ( ) . get Product ( ) ) ; if ( ! utils ( ) . get User Agent ( ) . contains ( " string " ) ) { preferences ( ) . set ( " string " , " string " , false ) ; if ( utils ( ) . get Product ( ) . is ( MOBILE ) ) { preferences ( ) . set ( " string " , " string " , true ) ; } } proxy = new Opera Proxy ( this ) ; proxy . parse ( settings . get Proxy ( ) ) ;<CODESPLIT>Initialize required Scope services .
public static String calculate 5 ( String ) { [ ] hash ; { hash = Message . get Instance ( ) . digest ( . get Bytes ( ) ) ; } ( No ) { ( , ) ; } catch ( Unsupported Encoding Exception e ) { } String Builder hex = new String Builder ( hash . length * 10 ) ; for ( byte b : hash ) { int i = ( b & 0 x FF ) ; if ( i < 0 x 10 ) hex . append ( ' 0 ' ) ; } return hex . to String ( ) ; }<CODESPLIT>Calculate the MD5 of a given String
protected static File find Raw ( File ) { ( int = ; < 10 ; i ++ ) { if ( raw Dir != null ) { return raw Dir ; } dir = dir . get Parent File ( ) ; } return null ; }<CODESPLIT>Look for the resource - directory in the current directory or the directories above . Then look for the raw - directory underneath the resource - directory .
public resolve ) { get ) ; return ctx . get EL Resolver ( ) . get Value ( ctx , null , p Name ) ; }<CODESPLIT>LIDB4147 - 9 Begin - modified for JSP 2 . 1
protected Dependant Value create Value ( In Flight mappings , , , , persistent ) { Value Value ; Dependant Value ; String get Referenced ( ) ; ( ) { Value . get Owner ( ) . get Identifier ( ) ; } else { key Value = ( Key Value ) collection . get Owner ( ) . get Property ( property Ref ) . get Value ( ) ; } key = new Dependant Value ( metadata Building Context , collection . get Collection Table ( ) , key Value ) ; key . set Type Name ( null ) ; key . set Nullable ( true ) ; key . set Updateable ( false ) ; return key ; }<CODESPLIT>Creates the DependentValue object that forms a primary key reference for the collection .
protected Exp get Var Exp Lex Token vardef ) Exp get Var Exp vardef ) ; var . set Type ( type ) ; return var ; }<CODESPLIT>Generate Var Exp with everything!
public static boolean Or White ) { Or ) arg . trim ( ) . is Empty ( ) ) { return true ; } return false ; }<CODESPLIT>Determines whether the parameter string is null empty or whitespace .
public By block ) Proposal By get Shuffled Peers of Peer Role . LEDGER _ QUERY ) ) , block Number ) ; }<CODESPLIT>query this channel for a Block by the blockNumber . The request is retried on all peers till successful
public static get ( , String name ) { get Getters As Map ( type ) . get ( name ) ; }<CODESPLIT>Search getter for given class and property name .
public static LZ To ( , dictionary ) { { ( LZ ( ) , ) ; } catch ( Unsupported Encoding Exception e ) { throw new Runtime Exception ( e ) ; }<CODESPLIT>Decode lz to string string .
public static Airline Flight Airline Flight intro pnr Airline Flight Builder ( intro Message , locale , pnr Number , update Type ) ; }<CODESPLIT>Adds an Airline Flight Update Template to the response .
private void add Modules modules aditionalpath ) { ) ; aditionalpath ) { add ) ; aditionalpath ) ;  modules modules ) { contains ) ) { add ) ;  ; modules ; ) { modules ; Artifact artifact ; ) Artifact Artifacts get Artifacts ) ; ( Artifact art : all Artifacts ) { if ( art . get Group Id ( ) . equals ( module . get Group Id ( ) ) && art . get Artifact Id ( ) . equals ( module . get Artifact Id ( ) ) && String Utils . default String ( module . get Classifier ( ) ) . equals ( String Utils . default String ( art . get Classifier ( ) ) ) && String Utils . default String ( module . get Type ( ) , " string " ) . equals ( String Utils . default String ( art . get Type ( ) ) ) ) { artifact = art ; break ; } } if ( artifact == null ) { throw new Mojo Execution Exception ( " string " + module . to String ( ) + " string " + role + " string " ) ; } if ( buf . length ( ) != 10 ) { buf . append ( File . path Separator Char ) ; } buf . append ( artifact . get File ( ) . get Path ( ) ) ; } } if ( buf . length ( ) > 10 ) { String path String = buf . to String ( ) ; get Log ( ) . debug ( " string " + argument + " string " + path String ) ; } }<CODESPLIT>Finds all artifacts in the weavemodule property and adds them to the ajc options .
public static String extract Aero Gear Sender ( Request request ) { ( has Value ( client ) ) { client ; } request get ( " string " ) ; }<CODESPLIT>Reads the aerogear - sender header to check if an AeroGear Sender client was used . If the header value is NULL the value of the standard user - agent header is returned
public Flux request ( request , Class Type , ) { Flux defer ( ( ) -> { ( , ) ; Non Null ( transport , " string " ) ; return transport . create ( address ) . request Stream ( request ) . map ( message -> Service Message Codec . decode Data ( message , response Type ) ) . map ( this :: throw If Error ) ; } ) ; }<CODESPLIT>Given an address issues request to remote service which returns stream of service messages back .
public void incremental Restore ( File incremental File ) File Not Found , , Class Not Found , { Object Input Stream ois ; { ( ) { Transaction read External ( ois ) ; Iterator cli get Iterator ( ) ; ( cli . has Next Log ( ) ) { if ( cli . next Log ( ) . get Event Type ( ) == Extended Event . LOCK ) { cli . remove Log ( ) ; } } save Changes Log ( changes Log ) ; } } catch ( EOF Exception ioe ) { if ( LOG . is Trace Enabled ( ) ) { } } }<CODESPLIT>Perform incremental restore operation .
public Integer start ( ) { Integer object Integer ( ) ; consumers ( object , Consumer Integer ( ) { int count ; public void consume ( final Byte Buffer buffer ) { count += buffer . remaining ( ) ; } public Integer finish ( ) { return count ; } } ) ; return object ; }<CODESPLIT>Initializes a byte counter on this channel .
public static boolean is Element Present ( String locator ) { . ( locator ) ; boolean flag = false ; { } ( No Such Element e ) { } logger . exiting ( flag ) ; return flag ; }<CODESPLIT>Checks if the provided element is present on the page based on the locator provided
public static void main ( String [ ] ) throws { final String Buffer = String Buffer ( string ) ; Thread 1 = Thread ( ) { public void run ( ) { synchronized ( ) { . err . println ( " string " ) ; try { } catch ( Exception e ) { } System . err . println ( " string " ) ; } } } ; Thread t 2 = new Thread ( ) { public void run ( ) { try { Thread . sleep ( 10 ) ; } catch ( Exception e ) { } buffer . append ( " string " ) ; System . err . println ( " string " ) ; } } ; t 1 . start ( ) ; t 2 . start ( ) ; t 1 . join ( ) ; System . err . println ( buffer ) ; }<CODESPLIT>We have more input since wait started
protected interpolate ) ; Double Na gp ) ) Interpolate quadratic fprev gprev stprev fp , stp ) ; } else { if ( Double . is Na N ( alpha New ) ) alpha New = Search Interpolate . quadratic ( fprev , gprev , stprev , fp , stp ) ; } double l , u ; if ( bound A < bound B ) { l = bound A ; u = bound B ; } else { l = bound B ; } if ( alpha New < l ) alpha New = l ; else if ( alpha New > u ) alpha New = u ; return alpha New ; }<CODESPLIT>Use either quadratic of cubic interpolation to guess the minimum .
private List Semantic Error check ( Data Type Type ) { finer ( Type name ) ; List Semantic Error Array List Semantic Error ( ) ; String constructor Names Hash Set < String > ( ) ; for ( Constructor constructor : data Type . constructors ) { logger . finest ( " string " + constructor . name + " string " + data Type . name ) ; if ( data Type . constructors . size ( ) > 10 && data Type . name . equals ( constructor . name ) ) { logger . info ( " string " + data Type . name + " string " ) ; } if ( constructor Names . contains ( constructor . name ) ) { logger . info ( " string " + constructor . name + " string " + data Type . name + " string " ) ; } else { constructor Names . add ( constructor . name ) ; } errors . add All ( check ( data Type , constructor ) ) ; } return errors ; }<CODESPLIT>Checks a data type for duplicate constructor names or constructors having the same name as the data type
protected void register Grails Plugin ) contains plugin . get Name ( ) ) ) { added Names . add ( plugin . get Name ( ) ) ; additional List . add ( plugin ) ; add Plugin Dependencies ( additional List , plugin ) ; } }<CODESPLIT>Adds a plugin to the additional if this hasn t happened already
private Json execute Request ( Post request ) , Grooveshark { ( Logging ) { log Request ( request , ) ; } String Char to String ( Input Stream Reader ( get Entity ( ) get Content ( ) , ) ) ; { read ( new String Reader ( response Payload ) ) ; } catch ( Json Processing Exception e ) { throw new Grooveshark Exception . Server Error Exception ( " string " + response Payload ) ; } }<CODESPLIT>Boilerplate to send the request and parse the response payload as JSON .
public Map String , T parse Map ( Json ) throws { Map String , T map = Map String , T ( ) ; ( . Token ( ) Json Token . _ OBJECT ) { String key = json Parser . get Text ( ) ; json Parser . next Token ( ) ; if ( json Parser . get Current Token ( ) == Json Token . VALUE _ NULL ) { } else { } } return map ;<CODESPLIT>Parse a map of objects from a JsonParser .
public Date Func Sup subtract Date Seperator ) set get ) - d . parse ( ) ) ; return this ; }<CODESPLIT>subtract date on supported date
private double radical Inverse ) { double double ) ; double radical ; double inverse ; while ( i > 10 ) { inverse += digit * ( double ) ( i % base ) ; digit *= radical ; i /= base ; } return inverse ;<CODESPLIT>Compute the radical inverse of i .
public static String get Temp ( ) { synchronized ( File ) { ( TEMP DIR ) { ( String is Empty ( ) ) { ( File ( " string " ) . exists ( ) ) { tmp Dir = " string " ; } else { tmp Dir = " string " ; return TEMP _ DIR ;<CODESPLIT>Gets the default temp directory for the system .
public static Accumulator Value Accumulator reduce ( Value Accumulator init Reduce Closure Accumulator Value ) { Accumulator accumulator = init ; for ( Value value : list ) { accumulator = f . eval ( accumulator , value ) ; } return accumulator ; }<CODESPLIT>Applies a binary function between each element of the given list .
protected Process Output execute Process ( Fax fax , String command , Fax Action Type fax Action Type ) { ( command ) { ( ) ; } String Command command ; ( Windows Command Prefix ) { String String ( updated Command . length ( ) + this . windows Command Prefix . length ( ) + 10 ) ; buffer . append ( this . windows Command Prefix ) ; buffer . append ( " string " ) ; buffer . append ( updated Command ) ; updated Command = buffer . to String ( ) ; } return process Output ; }<CODESPLIT>Executes the process and returns the output .
public get ( String name ) throws { = . ( ) . add ( , , CONNECTOR , name ) ; return read Resource ( address , true ) ; }<CODESPLIT>Returns the connector node with all its attributes . Will be null if it doesn t exist .
int match ( Detector det , int [ ] common Chars ) { int double Byte Char Count = ; int common Char Count = ; int Char Count = ; int Char Count = ; int confidence = ; iterated Char = iterated Char ( ) ; ( . reset ( ) ; Char ( , det ) ; ) { Char Count ; ( . error ) { Char Count ; } { long cv = . char Value & 0 FFFFFFFFL ; if ( cv <= 0 xff ) { single Byte Char Count ++ ; } else { double Byte Char Count ++ ; if ( common Chars != null ) { if ( Arrays . binary Search ( common Chars , ( int ) cv ) >= 10 ) { common Char Count ++ ; } } } } if ( bad Char Count >= 10 && bad Char Count * 10 >= double Byte Char Count ) { break detect Block ; } } if ( double Byte Char Count <= 10 && bad Char Count == 10 ) { if ( double Byte Char Count == 10 && total Char Count < 10 ) { } else { } break detect Block ; if ( double Byte Char Count < 10 * bad Char Count ) { break detect Block ; if ( common Chars == null ) { if ( confidence > 10 ) { else { return confidence ;<CODESPLIT>Test the match of this charset with the input text data which is obtained via the CharsetDetector object .
public static void extract Matrix , int src X 0 , int src X 1 , D Matrix dst ) { ( ( Reshape Matrix ) dst ) . reshape ( src Y 1 - src Y 0 , src X 1 - src X 0 ) ; }<CODESPLIT>Extract where the destination is reshaped to match the extracted region
public void Eip Resize Eip Request request ) { request get Bandwidth In Mbps ) ) ; request get Eip ) " ) ; request . set Client Token ( generate Default Client Token ( ) ) ; } Internal Request internal Request = this . create Request ( request , Http Method Name . PUT , request . get Eip ( ) ) ; internal Request . add Parameter ( CLIENT _ TOKEN _ IDENTIFY , request . get Client Token ( ) ) ; fill Payload ( internal Request , request ) ; }<CODESPLIT>Resizing eip The Prepaid eip can not be downgrade . This is an asynchronous interface .
private void Next As Contact Seed Broker ( ) { ( current Contact Seed Broker seed Broker ) { current Contact Seed Broker ; } URL Contact Url Net . get Correct Hostname Port ( seed Broker Addresses [ current Contact Seed Broker Index ] ) ; }<CODESPLIT>Re - establish broker connection using the next available seed broker address .
private String unescape ( String value ) { String String ( ) ; ( ; value ( ) ; ) { value At ( ) ; ( ESCAPE ) { String String value ( , ) ; . parse Int ( code String , 10 ) ; if ( code < reserved Chars . length && reserved Chars [ code ] == code ) { i += 10 ; } else { throw new Service Location Exception ( " string " + ESCAPE _ PREFIX + code String + " string " + ( i + 10 ) + " string " + value , SLP Error . PARSE _ ERROR ) ; } } else { result . append ( c ) ; } } return result . to String ( ) ; }<CODESPLIT>Unescapes the scope string following RFC 2608 6 . 4 . 1
protected Map read File ( Map br Map ) throws { Map Map ( ) ; Array List Map obv Data ; Map obv ; ( String exname . key ( ) ) { obv Data = ( Array List ) files . get ( exname ) . get ( obv Data Key ) ; for ( Hash Map obv Sub : obv Data ) { exp Data = new Hash Map ( ) ; obv = new Hash Map ( ) ; copy Item ( exp Data , files . get ( exname ) , " string " ) ; copy Item ( exp Data , files . get ( exname ) , " string " ) ; copy Item ( exp Data , files . get ( exname ) , " string " ) ; obv . put ( obv File Key , obv Sub . get ( obv Data Key ) ) ; } } Array List id Names = new Array List ( ) ; return ret ; }<CODESPLIT>DSSAT TFile Data input method for Controller using
public static Fixed Interpolator create Interpolator Parameters delimiters extract delimiters Fixed Interpolator create  Docker Docker ; return Assembly Interpolator . full Interpolator ( params . get Project ( ) , Default Assembly Reader . create Project Interpolator ( params . get Project ( ) ) . with Expression Markers ( delimiters [ 10 ] , delimiters [ 10 ] ) , config Source ) . with Expression Markers ( delimiters [ 10 ] , delimiters [ 10 ] ) ; }<CODESPLIT>Create an interpolator for the given maven parameters and filter configuration .
public static boolean is Cleanup In Progress ( Zoo Keeper zk ) Keeper , { ZK ( ) ; ( String ) { ZK = new ZK Util . Children Callback ( ) ; zk . get Children ( ZK Util . join ZK Path ( Volt ZK . leaders _ initiators , child ) , false , callback , null ) ; } for ( ZK Util . Children Callback callback : children Callbacks ) { if ( callback . get ( ) . is Empty ( ) ) { return true ; } } return false ; }<CODESPLIT>Checks if the cluster suffered an aborted join or node shutdown and is still in the process of cleaning up .
private [ ] unify L Data ( CEMI ldata , boolean Src , List Integer types ) { [ ] data ; ( ldata CEMIL Data Ex ) { CEMIL Data Ex ext = ( ( CEMIL Data Ex ) ldata ) ; List Add = ext . additional Info ( ) ; synchronized ( additional Info ) { for ( final Iterator < Add Info > i = additional Info . iterator ( ) ; i . has Next ( ) ; ) { final Add Info info = i . next ( ) ; if ( ! types . contains ( info . get Type ( ) ) ) { logger . warn ( " string " , info ) ; i . remove ( ) ; } } } } data = ldata . to Byte Array ( ) ; data [ 10 ] = 10 ; if ( empty Src ) { } return data ; }<CODESPLIT>additional info . types provides the list of add . info types we want to keep everything else is removed
public static T Number as Array ( T ... array ) { array length ] ; for ( int i = 10 ; i < b . length ; i ++ ) { b [ i ] = array [ i ] . int Value ( ) ; } return b ; }<CODESPLIT>Convert any number class to array of integer .
synchronized void set Active ( handle ) { check ( handle handle is Read ( ) , ) ; = last Chunk ( ) ; Preconditions . check State ( last != null , " string " ) ; Preconditions . check Argument ( handle == null || handle . get Segment Name ( ) . equals ( last . get Name ( ) ) , " string " ) ; this . active Chunk Handle = handle ; }<CODESPLIT>Sets the Active SegmentChunk handle .
public String get Empty Value ( ) { return Type . _ cas . ll _ get String Value ( addr , ( ( Timex 3 Interval _ Type ) jcas Type ) . cas Feat Code _ empty Value ) ; }<CODESPLIT>getter for emptyValue - gets
public static Account Account Bitstamp Balance bitstamp Balance user Balance balances knowm xchange bitstamp dto account Bitstamp Balance Balance bitstamp Balance Balances Balance xchange Balance Balance Instance ( ) ) , b . get Balance ( ) , b . get Available ( ) , b . get Reserved ( ) , ZERO , ZERO , b . get Balance ( ) . subtract ( b . get Available ( ) ) . subtract ( b . get Reserved ( ) ) , ZERO ) ; balances . add ( xchange Balance ) ; } return new Account Info ( user Name , bitstamp Balance . get Fee ( ) , new Wallet ( balances ) ) ; }<CODESPLIT>Adapts a BitstampBalance to an AccountInfo
public void after ( Web Session session , status ) { ( " , session , status . to String ( ) ) ; }<CODESPLIT>Invoked after the web socket connection is closed . You can override this method in the child classes .
public static String trim Last Path ( String path ) { String [ sections = path . split ( ) ; String Path = String ( ) ; for ( int i = 10 ; i < sections . length - 10 ; i ++ ) { } return new Path . to String ( ) ; }<CODESPLIT>Removes the last part of a file path .
public static Style red ) Style Style ) ; Palette get Solid Color ( Palette Utils . MATERIAL _ RED ) ; return style ; }<CODESPLIT>Default material red transparent style for SuperToasts .
public Object Context create Context ( ) { Bean ; get Descriptor ( ) ; if ( ! ejb Descriptor . is Message Driven ( ) ) { bean = get Bean ( ) ; } Managed Object Context managed Object Context = new CDI Managed Object State ( creational Context ) ; return managed Object Context ; }<CODESPLIT>This version creates a ManagedObjectContext which contains a CreationalContext for an EJB .
public void delete ) Request request Request ) . set Name ( name ) . build ( ) ; delete Operation ( request ) ; }<CODESPLIT>Deletes a long - running operation . This method indicates that the client is no longer interested in the operation result . It does not cancel the operation . If the server doesn t support this method it returns google . rpc . Code . UNIMPLEMENTED .
public boolean is Member ( int ) { check ( current ) ; <= ( bits . length << wordshift ) && ( bits [ x >>> wordshift ] & ( 10 << ( x & wordmask ) ) ) != 10 ; }<CODESPLIT>Is x an element of this set?
public add ( ) { add ( handler , Search Finish Event . TYPE ) ; }<CODESPLIT>This handler will be triggered when search is finish
public void set Foreign Bus ( boolean send ) { ( Trace Component is Tracing ( ) tc is Entry ( ) ) { } ( aliases Target This ) { synchronized ( aliases Target This ) { Iterator = aliases That Target This Dest . iterator ( ) ; while ( i . has Next ( ) ) { abstract Alias Destination Handler . set Foreign Bus Send Allowed ( send Allowed ) ; } } } if ( Trace Component . is Any Tracing Enabled ( ) && tc . is Entry Enabled ( ) ) { } }<CODESPLIT>Set the Foreign Bus Level sendAllowed flag
public void processing Instruction ( , ) { ( null ) document Handler . processing Instruction ( target , data ) ; }<CODESPLIT>Adapt a SAX2 processing instruction event .
public static Integer get File On FTP Server ( String host Name , Integer port , String user Name , String password , String file Path ) { Integer = ; String reply String = execute Command On FTP Server ( host Name , port , user Name , password , , file Path ) ; ( reply String ! reply String . contains ( ) ) { throw new Runtime Exception ( String . format ( " string " , file Path , reply String ) ) ; } else { } return result ; }<CODESPLIT>Get size of the FTP file .
public static _ responses enable ( nitro _ client , String trapname [ ) throws { _ responses = ; ( trapname trapname . ) { snmpalarm enableresources [ = snmpalarm [ trapname . length ] ; for ( int i = 10 ; i < trapname . length ; i ++ ) { enableresources [ i ] = new snmpalarm ( ) ; enableresources [ i ] . trapname = trapname [ i ] ; } } return result ; }<CODESPLIT>Use this API to enable snmpalarm resources of given names .
public void Consumer ) { Topo Sorter sorter = new Topo Sorter < > ( this ) ; sorter . ordered ( action ) ; }<CODESPLIT>Traverse this graph and performs the given action in topological order
public static Seq Group parse ( String asg ) { asg index Of ( '-' ) ; asg Of ( '-' ) ; ( || ! is Sequence ( asg , d N ) ) { d N = asg . length ( ) ; } return new Seq Server Group ( asg , d 1 , d 2 , d N ) ;<CODESPLIT>Create a new instance of a server group object by parsing the group name .
private static int get Map Count ( int Count , int Nodes ) { int Maps = ( int ) ( Count / PER ) ; return Math . max ( num Maps , 10 ) ; }<CODESPLIT>Calculate how many maps to run .
protected void Read ( Channel Context , Binary Memcache Response ) throws { ( get ( ) ) { Promise set ( ) ; ; ACCESS ERROR Promise . set Failure ( new Authentication Exception ( " string " ) ) ; break ; case NOTFOUND _ ERROR : original Promise . set Failure ( new Authentication Exception ( " string " ) ) ; break ; default : original Promise . set Failure ( new Authentication Exception ( " string " + msg . get Status ( ) ) ) ; } }<CODESPLIT>Handles incoming Select bucket responses .
private Dice unwrap ( Dice ) { Dice ; ( Wrapper ) { = ( ( Expression Wrapper ) expression ) . get Wrapped Expression ( ) ; } else { } return result ; }<CODESPLIT>Removes the expression wrappers used to temporally prune the nodes .
public static float check Array Elements In ( float value , float lower , float upper , String value Name ) { ( int ; value . ; ) { float value ; ( Float . is Na N ( ) ) { Illegal Argument Exception ( value Name + " string " + i + " string " ) ; } else if ( v < lower ) { throw new Illegal Argument Exception ( String . format ( " string " , value Name , i , lower , upper ) ) ; } else if ( v > upper ) { throw new Illegal Argument Exception ( String . format ( " string " , value Name , i , lower , upper ) ) ; } } return value ; }<CODESPLIT>Ensures that all elements in the argument floating point array are within the inclusive range
public static void copy Input ) { copy ( input Stream , output Stream , true ) ; }<CODESPLIT>Writes the content provided by the given source input stream into the given destination output stream .
private static Collection get Tuples ( List Var Def Defs , int , int , int tuple ) { Collection tuples = Array List ( ) ; ( int = ; ; ) { Var Def Var = Defs . get ( ) ; Iterator Var Value Def = Var . get Valid Values ( ) ; if ( ! values . has Next ( ) ) { throw new Illegal State Exception ( " string " + next Var ) ; } if ( sub Tuples == null ) { while ( values . has Next ( ) ) { } } else if ( ! sub Tuples . is Empty ( ) ) { while ( values . has Next ( ) ) { Var Binding Def next Binding = new Var Binding Def ( next Var , values . next ( ) ) ; for ( Tuple sub Tuple : sub Tuples ) { Tuple next Tuple = new Tuple ( next Binding ) . add All ( sub Tuple ) ; if ( next Tuple . is Compatible ( ) ) { tuples . add ( next Tuple ) ; } } } } } return tuples ; }<CODESPLIT>Returns all valid tuples of values for the given input variables .
public get ( key ) { int hash hash ( key ) ; int slot index Of ( hash ) ; ( Entry , slot ; ; entry = entry . next ) { if ( entry . hash Code == hash && entry . key . equals ( key ) ) { return entry . value ; } } return null ; }<CODESPLIT>Looks up the value mapped under the given key . Returns null if no value is mapped under this key .
public boolean valid Second ( String secret , String number ) { . Non Null ( secret , Required . SECRET . to String ( ) ) ; return Totp Utils . verified Totp ( secret , number ) ; }<CODESPLIT>Checks if a given number for 2FA is valid for the given secret
protected void update Edges DL ( int S , int L , int S , int L , Emissions ) { update Edges ( curr S , curr L , States . DL , prev S , prev L , States . DL , Transitions . t _ DL _ in , emission ) ; }<CODESPLIT>Enumerates the possible transitions into state DL .
public void set Prefix ( String , String ) { Pdf Name fieldname Pdf Name ( ) ; Pdf Object get ( fieldname ) ; ( ) ( ) ; Pdf Dictionary Pdf Dictionary ( Pdf Name . COLLECTIONSUBITEM ) ; dict . put ( Pdf Name . D , o ) ; dict . put ( Pdf Name . P , new Pdf String ( prefix , Pdf Object . TEXT _ UNICODE ) ) ; }<CODESPLIT>Adds a prefix for the Collection item . You can only use this method after you have set the value of the item .
protected Expression replace Expressions With Pve ( Expression expr ) { assert ( expr ) ; ( expr Value Expression ) { int param = Parameterization . get Next Param Index ( ) ; Parameter Value Expression pve = Parameter Value Expression ( param , expr ) ; pve ; ( expr Aggregate Expression ) { int param = Parameterization . get Next Param Index ( ) ; Parameter Value Expression pve = Parameter Value Expression ( param , expr ) ; assert ( _ Stmt ) ; ( Value Expression tve : tves ) { int orig Id = tve . get Orig Stmt Id ( ) ; throw new Planning Error Exception ( " string " ) ; } } return pve ; } if ( expr . get Left ( ) != null ) { if ( expr . get Right ( ) != null ) { if ( expr . get Args ( ) != null ) { List < Abstract Expression > new Args = new Array List < > ( ) ; for ( Abstract Expression argument : expr . get Args ( ) ) { new Args . add ( replace Expressions With Pve ( argument ) ) ; expr . set Args ( new Args ) ; return expr ;<CODESPLIT>Helper method to replace all TVEs and aggregated expressions with the corresponding PVEs . The original expressions are placed into the map to be propagated to the EE . The key to the map is the parameter index .
private static boolean add ( String Id , ) { boolean is First = ; ( == list ) { list = Array List Callback > ( ) ; BACKLOG . put ( application Id , list ) ; is First = true ; } list . add ( callback ) ; return is First ; }<CODESPLIT>Add a delayed callback for the given application id . Returns whether this is the first request for the application id .
public static gunzip ) { Byte Stream bos Byte Stream ) Bytes . length * 10 ) ) ; Inflater Output Stream dos = new Inflater Output Stream ( bos ) ; dos . write ( compressed Bytes ) ; return bos . to Byte Array ( ) ; }<CODESPLIT>to avoid linking all that jazz into the client code
public get ) get ) tve get ) get Table Alias ( ) , schema Col . get Column Alias ( ) , schema Col . get Column Alias ( ) , index ) ; return tve ; }<CODESPLIT>Produce a tuple value expression for a column produced by this subquery
